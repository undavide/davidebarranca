<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>Digital Caveman. Photoshop retoucher and script/panels developer. I am also an author, check the Courses page!</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 14 Dec 2020 19:35:47 +0100</pubDate>
    <lastBuildDate>Mon, 14 Dec 2020 19:35:47 +0100</lastBuildDate>
    <generator>Jekyll v4.1.1</generator>
    
      <item>
        <title>Adobe UXP: Things you need to know! #8 BatchPlay (part 3): the Alchemist plugin as an Inspector</title>
        <description>&lt;p&gt;In this episode I inspect the various Photoshop app‚Äôs BatchPlay objects with the Alchemist plugin. BatchPlay has been the subject of a three-parts mini-series, of which this is the third and last one.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/qDw3mdGAG2o&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Download the Alchemist plugin by Jaroslav Bereza &lt;a href=&quot;https://adobe.ly/33NvdhO&quot;&gt;here üç∫&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you find this content useful, &lt;em&gt;please consider supporting me&lt;/em&gt; ‚Äì 2020 is a hell of a year. I don‚Äôt have a Patreon page, but I‚Äôve got two fairly cheap plugins on the Photoshop Marketplace, &lt;a href=&quot;https://adobe.com/go/cc_plugins_discover_plugin?pluginId=28db2e07&amp;amp;workflow=share&quot;&gt;ALCE&lt;/a&gt; (Advanced Local Contrast Enhancer) and &lt;a href=&quot;https://adobe.com/go/cc_plugins_discover_plugin?pluginId=78c3cdaf&amp;amp;workflow=share&quot;&gt;Double USM&lt;/a&gt; (on sharpening). If you happen to buy them, please leave a positive rating/review, it would greatly help. Or, you can&lt;/p&gt;

&lt;form action=&quot;https://www.paypal.com/donate&quot; method=&quot;post&quot; target=&quot;_top&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;hosted_button_id&quot; value=&quot;37N4GHTNJK8YE&quot; /&gt;
&lt;input type=&quot;image&quot; src=&quot;https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif&quot; border=&quot;0&quot; name=&quot;submit&quot; title=&quot;PayPal - The safer, easier way to pay online!&quot; alt=&quot;Donate with PayPal button&quot; /&gt;
&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;https://www.paypal.com/en_IT/i/scr/pixel.gif&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;
&lt;/form&gt;

&lt;p&gt;If you cannot, or don‚Äôt want to, that‚Äôs OK anyway.&lt;br /&gt;
Stay safe and thanks! üôèüèª&lt;/p&gt;

&lt;h2 id=&quot;the-whole-series-so-far&quot;&gt;The whole series so far&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know.html&quot;&gt;#01 ‚Äì Rundown on the UXP announcement @ the Adobe MAX 2020&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-2-documentation.html&quot;&gt;#02 - Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-3-UXP-developer-tool.html&quot;&gt;#03 - UXP Developer Tool&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-4-commands-panels-manifest.html&quot;&gt;#04 - Commands vs. Panels and the manifest.json&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-5-async-vs-sync-in-photoshop-dom-scripting.html&quot;&gt;#05 - Sync vs. Async code in Photoshop DOM Scripting&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-6-BatchPlay-part-1-ActionManager-roots.html&quot;&gt;#06 - BatchPlay (part 1): the ActionManager roots&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-7-BatchPlay-part-2-Alchemist-plugin-listener.html&quot;&gt;#07 - BatchPlay (part 2): Alchemist as a UXP Script Listener&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-8-BatchPlay-part-3-Alchemist-plugin-inspector.html&quot;&gt;#08 - BatchPlay (part 3): Alchemist as a UXP Inspector&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;transcription&quot;&gt;Transcription&lt;/h2&gt;

&lt;p&gt;The transcripted video looks weird, but I‚Äôm told it helps to have it anyway because it‚Äôs easier to translate to other languages. Apologies for the lack of punctuation and the sloppy syntax.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;To be added soon&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 14 Dec 2020 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/development/Adobe-UXP-things-you-need-to-know-8-BatchPlay-part-3-Alchemist-plugin-inspector.html</link>
        <guid isPermaLink="true">http://localhost:4000/development/Adobe-UXP-things-you-need-to-know-8-BatchPlay-part-3-Alchemist-plugin-inspector.html</guid>
        
        <category>UXP</category>
        
        <category>Alchemist plugin</category>
        
        
        <category>Development</category>
        
      </item>
    
      <item>
        <title>Adobe UXP: Things you need to know! #7 BatchPlay (part 2): the Alchemist plugin as a Listener</title>
        <description>&lt;p&gt;In this episode I explore BatchPlay code with the Alchemist plugin as a powerful UXP Script Listener. BatchPlay is the subject of a three-parts mini-series.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/aZn_6X6nvUM&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Download the Alchemist plugin by Jaroslav Bereza &lt;a href=&quot;https://adobe.ly/33NvdhO&quot;&gt;here üç∫&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you find this content useful, &lt;em&gt;please consider supporting me&lt;/em&gt; ‚Äì 2020 is a hell of a year. I don‚Äôt have a Patreon page, but I‚Äôve got two fairly cheap plugins on the Photoshop Marketplace, &lt;a href=&quot;https://adobe.com/go/cc_plugins_discover_plugin?pluginId=28db2e07&amp;amp;workflow=share&quot;&gt;ALCE&lt;/a&gt; (Advanced Local Contrast Enhancer) and &lt;a href=&quot;https://adobe.com/go/cc_plugins_discover_plugin?pluginId=78c3cdaf&amp;amp;workflow=share&quot;&gt;Double USM&lt;/a&gt; (on sharpening). If you happen to buy them, please leave a positive rating/review, it would greatly help. Or, you can&lt;/p&gt;

&lt;form action=&quot;https://www.paypal.com/donate&quot; method=&quot;post&quot; target=&quot;_top&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;hosted_button_id&quot; value=&quot;37N4GHTNJK8YE&quot; /&gt;
&lt;input type=&quot;image&quot; src=&quot;https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif&quot; border=&quot;0&quot; name=&quot;submit&quot; title=&quot;PayPal - The safer, easier way to pay online!&quot; alt=&quot;Donate with PayPal button&quot; /&gt;
&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;https://www.paypal.com/en_IT/i/scr/pixel.gif&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;
&lt;/form&gt;

&lt;p&gt;If you cannot, or don‚Äôt want to, that‚Äôs OK anyway.&lt;br /&gt;
Stay safe and thanks! üôèüèª&lt;/p&gt;

&lt;h2 id=&quot;the-whole-series-so-far&quot;&gt;The whole series so far&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know.html&quot;&gt;#01 ‚Äì Rundown on the UXP announcement @ the Adobe MAX 2020&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-2-documentation.html&quot;&gt;#02 - Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-3-UXP-developer-tool.html&quot;&gt;#03 - UXP Developer Tool&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-4-commands-panels-manifest.html&quot;&gt;#04 - Commands vs. Panels and the manifest.json&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-5-async-vs-sync-in-photoshop-dom-scripting.html&quot;&gt;#05 - Sync vs. Async code in Photoshop DOM Scripting&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-6-BatchPlay-part-1-ActionManager-roots.html&quot;&gt;#06 - BatchPlay (part 1): the ActionManager roots&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-7-BatchPlay-part-2-Alchemist-plugin-listener.html&quot;&gt;#07 - BatchPlay (part 2): Alchemist as a UXP Script Listener&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-8-BatchPlay-part-3-Alchemist-plugin-inspector.html&quot;&gt;#08 - BatchPlay (part 3): Alchemist as a UXP Inspector&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;transcription&quot;&gt;Transcription&lt;/h2&gt;

&lt;p&gt;The transcripted video looks weird, but I‚Äôm told it helps to have it anyway because it‚Äôs easier to translate to other languages. Apologies for the lack of punctuation and the sloppy syntax.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Hey I‚Äôm Davide and this is Adobe UXP things you need to know! Today I‚Äôm talking about BatchPlay, again, and also the Alchemist plugin. So in the last video, and if you‚Äôve missed it I suggest you to watch that first because it covers more theoretical grounds on ActionManager, which is a precursor of BatchPlay and the two of them are deeply linked, back then I have left you with the recommendation to go download and install the Alchemist plugin by Jaroslav Bereza. A quick reminder you can find it either on the UXP marketplace for free or on this GitHub page. I prefer the GitHub version because, due to the marketplace ‚Äústrict vetting‚Äù for products, in order to be approved one feature has been implemented not in the most optimized way but both of them should work fine. And in case you‚Äôre not familiar with GitHub you get the entire repository as a zip clicking the green button, download zip and when you‚Äôve unzipped it you can point the UXP Developer Tool to the manifest.json that sits in the /dist folder. Okay? Now we have the plugin loaded in Photoshop and let me dock it on the right, so the Alchemist plugin does at least a couple of very important things: it listens and it can inspect. So you have two buttons down here one for the listener and one for the inspector. Let me start with the listener first. As a reminder from the previous video you know that each user interaction with the user interface in Photoshop triggers events that carry payloads that are complex objects that describe the kind of event and allow it to be played back in the Actions palette or if you can listen to the underlying code you can play it back in your own script. And this is exactly what we‚Äôre going to do right now, so make sure that you click the listener button here at the very bottom and also make sure that you have listener as the type and category and you also have this exclude selected. These are all drop-down menus that have different values and we will look at them in a while. So ‚Äúexclude‚Äù means that all those events that usually pollute the list of events that the Alchemist listens to are not displayed so they are just filtered out. Okay, now that we have clicked this listener we can start doing things, for instance let‚Äôs duplicate a document. So Image, Duplicate and let‚Äôs call this, I don‚Äôt know what, ‚Äúfoo‚Äù, okay? So now you see that, well a document is being duplicated and it‚Äôs called foo, but we also have this duplicate event here and it shows up with this kind of display where in the content and tree you have it displayed as a tree so with these arrows you can expand and collapse them you see that the event is the duplicate event and you have the target, the enum is the ordinal we‚Äôre referring to, a document and we‚Äôre getting the first one and we‚Äôre duplicating it calling it foo and giving it a document id of 889. You can inspect the listened code as a tree or in its raw form which I frankly prefer so this is a JSON like object as we saw in the previous video so you have the event the target which is an array in this case just one object so this one document, the name. the document id, and the command. Also if you go in this code tab you see the exact code that you can use to replay this same event so if you copy this and edit maybe a little bit just to change the name and the document id, because you cannot have two documents with the same id, you can duplicate a document with code. I think this is already possible in the DOM but just for the sake of experimentation let‚Äôs do that so let me copy this switch to Atom, just because it‚Äôs syntax highlighted, paste it here we first need to store the BatchPlay function requiring Photoshop, action, BatchPlay and then the result is equal to await BatchPlay because BatchPlay is an asynchronous function you see that it accepts an array which is this guy here as we saw in the previous video with the descriptor and also an option objects which is this red one with the synchronous execution set to false meaning that this is async; this can be true so in that case BatchPlay is going to act as a synchronous function which is something that is not really recommended unless you perform very quick tasks, and modal behavior well this is when you have modal dialog open and you tell BatchPlay what to do: in this case if there is a modal dialog it will fail. Okay so let‚Äôs say that instead of ‚Äúfoo‚Äù we wanna I don‚Äôt know what ‚Äúmoo‚Äù and the document id is going to be 999 okay? So let me copy everything and we have to run this code but we don‚Äôt have anything to run it into so let me take the debug console. We‚Äôre not going to debug the Alchemist plugin we‚Äôre going to just use this console, so let‚Äôs switch back to Photoshop, let me minimize the UXP dev tool, just the console, at this point I can paste in here everything and hopefully this document is going to be duplicated and it‚Äôs going to be called ‚Äúzoo‚Äù, or ‚Äúmoo‚Äù sorry, with the document id of 999. So let‚Äôs try this and we have promise, the promise is resolved and in fact you have the moo document here okay? So this works, so let‚Äôs try something else we have duplicated this document let‚Äôs try with duplicating layers. And you can do that in a variety of different ways one of which is dragging the layer in the layer palette, to this icon and it has been duplicated and you see another duplicate event and if you select it you see that the target is not anymore a document but a layer and each time that you see in the target something that says ‚Äú_ref‚Äù whatever it is, a layer a document. and then ‚Äú_enum‚Äù ordinal and ‚Äú_value‚Äù targetEnum this means the currently active document or layer so the target is the currently active layer. Version five no idea what this is and is command you can forget about it for the time being, and the option of the duplication is just the dialog option so we are not displaying any dialogue for this duplication event so this duplicates a layer. But you can do this in a different way so for instance you can use the keyboard shortcut Command J and this duplicates the layer but you see we have a very different event copyToLayer, let me select that and you see that the code is once more different the event is copyToLayer here we don‚Äôt have any descriptor because apparently this event doesn‚Äôt need any and again the dialog options are don‚Äôt display again synchronous execution false and modal behavior fail this is the default. We have yet another way to duplicate a layer and in this case with the option key pressed as well with the Command and J so Command Option J you have this dialog where you can input the layers details so the name let me call this ‚Äúzoo‚Äù and for the sake of experimentation let‚Äôs set the color of the layer as blue, let‚Äôs change also the blending mode to screen and the opacity not 100 but 50. Okay so this time we have yet another event it‚Äôs ‚Äúmake‚Äù and so let‚Äôs inspect this make that the Alchemist plugin has listened to we have this object make, actually let me copy everything and paste it in Atom so that we maybe see it a little bit better all right so you see that the event is make we‚Äôre making what? A new, and this is a descriptor so this is the new descriptor so we are making a new layer with the name zoo with the mode that is an enum, a blend mode with a value of screen an opacity which is a unit percent unit, with a value that for some reason is not 50 but is 50 with a lot of decimal places and yet another enum for the color in this case blue we are then using this enum area selector with the value of selectionEnum I‚Äôm not 100 sure what this means probably it says it‚Äôs the active uh layer that we‚Äôre using as as a reference and then copy is true which is probably what is needed for the duplication to succeed and again is command is true and the option don‚Äôt display synchronous execution and modal behavior as the default so again you see that the BatchPlay takes one array which is this thing here and one option object that is this one and if you forget this object the BatchPlay call is going to fail if you don‚Äôt have to modify the default just add an empty object, right? and that‚Äôs going to work so having this kind of code you can do a lot of things for instance you can create a function that lets you duplicate layers setting all those parameters so let me try to make this, let‚Äôs call this a function like a const dupLayer and this is equal to a function with the arrow syntax and this takes everything okay so let me put everything inside here and I want to return this return and since I‚Äôm awaiting for something this makes this function asynchronous so I need to have this async keyword on the top so async okay I think this is it. No, actually it‚Äôs not, I need to be able to set what the name in this case this so name let me add it here so name and then also the blend mode that goes here let me call this blend mode so blend mode and then let‚Äôs add this to the list of the parameters and also the opacity that goes here. Okay so name blending mode opacity and then what oh the color, the color that goes here so let me call this color all right and I think this is it so let me copy everything this function let me check if the BatchPlay so let me switch to Photoshop first and let me put the console on the top let‚Äôs clear it I think that we already have the BatchPlay in memory yes it‚Äôs native code so I just need to paste the code for the dupLayer function all right so Photoshop and then the console this is the function and it returns undefined which is fine because we‚Äôre not calling this function and at this point I can do that so I can call dupLayer and this accepts the name and let me call this name ‚Äúloo‚Äù and then what it wants blending mode let me have this screen as well well of course you need to know all the exact blending modes so you can properly error check here I‚Äôm just using the one that I‚Äôve seen works for the sake of demonstration so screen the blending mode and then the opacity I want in this case 99 and the color let‚Äôs try red that should should work let me delete this zoo layer so we can start duplicating this background so that I know that the screen works and let‚Äôs close this and see what happens we have a promise that is pending and it‚Äôs been resolved and well actually I should have awaited for that so that I should have written await for the dupLayer etc in this case this is the reason why I‚Äôm getting a promise the layer has been created it is red it has the screen blending mode and the opacity 99 so it has worked fine okay I think at this point we can get rid of all those layers and by the way you can also clean the list from this button here that says clear, clear all, and then you get rid of everything one last thing that I want to show you is how to bundle multiple steps into one big routine that is called through BatchPlay, because BatchPlay has this unique feature that ActionManager lacked to run an array of descriptors and then we will wrap this in a function that will stick in the prototype of a native object but we‚Äôll get to that in a moment, it‚Äôs really really cool. So, I‚Äôm still listening I‚Äôm duplicating the layer I‚Äôm not really interested into this copyToLayer event let‚Äôs say that we want to create a luminosity mask on the layer that is selected so we want to create a layer mask make sure that the layer mask is selected you see all the events here we‚Äôre going to look at them in a minute and at this point we can apply the RGB content of that layer as normal doesn‚Äôt make any difference because it was white normal and multiply are the same but let‚Äôs use the proper normal okay so we have those three events let me switch to the raw because I rather prefer it so we have this one let me copy it and paste it just as an object here this is the first one and then we have the select and this goes here let me call this select all right and then we have the last one which is the apply image event this descriptor here so this is apply image okay in the first one we are creating layer mask so you see that we are creating a new channel class channel and we are sticking that into the mask and the mask is reveal all so it‚Äôs white and not black and also the select we‚Äôre selecting what? Target that is an array in this case only one descriptor a channel the currently active channel making visible false and the apply image event is a calculation you see that you have in the reference couple of descriptors so one for the RGB channel so the composite channel and the fact that it is the merged view preserve transparency true whatever it is these are the steps that we have recorded okay so now we can create a function that runs all those three steps at once so let‚Äôs call this createLuma right so const createLumaMask I‚Äôm not sure if this is properly called luminosity mask or would have required the L channel from Lab whatever createLumaMask is fine for us here so it‚Äôs a function and this function calls BatchPlay so BatchPlay and actually it is an asynchronous function so let‚Äôs await for BatchPlay and let‚Äôs make this an async function and BatchPlay you know accepts an array of descriptors and an option object so let me use this as an empty object for the time being so into this array I‚Äôm going to copy and paste all those three descriptors one two and three okay so this function should have not made any mistakes which is really likely perform those three steps and create a luminosity mask on an existing layer so let‚Äôs try that Photoshop and the console let me clear the console and let‚Äôs paste the definition of the function BatchPlay should‚Ä¶ Oh, unexpected token what am I missing? Oh, commas this is something that I do a lot, all right so let me try again paste and undefined which is cool so back to Photoshop and let‚Äôs bring the console up the function was called createLumaMask so let me get rid of that layer let me create another one and let‚Äôs see if this works createLumaMask let‚Äôs call this function and boom it goes so you have three BatchPlay steps merged into one and that is going to be way faster than the previous extension script way of calling three execute action in a row but there‚Äôs something even better you can and if you look at this a page in the documentation you can extend the prototype of some of the native object in this case in the doc they are extending the prototype of the Document we‚Äôre going to extend the prototype of the Layer so let me copy this and show you what I mean so you can say that require Photoshop app not document but we are working on a layer so layer and then prototype to the prototype we are going to add something called createLumaMask and this is an async function that in this case returns an await BatchPlay blah blah blah blah right so let me copy this and paste it into the console hopefully we have no errors or right at this point let me get rid of the layer duplicate another one and at this point I think I can say require Photoshop and then I‚Äôm gonna get the app and then in the app as you know there is something that is the active document and the active layers I already have this here I don‚Äôt need the color and the active layers I want just the first one so the one with index zero and at this point I can call the createLumaMask is this the correct name I already forgot it createLumaMask and hopefully this is going to work yep you see now that it‚Äôs not a function that is independent and lives on its own but it is a function in the prototype of the native layer object this is something that we weren‚Äôt allowed to do with ExtendScript and it is a nice addition of BatchPlay and by the way super cool so you can really extend the DOM with your own function on the one side you can fill the gaps so create in BatchPlay the function that the DOM should have or had in extend script but has not yet in UXP but you can also create your own routines that exploit the possibility of BatchPlay to use this array syntax so let me get rid of that and let me sum up what we have seen today. So the Alchemist plugin works with two different options, we‚Äôve seen only the first one, the listener. In the next video we‚Äôre gonna show the inspector. While you interact with the Photoshop user interface all the events are listed on this column here and you can inspect them either in the content or the code, the difference is that the code is added the parts that allow you to just copy and paste them in your UXP plugins whereas the content is either just the raw descriptor or this tree which is a little bit more pleasing to the eye. Make sure to have the listener set both in the type and the category and also this exclude filter because otherwise if you have none you see that there is a lot of junk that we don‚Äôt really need. You can then copy and paste the code, rework it, wrap it with your own function, or combine multiple events in one single BatchPlay array and even store them and extends the Photoshop API assigning your function to the prototype of some of the native objects in this case you can extend the Photoshop, the Document, the Layer, Actionset and Action. Okay I think this is it for this time, it came out a bit long but there is so much to say about BatchPlay and also the Alchemist plug-in. First thing that you have to do is go to the marketplace, the UXP marketplace, get the Alchemist plugin and make sure that you remember to add a positive rating because: hats off to Jaroslav Bereza for his amazing work. I want to thank all the people that have already contributed with a big or small donation it has really, really been appreciated, thank you! There is a donation button either on my website or in the YouTube video description. I also have the usual products on the marketplace myself too. In the next video we‚Äôre going to complete this BatchPlay mini-series covering more of the Alchemist plugin but for now that‚Äôs it. Thank you for watching, bye.&lt;/p&gt;
</description>
        <pubDate>Mon, 07 Dec 2020 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/development/Adobe-UXP-things-you-need-to-know-7-BatchPlay-part-2-Alchemist-plugin-listener.html</link>
        <guid isPermaLink="true">http://localhost:4000/development/Adobe-UXP-things-you-need-to-know-7-BatchPlay-part-2-Alchemist-plugin-listener.html</guid>
        
        <category>UXP</category>
        
        <category>Alchemist plugin</category>
        
        
        <category>Development</category>
        
      </item>
    
      <item>
        <title>Adobe UXP: Things you need to know! #6 BatchPlay (part 1): the ActionManager roots</title>
        <description>&lt;p&gt;In this episode I approach BatchPlay, the super-powerful Photoshop-only scripting technique that can overcome DOM‚Äôs limits. This is part 1, at least one more video will follow.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/vSVrFPCe7DU&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;If you find this content useful, &lt;em&gt;please consider supporting me&lt;/em&gt; ‚Äì 2020 is a hell of a year. I don‚Äôt have a Patreon page, but I‚Äôve got two fairly cheap plugins on the Photoshop Marketplace, &lt;a href=&quot;https://adobe.com/go/cc_plugins_discover_plugin?pluginId=28db2e07&amp;amp;workflow=share&quot;&gt;ALCE&lt;/a&gt; (Advanced Local Contrast Enhancer) and &lt;a href=&quot;https://adobe.com/go/cc_plugins_discover_plugin?pluginId=78c3cdaf&amp;amp;workflow=share&quot;&gt;Double USM&lt;/a&gt; (on sharpening). If you happen to buy them, please leave a positive rating/review, it would greatly help. Or, you can&lt;/p&gt;

&lt;form action=&quot;https://www.paypal.com/donate&quot; method=&quot;post&quot; target=&quot;_top&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;hosted_button_id&quot; value=&quot;37N4GHTNJK8YE&quot; /&gt;
&lt;input type=&quot;image&quot; src=&quot;https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif&quot; border=&quot;0&quot; name=&quot;submit&quot; title=&quot;PayPal - The safer, easier way to pay online!&quot; alt=&quot;Donate with PayPal button&quot; /&gt;
&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;https://www.paypal.com/en_IT/i/scr/pixel.gif&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;
&lt;/form&gt;

&lt;p&gt;If you cannot, or don‚Äôt want to, that‚Äôs OK anyway.&lt;br /&gt;
Stay safe and thanks! üôèüèª&lt;/p&gt;

&lt;h2 id=&quot;the-whole-series-so-far&quot;&gt;The whole series so far&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know.html&quot;&gt;#01 ‚Äì Rundown on the UXP announcement @ the Adobe MAX 2020&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-2-documentation.html&quot;&gt;#02 - Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-3-UXP-developer-tool.html&quot;&gt;#03 - UXP Developer Tool&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-4-commands-panels-manifest.html&quot;&gt;#04 - Commands vs. Panels and the manifest.json&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-5-async-vs-sync-in-photoshop-dom-scripting.html&quot;&gt;#05 - Sync vs. Async code in Photoshop DOM Scripting&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-6-BatchPlay-part-1-ActionManager-roots.html&quot;&gt;#06 - BatchPlay (part 1): the ActionManager roots&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-7-BatchPlay-part-2-Alchemist-plugin-listener.html&quot;&gt;#07 - BatchPlay (part 2): Alchemist as a UXP Script Listener&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-8-BatchPlay-part-3-Alchemist-plugin-inspector.html&quot;&gt;#08 - BatchPlay (part 3): Alchemist as a UXP Inspector&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;transcription&quot;&gt;Transcription&lt;/h2&gt;

&lt;p&gt;The transcripted video looks weird, but I‚Äôm told it helps to have it anyway because it‚Äôs easier to translate to other languages. Apologies for the lack of punctuation and the sloppy syntax.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Hey I‚Äôm Davide and this is Adobe UXP things you need to know! Today I‚Äôm finally talking about BatchPlay. So BatchPlay is one of the most important subjects of the whole series especially given the state of UXP and the new scripting engine in Photoshop. In this first part, because I think there‚Äôs going to be at least two, I‚Äôm going to cover BatchPlay roots i.e. ActionManager code because they‚Äôre strictly related. In my experience at least things are much easier to deal with and way less scary than at first sight if you understand their inner mechanisms and this is particularly true with ActionManager code. I‚Äôm going to give you a very condensed version of it, there‚Äôs much more to be said and I will point you to a more comprehensive resource later on. As far as all the Adobe apps are concerned scripting is whatever it takes to get and set the app object‚Äôs various properties and nested properties and calling their methods. What is generally dubbed DOM scripting where DOM stands for the document object model i.e the way the props and methods are modelled in the sort of Russian doll fashion, well that DOM scripting is scripting for all the Adobe apps. If you need a prop that is not available via the DOM then it‚Äôs outside the domain of scripting, period. Forget about it. So this is true for every Creative Cloud app that supports scripting except Photoshop, which is special and it has always been special at least since version what was it four or five and by the way not CS4 like just four, so way way back. Photoshop has something called ActionManager that is one of the ugliest unfamiliar ExtendScript code ever but that lets you do things that are outside of the DOM scope. So when we talk about the DOM coverage we actually mean the amount of scope that the Document Object Model encompasses, okay? The things you can do versus the ActionManager superset or the things you can do with scripting. So think about it this way: you have Photoshop, the entire applications and its features, and Photoshop is going to be the super set of things that a user can do, and inside it there is a subset that I‚Äôm going to draw in a different color that is the amount of things that a user can do with scripting. So this is the scripting subset and with other Adobe applications such as InDesign, Illustrator this scripting corresponds to the DOM scripting but in Photoshop this superset corresponds to the ActionManager scripting because this is always going to be a super set of the DOM scripting, which in turn is a smaller subset of that so this is the DOM. So when we talk about DOM coverage in Photoshop we can mean at least two different things: so the difference that exists between the DOM and the outer ActionManager layers so the amount of things that ActionManager can do and the DOM can‚Äôt but also the amount of things that we would like to be able to reach with the DOM in the app itself so this area here these are the props and methods that scripting cannot reach for instance, let me think about it, the values that are in the Info Palette the live reading these are not reachable by scripting, not ActionManager nor the DOM. But usually we compare the DOM against the ActionManager because we tend to think that ActionManager is kind of the ceiling. So how do you get ActionManager code? So there is this thing called ScriptListener plugin that you can find at this page and I think the download is right here you install this by moving the folder into the Photoshop / plugins folder and then upon restarting everything that you do or everything that is recordable by the ScriptListener plugin is logged on the desktop in a file so I happen to have mine with a shortcut here and this is the super ugly code that you can get now. The key point here is that this code strange as it might seem is playable so you can get this and run it in your Photoshop and that‚Äôs going to perform the same things that I did when I recorded that and there is a parallel between recording ActionManager code and recording actions ‚Äì the kind of actions that are in the Action Palette like these ones, and ActionManager has action in its name for a reason so in Photoshop 4 in order to support this new feature so the possibility to record and playback actions the engineering team has built an event system that is triggered every time the user interacts with the Photoshop UI, that is to say every time you select a tool or interact with the layers or whatnot. And what happens is that those interactions will trigger an event, a very specific event; there are not many of them but each one of those events carry a payload in the form of a strange weird complex object called the Descriptor, that takes into account all the information that describes and give meaning to that single event so I happen to have this very code so the output of the ScriptListener plugin in Atom and the reason is that is syntax highlighted and it‚Äôs easier to inspect so let‚Äôs try to have an intuition about this code trying to make sense of it this is the raw output and as you see it‚Äôs kind of scary the very first step towards a proper understanding of it is to install a tool that is able to beautify the kind of code and you can find it it‚Äôs made by this guy Thomas Sinkunas I‚Äôm not sure I can pronounce his name he is from Lithuania and the repository should be at the end of the list and it‚Äôs called Clean SL you download it and you install it by moving the files into the Photoshop / presets / scripts folder and then you can find it in Photoshop in the file scripts menu hits here Clean SL and you have the original output of the ScriptListener on the left and based on the parameters you can set here you can clean the code and end up with something that looks much better. The version that I have here has been processed a little bit more basically name substitution and this is it so let‚Äôs try to make sense of it in a very intuitive way what you have to know that the event that I was talking about earlier is in this executeAction here and each one of these are steps so this is one step this is another step this is a very long third step and these are things that I‚Äôve done in Photoshop before and let‚Äôs try to see if we can make sense of them so as I said this ExecuteAction is what triggers the event so this event was an open event then you have a copy to layer event and if you scroll down this is a curves event and then you have a select and another select and so on and so forth so try not to focus too much on those s2t functions here because I‚Äôm not going to cover here what StringIDs are or TypeIDs let‚Äôs just think in a very intuitive way that we are opening something that has a path because we‚Äôre putting a path somewhere and the path is this one and then we have other stuff that is hard to make sense of don‚Äôt record and force notify what are those? have no idea. And everything is stored inside of this ActionDescriptor object so again you can think about ActionManager as an event which is this open here that is followed by a Descriptor and the Descriptor is a complex object that takes into account all the parameters that the event needs in order to be played back so even if you don‚Äôt understand probably everything here you can assume that I was opening a document called Anita.jpg right and in the next action or the next step there is just one event that is copy to layer which is one of the many ways that ActionManager has to duplicate a layer you have at least two or three at the very least and copy to layer is one so you‚Äôre just duplicating a layer and this corresponds not to a duplicate event as you might assume but a copyToLayer one and it has no Descriptor so you see that the place of Descriptor is undefined you don‚Äôt need any additional information in order to duplicate a layer and the third action is a very very complex one you have one two three four five six ActionDescriptors and in every ActionManager code you have the event as I said that is the one that is passed as the first argument to the ExecuteAction function so the event is ‚Äúcurves‚Äù let‚Äôs put it here event curves and then just one ActionDescriptor so you have one ad but this one ActionDescriptor can contain as many things as Adobe wants or need in this case you have five inner ActionDescriptors so you have something like five ADs here and each one of these ADs contains a variety of other things one ActionDescriptor can contain another ActionDescriptor so you have a kind of Russian doll structure and you don‚Äôt really have to understand why those ActionDescriptors are nested that way because this is outside our reach so we can just observe the way that the ScriptListener code is presented to us i.e we can just note that in order to draw a curve so to create an adjustment of type curve you have to structure the ActionDescriptor in this very way so again without trying to inspect it properly you can do it it‚Äôs not very difficult after all but you see that we have channels and we are probably acting on the composite and we have this ‚Äúpaint‚Äù which is quite strange looks like a typo for a ‚Äúpoint‚Äù and you might not be too far from the truth in this case with horizontal and vertical points so this curve probably has a one two three and four points in the array of points in fact it was a curve like that so an S shaped curve and you have one point here one point there and a couple of points in the middle so zero, zero, two-five-five, two-five-five the end points and the two points in the middle here and then what um a series of different objects that are ActionLists and ActionLists you can think about them as arrays of ActionDescriptor so whatever it is that it‚Äôs needed for this ActionDescriptor in order to create and replay a curves adjustment it‚Äôs a very very complicated one so let‚Äôs scroll down and you see here a select event again in the ExecuteAction which is matched here as well and in this case we are selecting I was selecting a tool um the move tool here and the type creation tool so I was trying to create a text layer and then again a move tool in this case and then the following step is an awfully long one I think it‚Äôs like I don‚Äôt know what 200 lines of code or something you see that that‚Äôs kind of crazy isn‚Äôt it, the beauty of ActionManager code. In this case you have 18 ActionDescriptors so one main ActionDescriptor that contains at least 17 of them nested inside it plus a four ActionList in the ActionReference takes into account what is the target of the entire step this again is awfully long and awfully complicated and there‚Äôs no way that we can understand it uh just you know note that it‚Äôs this way and probably this is setting a lot of options that are, well, optional as the, I don‚Äôt know, the base line shift or the horizontal scale or the fact that the text has or not a strikethrough and so on and so forth but in the end the event is a ‚Äúmake‚Äù event and accepts just one ActionDescriptor and then there‚Äôs a ‚Äúmove‚Äù event here so I‚Äôve offset the layer these values on the horizontal and vertical axis and you see that I‚Äôm somehow acting on a layer because you read layer here again we‚Äôre working with intuition right now so we‚Äôre trying to look at things and figure out what might have happened and we have put that object the one that takes into account these values into an offset and then executing the event according to that ActionDescriptor that contains all the information and finally I‚Äôve closed the file and this is kind of funny so the saving property is an enumeration of class ‚ÄúyesNo‚Äù and I‚Äôve chosen no so I‚Äôve closed without saving so whatever this is it‚Äôs the way that Photoshop internally deals with those actions that I was, as a user, performing and this is pretty valid code so I can run this code and perform the same step so I can open the file and then duplicate the layer and so on and so forth so this is the whole point of having the ScriptListener code and some of those actions are not available through the DOM I doubt that you can create a text layer via the DOM and I also doubt you can create a curve adjustment probably the curve has been introduced in the last years might be wrong though anyways this is the ExtendScript code ActionManager now enters BatchPlay this is the equivalent of the code that you‚Äôve just seen so let me put that on the side so on the right you have the BatchPlay on the left you have the ExtendScript so first thing to notice is the syntax you are using the BatchPlay function of the Action property of the Photoshop object so you have to require Photoshop and then Action and then BatchPlay and you see the BatchPlay takes an Array as an argument so the Array is this guy here right so this part is the argument of the BatchPlay function and also an object so let‚Äôs have a look at the documentation page for the BatchPlay that you can find I guess here so in the doc mini-site in the Photoshop API you go to advanced and BatchPlay so you see that you require Photoshop and then through the Action you have access to the BatchPlay function that accepts a Descriptor as an array of Descriptors and options I‚Äôll go into that in detail in the following videos but for the time being let‚Äôs just focus on the different syntax so you see that for instance in this case of the layer duplication I have just one event copyToLayer and this copied layer is matched in this object here we have the same copied layer and if you don‚Äôt take into account the options that is don‚Äôt display which is exactly this dialog modes no the equivalent of the dialogue mode no and this synchronous execution set to true in the options object you see that they are quite similar the syntax is different it‚Äôs JSON-like but the structure is the same again let‚Äôs try to compare the curves which was quite scary with all those ActionDescriptors now the ActionDescriptors are substituted by objects so you had for instance here an ActionDescriptor with the channel and now you have an object with the channel with a reference here an enumeration here so here you have them both and a value of composite so this is the composite right and the curves which is this guy here was another Descriptor that contains an ActionList so sort of an array of ActionDescriptors and it‚Äôs exactly what you have here right so an array of ActionDescriptors i.e. objects where you have this paint which I guess was points but probably the two StringIDs point to the same TypeID if you know what I mean it‚Äôs okay if you don‚Äôt don‚Äôt worry and the points right way more readable this way and again if you discard the dialog options and the options object it‚Äôs much more compact and readable not much luck with the type object I think because this one is quite long as well because there are a lot of properties to set but you get the gist of it. So the takeaway for this first part is that BatchPlay is a new syntax and very important couple of new features on top of the ActionManager structure so the more you know about ActionManager the more you already know about ActionManager the easier will be the transition to BatchPlay and if you don‚Äôt know that much about ActionManager I‚Äôm afraid there aren‚Äôt that many sources except for the Photoshop Scripting book this guy here where I have 70 pages on ActionManager alone and I doubt you can find that much content anywhere else so ActionManager is the way that Photoshop has to take into account the user interaction with Photoshop so that that interaction can be stored into proper actions or scripting code to be played back in a later time and what you have to do as a scripter is to take note of the way that Photoshop stores that data in order to be able to write your own both to set parameters and run actions i.e tasks and also being able to extract data from Photoshop because one thing that I have not mentioned is that ActionManager sits in Photoshop and is there for you to access it so you can get properties that otherwise are impossible to get via DOM so layer‚Äôs properties, app‚Äôs properties and so on and so forth. BatchPlay is ActionManager: it‚Äôs an evolution of the ActionManager that we had in ExtendScript with notable new features for instance the possibility to run multiple events and their Descriptors as an Array which is way faster and we will see that in the next video. It has a brand new syntax based on JSON and it‚Äôs way more friendly the very last thing that I want to leave you with is a plugin for Photoshop called Alchemist that you can find either on GitHub at this page it‚Äôs made by Jaroslav Bereza one of the most talented guys in the Photoshop scripting community and a guy with a very strong sense of humour by the way or also in the Photoshop marketplace so let me try to find it right here so go get it there are differences between the plugin that you can find in the marketplace and the ones you can find on GitHub for development purposes I would suggest you to get the GitHub one but get this one as well and give five stars and a positive review because he greatly deserves that. I‚Äôll cover Alchemist in depth in the next video, play with it in the meantime. I think this is all for this video if you‚Äôve learned something new please consider supporting me, there is a donation button either on my website or in the youtube video description; also I have products in the marketplace. Thank you for watching and see you in the next one. Bye!&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Dec 2020 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/development/Adobe-UXP-things-you-need-to-know-6-BatchPlay-part-1-ActionManager-roots.html</link>
        <guid isPermaLink="true">http://localhost:4000/development/Adobe-UXP-things-you-need-to-know-6-BatchPlay-part-1-ActionManager-roots.html</guid>
        
        <category>UXP</category>
        
        
        <category>Development</category>
        
      </item>
    
      <item>
        <title>Adobe UXP: Things you need to know! #5 Sync vs. Async code in Photoshop DOM Scripting</title>
        <description>&lt;p&gt;In this episode I‚Äôm discussing asynchronous code in the Photoshop DOM and how the new JavaScript Scripting engine differs from ExtendScript.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/sf7YPWUppSM&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;If you find this content useful, &lt;em&gt;please consider supporting me&lt;/em&gt; ‚Äì 2020 is a hell of a year. I don‚Äôt have a Patreon page, but I‚Äôve got two fairly cheap plugins on the Photoshop Marketplace, &lt;a href=&quot;https://adobe.com/go/cc_plugins_discover_plugin?pluginId=28db2e07&amp;amp;workflow=share&quot;&gt;ALCE&lt;/a&gt; (Advanced Local Contrast Enhancer) and &lt;a href=&quot;https://adobe.com/go/cc_plugins_discover_plugin?pluginId=78c3cdaf&amp;amp;workflow=share&quot;&gt;Double USM&lt;/a&gt; (on sharpening). If you happen to buy them, please leave a positive rating/review, it would greatly help. Or, you can&lt;/p&gt;

&lt;form action=&quot;https://www.paypal.com/donate&quot; method=&quot;post&quot; target=&quot;_top&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;hosted_button_id&quot; value=&quot;37N4GHTNJK8YE&quot; /&gt;
&lt;input type=&quot;image&quot; src=&quot;https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif&quot; border=&quot;0&quot; name=&quot;submit&quot; title=&quot;PayPal - The safer, easier way to pay online!&quot; alt=&quot;Donate with PayPal button&quot; /&gt;
&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;https://www.paypal.com/en_IT/i/scr/pixel.gif&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;
&lt;/form&gt;

&lt;p&gt;If you cannot, or don‚Äôt want to, that‚Äôs OK anyway.&lt;br /&gt;
Stay safe and thanks! üôèüèª&lt;/p&gt;

&lt;h2 id=&quot;the-whole-series-so-far&quot;&gt;The whole series so far&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know.html&quot;&gt;#01 ‚Äì Rundown on the UXP announcement @ the Adobe MAX 2020&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-2-documentation.html&quot;&gt;#02 - Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-3-UXP-developer-tool.html&quot;&gt;#03 - UXP Developer Tool&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-4-commands-panels-manifest.html&quot;&gt;#04 - Commands vs. Panels and the manifest.json&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-5-async-vs-sync-in-photoshop-dom-scripting.html&quot;&gt;#05 - Sync vs. Async code in Photoshop DOM Scripting&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-6-BatchPlay-part-1-ActionManager-roots.html&quot;&gt;#06 - BatchPlay (part 1): the ActionManager roots&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-7-BatchPlay-part-2-Alchemist-plugin-listener.html&quot;&gt;#07 - BatchPlay (part 2): Alchemist as a UXP Script Listener&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-8-BatchPlay-part-3-Alchemist-plugin-inspector.html&quot;&gt;#08 - BatchPlay (part 3): Alchemist as a UXP Inspector&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;transcription&quot;&gt;Transcription&lt;/h2&gt;

&lt;p&gt;The transcripted video looks weird, but I‚Äôm told it helps to have it anyway because it‚Äôs easier to translate to other languages. Apologies for the lack of punctuation and the sloppy syntax.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Hey I‚Äôm Davide and this is Adobe UXP things you need to know today I‚Äôm talking about asynchronous code in Photoshop UXP scripting. Let‚Äôs say that you have some old ExtendScript code that you want to port to UXP, something very very simple like duplicating the layer and then renaming it. In ExtendScript you would do something like app.activeDocument and then activeLayer just to keep it super simple then you want to duplicate that right and probably store that into a variable var dup is equal to this so that you can reference it, dot name and then assign that to a different string like I don‚Äôt know UXP. OK so this is what you would do in ExtendScript, let‚Äôs see how this works in UXP code: it‚Äôs going to be just a little bit different but this involves the understanding of asynchronous versus synchronous code so let‚Äôs get to it. Let me create a new UXP plugin so let‚Äôs switch to the UXP Developer Tool I want to create a plugin let‚Äôs call this test the id is whatever plugin version 1.0.0 host application Photoshop am I repeating this just for you to become more and more familiar with the process 22.0.0 and again if you don‚Äôt remember that there is a video that you can check out, and the template is the easiest one the ps-starter I want to put that into the samples and let me create a folder that I‚Äôm going to call test okay so selecting that. Plugin being created I need to do three things: I have to load it, and I have to watch it, and I also want to debug it, okay so now the UXP DevTool can go away .I want to keep this on the top right corner I need to add this test folder in Atom just keep this on the left the plugin is here let me stick it to the side as well and also I have to create a dummy document in Photoshop for the sake of experimentation with a new layer that‚Äôs okay and I want to add something in it like just a circle with a nice color and let‚Äôs center this. This is a little bit of a trick if you have to center something you select all: Command+A and then with the move tool you can align it based on the entire document. OK so that‚Äôs it let me also clean everything in the index.html I don‚Äôt need no style, so this goes away, the body also everything away, I just need a button so let‚Äôs add a spectrum web component sp-button and this is going to say ‚Äúrun‚Äù and have an id of ‚Äútest‚Äù so that let me save this. This is something related to the JavaScript file which I‚Äôm going to delete anyway so at this point I have to reference that button via id so document.getElementById the id was test I think so at this point I have to add an event listener so add event listener for the click event and when this clicks I want to have a callback function that for the time being just console.log something just to see if this works. console.log run okay so let me save this, click run and check the console. It says run, the error was pre-existing so let me get rid of that again: run run run run run. Okay cool so this is the starting point. Now let me copy the ExtendScript code as a reference the index.html we don‚Äôt need anymore let me stick it on the top here as a comment, all right, so we don‚Äôt have in UXP any app already available in the global space so we need to get that via require Photoshop so const I want app and this is going to be require Photoshop and then the app. Okay so this is one thing I suppose that I‚Äôm gonna have an active document in UXP as well but let‚Äôs check this out in the console. So app should be available here already app? is it? no app is not defined let me save this let me try again. Yes now I have it app dot does it have anything like an active document? it does, so here, this is the document you have all the information also the layers you see? All right so: the active document. Does the active document have a activeLayer property? Let‚Äôs check activeLayers plural so this is a different way that UXP goes about active layers compared to ExtendScript. In ExtendScript you had activeLayer singular you now have activeLayers plural and it is an array even if you have just one of it. It makes sense to have an array because you can have more than one layer selected with shift click in the layers palette but anyways. You can have this active layers and if you want just the first one in this case it‚Äôs just one so that‚Äôs not a big of a deal you select the one with index zero right? So this is the layer let‚Äôs check that the name is the right one so it‚Äôs layer one okay and now we can set the name for instance of it, name to a different string UXP is fine so let‚Äôs check if this works. It does, it has renamed the layer and probably that layer also has a duplicate function. So here it is we‚Äôre not reading the documentation we‚Äôre just experimenting in the console which is more fun so duplicate this duplicates the layers so everything seems to be okay. So we now have all the elements to write our code don‚Äôt we? app is here now let me have a constant also for the active document so let‚Äôs call this doc is equal to app.activeDocument and I also want to have the active layer so const lay is equal to doc.activeLayers plural and then just the first one and let me just console.log it here to see if everything works. Click run and here is the layer okay. Let‚Äôs do this duplication and renaming business. Let‚Äôs get rid of the console log I don‚Äôt need it anymore let‚Äôs write let dup is equal to lay.duplicate all right and now I can rename dup and dup.name is equal to DUP! All right? so let me get rid of that layer here we don‚Äôt need it let‚Äôs save and this goes on the corner I don‚Äôt need the documents tree also let me clear the console. Are we ready? Three, two, one run! And something has happened but not really what we expected right? So this has been duplicated but has not been renamed and you might wonder why. So let‚Äôs check in the sources and let‚Äôs stick a breaking point right here and try again so run, this has been paused on that break point we can just go through that clicking that button and you see that the layer has been, in fact, duplicated but this dup is now something called a ‚Äúpromise‚Äù should be a layer shouldn‚Äôt it? And now if we step over one more time we see that nothing really happens not even an error. So this is a little bit puzzling let me get rid of the break point and let me try to explain what is this all about. Now in UXP as opposed to ExtendScript there are functions that run in an asynchronous fashion that is to say that it takes some time to do some operations such as duplicating a layer because Photoshop has to take care of all the pixels and store them in memory and whatnot this might take a significant amount of time. So instead of waiting for that process to complete the JavaScript engine just goes on immediately to the next line: so it‚Äôs duplicating this and performing that duplication but the JavaScript engine just switches to the next line this dup.name and tries to run it. So it fails because since dup is not really a layer yet is not possible to rename it, okay? so the question is now what is dup? dup is a promise and a promise is a proxy for the value that dup is eventually going to be assigned. And only then when the promise is resolved dup can be renamed let me try to address this synchronous versus asynchronous thing in a more visual way. Think about synchronous code so ExtendScript so this is sync as a series of functions that happen one after the other you have the first function that is here and then the second one that happens only when the first one is completed that goes right on and then you have the third one that goes on just just when the second one is completed so it‚Äôs one two and three. They run in a synchronous fashion. Instead in a synchronous code so a sync what happens is that you have the first function that is here and this is the first one that starts to run but immediately not waiting for it to be completed the JavaScript engine goes on with the second one it just takes few milliseconds here just to run the first one before starting the second one; and then after immediately after you have the third one which is here okay so you have again a few milliseconds between the second and the third one and this is the third okay? So even if the starting order is one two three the finished line is not necessarily one two three, it really depends on how long it takes to perform the first the second and the third operation. So for instance if the first one is really intensive can take more time and then the second one might be shorter and the third one something I don‚Äôt know in the middle like that so the finishing line in this case might be something like two three one why not? And getting back to our duplicate example you might think that the duplication is started and it has still to complete and you are already trying to rename it so this happens not on the actual layer but in something that is just a proxy for that layer, hence it fails. Okay I hope this makes sense. So the next question is how we deal with asynchronous functions: there are at least a couple of different ways. First one is with then functions so every function that is asynchronous that returns a promise is then-able so you can write something like then which is a function and this then accepts in turn a callback function that I‚Äôm going to write with the fat arrow syntax and the argument of that function is the returned value of the resolved promise so in other words: you have this duplicate here and at some point this duplication happens and then a layer is returned. The proper way to say it is that when the promise is ‚Äúresolved‚Äù then you have the ‚Äúreturned value‚Äù okay? So that return value which is a layer by the way is passed to this callback here okay so at this point you can write something lay here or let‚Äôs say layer and then you can rename it right, so layer dot name is equal to dup here okay so this line goes inside of the callback function. So let me save this and let‚Äôs check that we don‚Äôt have any pause debugger or something also let me get rid of those layers here run and here it goes so dup is here you see that it has duplicated the layer and renamed it right? The problem with then-able functions is that you might think that this dup now is a layer you have been assigning that to this duplication and then then function but the problem is that then returns a promise so even if you add return layer here. Let‚Äôs try to console.log the dup: so dup here and there, so let me save this and switch back to the console now let me try to run you say that dup is a promise, which by the way is also pending. Even if you try to assign to dup the layer inside the callback that is not really going to work so let‚Äôs say let‚Äôs dup is equal to a null for the moment and then you go with lay duplicate and instead of returning layer which is not useful now you say dup is equal to layer okay so let‚Äôs see if this works let‚Äôs save that and run you see that dup is still null so it‚Äôs kind of hard to work with that if you need to reference the resolve value of a function unless you keep then-ing functions which is by the way possible if you return them so if you return the layer you can now then again and do whatever you want in here with that layer so l and then I don‚Äôt know if you need to perform some further steps you can inside the then callback. Another way that in my opinion is way simpler is to use async and a await these two keywords are going to transform the code into synchronous code. okay let‚Äôs try them I want to say let dup is equal to await for lay duplicate all right and this await here means let‚Äôs wait for the duplication to be completed so for the promise to be resolved and then assign to dup the result. So if we try this let‚Äôs save first you see that there is an uncaught syntax error await is only valid in any sync function so we need to specify, to explicitly tell to the JavaScript engine that the function that contains this await is asynchronous so we need to add the async keyword to the function. And can you spot the function here? it is this anonymous function here, so in there you‚Äôre going to write async okay so let‚Äôs save again let‚Äôs get rid of that message and run and you see that now the dup is finally a layer. You have a lot of copies here so let me get rid of everything and try again: run, nothing happens‚Ä¶ let me save once more. Run and you see it here we still have to rename that so at this point I‚Äôm pretty sure you can write something like dup dot name is equal to UXP well not UXP, DUP okay so let‚Äôs try this save and run and in fact you have dup here okay? So this appears to work remember that you have to use
await only in the context of an async function now let me try something a little bit different say that you don‚Äôt want to duplicate the layer just once but a number of times so you want to use something like a for loop so for let i equal not 0 but let‚Äôs say 1, i less than 5 and i plus plus; standard for loop and in here you want to do this dup await the duplicate right so let‚Äôs save this delete a bunch of layers that we don‚Äôt need and click run again there is a breakpoint going on here I don‚Äôt want it let‚Äôs play everything and also let‚Äôs get rid of that which is going to be better okay so let‚Äôs save again click run and you have all the copies here. I don‚Äôt want to have just dups so let me interpolate this with the backticks so I want to have dup and then underscore with the index right i. Okay so let‚Äôs save get rid of the duplicate run it again. I don‚Äôt know why I need to save these a couple of times‚Ä¶ run and now you have it so dup 1 dup 2 dup 3 and dup 4. So let me rewind that to show you what exactly happens which is what you expect so a duplication and the rename step. So I duplicate rename duplicate rename duplicate rename and duplicate rename okay? Cool. So let me get rid of that so let‚Äôs say that you don‚Äôt want to have a for loop but you are a fan of functional JavaScript you want to use something like map on an array of numbers which you can do by the way one two three four you can map and map takes a callback that is executed on all those elements so you have the element here and then you can just say this let dup equal to await duplicate and dup name is equal to this the only thing different is that instead of I you have the element el okay so let‚Äôs save couple of times I have an error here: await is only valid in the sync functions and again this is something that I wish I had one Euro for all the times that I got that wrong you have to put async here right so let‚Äôs save again and let‚Äôs get rid of the for loop that we don‚Äôt need anymore so I‚Äôm going to also clean the console and click run once more and apparently everything works fine dup one two three and four but let me rewind with command-z the history and see what has in fact happened. So if we play it slowly we have a duplication and a duplication and a duplication and a duplication and then a rename rename rename rename which is not really what we want do we we want a duplication and a rename. So duo plus rename a number of times instead of dup dup dup dup and rename rename rename rename. So in this case it makes really no difference but it might be that with more complex routines this kind of behavior conflicts with what you really want to perform and you got some errors that you‚Äôre not able to debug because apparently everything works fine. So the caveat here is that map and I think also forEach all those functions that run on arrays with async and await: mmmh, probably going to lead to problems so try to use for loops as much as you can in these cases. Okay, so to recap everything that we have covered so far: you have to be aware that as, opposed to ExtendScript, in UXP you have a number of functions that return promises so either you use then callbacks or you use await and async. And if you ask me what are those functions well you can find them in the documentation in the Photoshop API section you can pick modules for instance and then I don‚Äôt know what document here it is you have active layers and you see that it returns a layer Array here so this is not a promise and all those are getters and getters usually are synchronous. In this case for instance the close method returns a promise let‚Äôs check the layers so get bounce returns bounds so no promises but probably in the methods for instance nudge I think returns a promise? yes here so you‚Äôre free to check all the methods that you need in all the Photoshop API modules and check whether you need to use async await you see async here so whenever you see async you know that you have to await for stuff. Okay I think this is it for this time I hope you have learned something new if this is the case please consider supporting this channel and me which is always really appreciated. I want to thank all the people who already had contributed there is a donation link in the youtube description of this video and on my website I also have ALCE and DoubleUSM in the Photoshop marketplace; if you happen to buy them a positive rating or review are always helpful. Thank you very much and see you in the next one. Bye!&lt;/p&gt;
</description>
        <pubDate>Mon, 23 Nov 2020 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/development/Adobe-UXP-things-you-need-to-know-5-async-vs-sync-in-photoshop-dom-scripting.html</link>
        <guid isPermaLink="true">http://localhost:4000/development/Adobe-UXP-things-you-need-to-know-5-async-vs-sync-in-photoshop-dom-scripting.html</guid>
        
        <category>UXP</category>
        
        
        <category>Development</category>
        
      </item>
    
      <item>
        <title>Adobe UXP: Things you need to know! #4 Commands, Panels and the manifest.json</title>
        <description>&lt;p&gt;In this episode I‚Äôm discussing Panels vs. Commands in Vanilla JS UXP plugins and the way they are expressed in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manifest.json&lt;/code&gt;&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/LkWfEC7bqdE&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;If you find this content useful, &lt;em&gt;please consider supporting me&lt;/em&gt; ‚Äì 2020 is a hell of a year. I don‚Äôt have a Patreon page, but I‚Äôve got two fairly cheap plugins on the Photoshop Marketplace, &lt;a href=&quot;https://adobe.com/go/cc_plugins_discover_plugin?pluginId=28db2e07&amp;amp;workflow=share&quot;&gt;ALCE&lt;/a&gt; (Advanced Local Contrast Enhancer) and &lt;a href=&quot;https://adobe.com/go/cc_plugins_discover_plugin?pluginId=78c3cdaf&amp;amp;workflow=share&quot;&gt;Double USM&lt;/a&gt; (on sharpening). If you happen to buy them, please leave a positive rating/review, it would greatly help. Or, you can&lt;/p&gt;

&lt;form action=&quot;https://www.paypal.com/donate&quot; method=&quot;post&quot; target=&quot;_top&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;hosted_button_id&quot; value=&quot;37N4GHTNJK8YE&quot; /&gt;
&lt;input type=&quot;image&quot; src=&quot;https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif&quot; border=&quot;0&quot; name=&quot;submit&quot; title=&quot;PayPal - The safer, easier way to pay online!&quot; alt=&quot;Donate with PayPal button&quot; /&gt;
&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;https://www.paypal.com/en_IT/i/scr/pixel.gif&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;
&lt;/form&gt;

&lt;p&gt;If you cannot, or don‚Äôt want to, that‚Äôs OK anyway.&lt;br /&gt;
Stay safe and thanks! üôèüèª&lt;/p&gt;

&lt;h2 id=&quot;the-whole-series-so-far&quot;&gt;The whole series so far&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know.html&quot;&gt;#01 ‚Äì Rundown on the UXP announcement @ the Adobe MAX 2020&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-2-documentation.html&quot;&gt;#02 - Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-3-UXP-developer-tool.html&quot;&gt;#03 - UXP Developer Tool&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-4-commands-panels-manifest.html&quot;&gt;#04 - Commands vs. Panels and the manifest.json&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-5-async-vs-sync-in-photoshop-dom-scripting.html&quot;&gt;#05 - Sync vs. Async code in Photoshop DOM Scripting&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-6-BatchPlay-part-1-ActionManager-roots.html&quot;&gt;#06 - BatchPlay (part 1): the ActionManager roots&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-7-BatchPlay-part-2-Alchemist-plugin-listener.html&quot;&gt;#07 - BatchPlay (part 2): Alchemist as a UXP Script Listener&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-8-BatchPlay-part-3-Alchemist-plugin-inspector.html&quot;&gt;#08 - BatchPlay (part 3): Alchemist as a UXP Inspector&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;transcription&quot;&gt;Transcription&lt;/h2&gt;

&lt;p&gt;The transcripted video looks weird, but I‚Äôm told it helps to have it anyway because it‚Äôs easier to translate to other languages. Apologies for the lack of punctuation and the sloppy syntax.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Hey I‚Äôm Davide and this is Adobe UXP things you need to know! Today I‚Äôm talking about Panels versus Commands in vanilla JavaScript plugins and the way they are expressed in the manifest.json. Plus some other stuff, but this is the main plan so let‚Äôs get to it. I need some plug-in samples to work on so head to this GitHub repo and grab them all. The ones that I‚Äôm interested into this time are the direct-action-js-sample the hello-world-panel-js-sample and the ui-kitchen-sink sample so let me load in Photoshop as well this first one here so back to the UXP DevTool and if you are unsure how to operate with the UXP DevTool please refer to my previous video let‚Äôs add this one first so let‚Äôs point to the manifest.json which is here and open this loads it not in Photoshop but in the ui of the UXP DevTool and then with this load command we should find it in Photoshop unless we don‚Äôt and the reason why we don‚Äôt see anything is because this plugin isn‚Äôt made of panels if you remember something that I told you I think in the very first video is that UXP plugins could be made of zero or more panels zero or more commands zero or more modal dialogues and this one has no graphic user interface has no panel it‚Äôs just one command in fact you can find it here in the plugins sample write layer names and this is the commands or also in the plugins panel and here you find it right so let‚Äôs see what this is all about so let me try to run it first to see that it is operational please open at least one document let me create quickly one then duplicate the background layer a bunch of times click write layer names to a file and this pops up this dialog that asks me to save this layer names txt let‚Äôs pick UXP and then samples this is a good place I think it‚Äôs done so let‚Äôs check in the Finder we should have it UXP samples and here it is layernames.txt and here are the layer names that I have in my document. So cool this works.
Now I‚Äôm not really interested into the mechanics of the plugin but in the way that it is structured to contain a single command or more commands as we will see because you have to know, and this is
a very important take away, that in UXP there is no concept of an independent script. At least so far. So the things that you were used to find for instance in the file &amp;gt; scripts &amp;gt; browse‚Ä¶ menu so loading and running a JSX file, a single independent script this is not any more a thing in UXP again at least so far so things might change in the future but right now scripts can live only within the context of a UXP plugin which is exactly what this sample write layer names plugin does: it contains one command aka one script so let‚Äôs look at the code for it and the one thing that I want to show you first is the manifest.json so let me collapse everything and here you have the id which in this case follows the reverse url convention so it‚Äôs com.adobe. and then the name of the panel instead of the alphanumeric string that you are given by the UXP marketplace actually by the developer console when you want to create a new product for the UXP marketplace you could add here everything even mamma mia that‚Äôs going to work just fine then you have the name which is the string here the version 1.0.0 and the entry point which in this case is a JavaScript file and this makes sense because this plugin doesn‚Äôt have a graphic user interface so you don‚Äôt have the need for an html file. Usually plugins with panels have an entry point of an html index.html in this case it makes sense to have a JavaScript file. In case of React it makes no difference you can have either the JS or the html in case of the JS it‚Äôs React that is injecting the html elements in the DOM via JavaScript right so then the host array we have Photoshop minimum version 22.0.0 and the manifest version must be at least four now let me skate over the entry points for the moment and let‚Äôs focus on the icons so this is an array but it contains only one object because this icon that we are specifying here with this path applies to all the themes the darkest dark the lightest and the light medium I am positive is just an Adobe XD thing so you can remove it and all is a bit redundant here if you want to have an icon for the dark theme set and another for the light theme sets you just have to duplicate this entire object and of course pick the right icon and then set the themes for which it applies very important the species here: is pluginList and this pluginList means the icon for Photoshop‚Äôs own plugins panel which is different in case of a panel that has its own icon but we will see that when we deal with panels in the next example so these are the icons and please note that even if we specify this plugin-icon.png we don‚Äôt have it in the icons folder we have plugin-icon@1x and plugin-icon@2x this is because we have a couple of scales the default one and the one for retina displays and we specify explicitly the size for the retina one here so the 2x is 48 x 48 and the 1x is 24 x 24 and we add the 48 here okay so these are the icons let‚Äôs now focus on the entry points this is an array because you can have more than one we have just one command here which is this one write layer names to a file so one object the type is command instead of panel and you have an id of writelayers and this is really important so remember that and then a label: label is of course what is written here write layer names to a file and it has default property because you can localize this so for instance if you want to add an Italian version you say ‚Äúit‚Äù and then you add here the translation okay but you must provide the defaults let me get rid of that and be aware that trailing commas are evil in manifests so they‚Äôre going to break everything if you leave them around so let‚Äôs save back the file as it was all right so the id I said is really important so let me close those icons and let me open the index.js let‚Äôs start from the very beginning so you are requiring UXP and UXP is provided by the environment and if you are unfamiliar with this kind of syntax which is modern JavaScript let‚Äôs say that this is equal to const UXP is equal to require UXP so you‚Äôre saying listen: require UXP returns an object and this object has an entrypoints property so you could say UXP dot entry point and that would be perfectly fine you could even say listen let‚Äôs stick that into another constant so const entrypoints let me grab this here equal UXP dot entrypoints right with this modern syntax you are saying I know I understand that you‚Äôre returning me an object with an entrypoints property and I‚Äôm only interested into that so please stick it into an entrypoints constant okay right so the entrypoints has a setup method and the setup method accepts an object which is this one this object has a commands property which is in turn another object and in here you can have all the commands that your UXP plug-in is going to host right in this case it‚Äôs only one because we have only one so this command here and this property here must match absolutely with the id that you set in the manifest json so think about it this way the manifest.json tells Photoshop how to construct the UXP plug-in so what are the elements you have one UXP plugin named this way that contains for instance one command with this name but it‚Äôs the index.js that links that menu item with the function that you‚Äôre going to run so this write layers commands is going to run this write layers function which is defined below so let me collapse all those because we‚Äôre not really interested in what they are doing but the way they are connected to the manifest again if you are unfamiliar with the syntax well this is just an anonymous function you could write it like a function and then instead of the fat arrow you add parenthesis here okay so it‚Äôs an anonymous function that runs a write layers this is exactly the same actually there is no need to wrap it with an anonymous function because you run just this so you could just say you write layers write layers without the parenthesis okay actually even better if this was a lowercase L so let me quickly rename this this way there is no need to duplicate the writing you could just say write layers stop right and this works so let me save this just to show you that it works this is being loaded I want to watch it it‚Äôs watching for changes I‚Äôm saving so this should be it and you see that it pops up the dialog as it is supposed to do so this is a perfectly viable syntax but let‚Äôs get back to the original one all right so what does it say here if we had other menu items it would go here and then the manifest.json file so let‚Äôs try to do that
let‚Äôs add another command so let me duplicate the entire object because we are developers we love to copy and paste and instead of write layers this is going to be write I don‚Äôt know what documents okay and the label is write document names to a file like that so in this case we need to add another command so comma and write documents and another anonymous function that well let me do something different since we have a show alert here which is just a wrapper for the Photoshop app show alert function let me alert something like I don‚Äôt know what writing docs okay so at this point we have this command that matches this id, does it? It does, so let me save everything. I know for a fact that watching for changes at least right now doesn‚Äôt take into account manifest changes so if you see here you find just one item in the plugins menu as well so you need to explicitly load it again plug in loaded successfully and now you have both of them and let‚Äôs click write document names to a file and an alert should pop up and sure enough it does so it works so you have seen how to add another commands how to create plugins with a command just in case again you‚Äôre not really familiar with this new syntax let me tell you how to compartmentalize ‚Äì is that a word? ‚Äì how to split the code into a different file so we have all these functions here that you might want to have in another separate file so let me create one and I‚Äôm calling this I don‚Äôt know what lib.js and let me paste everything in here it‚Äôs not too big of a deal I mean there are just three functions but functions grow here we need the right layers and the show alerts so we need to export those in the lib.js so let me module dot exports&lt;/p&gt;

&lt;p&gt;and then I want the write layers to disk which is equal to write layer to disk and then duplicate this and then do the same with show alert which is here let me save this and in the index.js I need to do something quite close to that so instead of entrypoints and requiring UXP we are requiring the lib that sits in the same folder as this index.js and we are interested in the show alert and in the write layers&lt;/p&gt;

&lt;p&gt;with a capital L so this should work fine we are watching for changes and if I click this the alert pops up and if I click the other it doesn‚Äôt so something is missing let me try to understand what write layers&lt;/p&gt;

&lt;p&gt;oh write layers to disk I took the wrong one so write layers is the one that I need to export and it has a lowercase L so let me save this and rename that as well and I think that should be it so write layer names to a file still doesn‚Äôt work okay let‚Äôs take a chance and debug that so debug type error write layers is not defined with a capital l so probably again I‚Äôm messing with the yeah messing with the with the names oh because I renamed that oh my bad to show you that you could just remove the second part of the assignment in the object that was a capital L write layers with a capital L and again capital L here and here save capital L save again and this time I bet that is going to run please yes it does so it was little error on my side apologies for the time spent all right so that was it for the commands plugin let‚Äôs see what is in a panels plugin so the hello-world-panel-js-sample I want to add the plugin which is this panel-js-sample here so let me point to the manifest json and also load it in Photoshop loaded it successfully and this time it has a UI so it‚Äôs just a panel and you see it here sample hello world panel right you can close it and open it this way or from the plugin menu hello world sample what can we do we can show alerts uh we can populate the layers very much like the other one but this time in the panel itself we saw that code in a previous video and we can also clear the list so let‚Äôs see what‚Äôs different in terms of manifest and the JavaScript code so same things as long as the id name version are involved the main entry point is different though we have an index.html again because this is a panel and it makes sense to have an html the host is the same manifest version as well the icons are the same yes exactly the same the difference is in the entry points for once we have a type of panel this time an id of hello world the id is really important we will see why in a moment then we have a bunch of sizes minimum size maximum size that are exactly what you are expecting them to be and also a preferred docked size so when the panel is docked like this this is a preferred size and the preferred floating size so when it is floating freely all right then you have the label again with the default hellworld sample and the icon so this is different compared to those icons so the icons that are outside of everything are the icons for the plugins panel whereas the icons that are inside the entry point in this case are the panels icons so these icons here you see that this is pretty much different compared to that another difference for the icon is as follows so you still have the theme and in this case you see that you have two different objects in the icons array one for the darkest and dark and another for the lightest and light but also you specify the width and the height of the default scale not the retina scale so on the one hand these are different so it‚Äôs 23 times 23 and 46 times 46 instead of the plugins icons that are 24 and 48 so few pixels of difference but here you set the standard slash&lt;/p&gt;

&lt;p&gt;default size whereas in the plugins panel you set the retina size right so this is a little bit of a difference that you have to be aware of when writing your manifest otherwise you‚Äôre going to run into unwanted behaviours so let‚Äôs have a look at the JavaScript side so this is the manifest we expect to see something similar to this entry point setup thing here and we don‚Äôt because apparently you can get away with not having an entry point set up if it‚Äôs not strictly needed so here you don‚Äôt have it but the panel works fine just the same I don‚Äôt know if they are going to require that in the future but so far that‚Äôs a possibility but let‚Äôs look at the kitchen sink for comparison so in this case the kitchen sink let me reload that once more we saw that in a couple of previous videos ui-kitchen-sink it‚Äôs here manifest.json open and then also load it into Photoshop here it is let me close that white background that annoys me all right the kitchen sink is a particular panel in the sense that it contains both a panel which is this one and a command so both of them and you can see them better probably in the menu item the kitchen sink is the plugin and the reload plugin which in this case just reloads the plugin is a command so it contains both of the different types so you have two entry points one object here for the type command id reload plugin and another one for the type panel with id kitchensink and in the JavaScript you have this entrypoints and you should see them somewhere below let me try to find them entry points here you have the entry points setup function that has both the commands and the panels and this kitchen sink here is exactly the same id that is defined in the manifest so again think about the manifest as what to display in the Photoshop ui versus the JavaScript how to link this to actual functions and one that you see here in the panels is the show function that takes a funny argument but we won‚Äôt go into that in this video maybe in a later one so what happens in this show is code that is run the first time that the panels show in this case they‚Äôre using local storage so let me briefly explain it to you when you switch from tab to tab the active tab is saved in the local storage so that in the next session when you open the panel it opens showing the same exact tab that you left off with okay so this is one possibility let me try to implement the same kind of functionality in this hello-world-panel-js-sample so we need to import again the same let me copy and paste because I‚Äôm lazy the same entry point thing so here above we want to have the entry points and then we need to run the setup function in the entry point so entry points dot setup and this accepts an object that has a panels&lt;/p&gt;

&lt;p&gt;property that in turn contains an object again that has this time the id the id of the panel and again be aware that we‚Äôre not talking about the idea of the plugin but the id of the panel which is hello world okay so this here and this one is going to have an object and in here we have a show function and in this show function what do I want to do I don‚Äôt know just maybe show an alert and show alert again is just a wrapper for the require Photoshop app show alert so show alerts and I don‚Äôt know showing like that okay so let me save am I watching this plugin I doubt in fact I‚Äôm not watching let me watch for changes and let me save again just to trigger the watch and it says showing now very important thing don‚Äôt think that this function shows every time that the panel is closed and reopened because it won‚Äôt let me close the kitchen sink the hello world sample is here you see it doesn‚Äôt and the reason why is that this shows only the first time because UXP panels are persistent by default if you have experience with CEP panels you know that the initialization code that they might contain would run each time that you reopen them unless they are persistent in which case the init code runs just once while UXP panels are persistent by default so no matter how many times that you close and reopen them this show will run just once if you want to run code based on the show hide status you have to follow a different path that we might look at in a future video so the bottom line is that this show alert just run once okay okay let me recap what we have seen so far we can have plugins that contain just commands scripts must be wrapped with UXP plugins and this is how to do it you can have more than one command inside the same UXP plugin and we‚Äôve also seen how to export functions to be imported with this require syntax and the object destructuring syntax here then we have this hello world panel sample where instead we have panels as opposed to commands and this is defined by the type we still have the id and we can have this entrypoints set up panels and the show function again this must match the string that is found in the manifest.json right and then in the kitchen sync example we have seen a plugin that contains both a command and a panel and the way that the two are set up in the entrypoints setup right? OK I think this is it for this time I hope you have learned something new and if this is the case please consider¬†¬†&lt;/p&gt;

&lt;p&gt;supporting me I want to thank all the people who made a donation there‚Äôs a button on my website it‚Äôs been truly very much appreciated you can also purchase ALCE and DoubleUSM in the Photoshop marketplace and if you happen to buy them please leave a positive rating or a review which will always help very much as well. Okay thanks for watching and see you in the next one. Bye!&lt;/p&gt;
</description>
        <pubDate>Wed, 18 Nov 2020 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/development/Adobe-UXP-things-you-need-to-know-4-commands-panels-manifest.html</link>
        <guid isPermaLink="true">http://localhost:4000/development/Adobe-UXP-things-you-need-to-know-4-commands-panels-manifest.html</guid>
        
        <category>UXP</category>
        
        
        <category>Development</category>
        
      </item>
    
      <item>
        <title>Adobe UXP: Things you need to know! #3 UXP Developer Tool</title>
        <description>&lt;p&gt;In this episode I‚Äôll talk about the new UXP Developer Tool, that you‚Äôre going to use to load, reload, watch, debug and scaffold new UXP plugins from templates!&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/jj9ZzT1iwRU&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;If you find this content useful, &lt;em&gt;please consider supporting me&lt;/em&gt; ‚Äì 2020 is a hell of a year. I don‚Äôt have a Patreon page, but I‚Äôve got two fairly cheap plugins on the Photoshop Marketplace, &lt;a href=&quot;https://adobe.com/go/cc_plugins_discover_plugin?pluginId=28db2e07&amp;amp;workflow=share&quot;&gt;ALCE&lt;/a&gt; (Advanced Local Contrast Enhancer) and &lt;a href=&quot;https://adobe.com/go/cc_plugins_discover_plugin?pluginId=78c3cdaf&amp;amp;workflow=share&quot;&gt;Double USM&lt;/a&gt; (on sharpening). If you happen to buy them, please leave a positive rating/review, it would greatly help. Or, you can&lt;/p&gt;

&lt;form action=&quot;https://www.paypal.com/donate&quot; method=&quot;post&quot; target=&quot;_top&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;hosted_button_id&quot; value=&quot;37N4GHTNJK8YE&quot; /&gt;
&lt;input type=&quot;image&quot; src=&quot;https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif&quot; border=&quot;0&quot; name=&quot;submit&quot; title=&quot;PayPal - The safer, easier way to pay online!&quot; alt=&quot;Donate with PayPal button&quot; /&gt;
&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;https://www.paypal.com/en_IT/i/scr/pixel.gif&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;
&lt;/form&gt;

&lt;p&gt;If you cannot, or don‚Äôt want to, that‚Äôs OK anyway.&lt;br /&gt;
Stay safe and thanks! üôèüèª&lt;/p&gt;

&lt;h2 id=&quot;the-whole-series-so-far&quot;&gt;The whole series so far&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know.html&quot;&gt;#01 ‚Äì Rundown on the UXP announcement @ the Adobe MAX 2020&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-2-documentation.html&quot;&gt;#02 - Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-3-UXP-developer-tool.html&quot;&gt;#03 - UXP Developer Tool&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-4-commands-panels-manifest.html&quot;&gt;#04 - Commands vs. Panels and the manifest.json&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-5-async-vs-sync-in-photoshop-dom-scripting.html&quot;&gt;#05 - Sync vs. Async code in Photoshop DOM Scripting&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-6-BatchPlay-part-1-ActionManager-roots.html&quot;&gt;#06 - BatchPlay (part 1): the ActionManager roots&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-7-BatchPlay-part-2-Alchemist-plugin-listener.html&quot;&gt;#07 - BatchPlay (part 2): Alchemist as a UXP Script Listener&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-8-BatchPlay-part-3-Alchemist-plugin-inspector.html&quot;&gt;#08 - BatchPlay (part 3): Alchemist as a UXP Inspector&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;transcription&quot;&gt;Transcription&lt;/h2&gt;

&lt;p&gt;The transcripted video looks weird, but I‚Äôm told it helps to have it anyway because it‚Äôs easier to translate to other languages. Apologies for the lack of punctuation and the sloppy syntax.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;Hey I‚Äôm Davide and this is Adobe UXP things you need to know! Today I‚Äôm talking about the UXP Developer Tool. Which is what you use to load, reload, watch, debug and eventually package into a .ccx file your UXP plugin. So one thing to know among the things you need to know is that as opposed to CEP where you could just move or sim-link the folder of your extension into the directory whatever slash CEP slash extensions, with UXP this is not enough. Why? Because it‚Äôs the CCD app, the Creative Cloud Desktop app, that manages what plugin is loaded into what application. It has its own internal database to check against, so eventually it will move the plugin folder into whatever slash UXP slash whatever else, but you cannot do this manually, so it‚Äôs not enough. You need to use the UXP Developer Tool. So let‚Äôs install that: first head to the documentation website, which you know because you‚Äôve watched my previous video, and there is this Developer Tool tab here that you will click and you can find the macOS installer and the Windows installer. When you install it and launch it the first time it will ask you to enable the ‚Äúdeveloper mode‚Äù and you need to be an administrator to do so. If your user isn‚Äôt you can always create a JSON file called settings.json and with this content: developer true, and put it into one of those two folders: one for Mac and for Windows. There is also in Photoshop and you should check this as well in the plugins tab this ‚ÄúEnable Developer Mode‚Äù checkbox, so with this you should be ready to go. And here is the UXP Developer Tool so let‚Äôs add an existing plugin. Which one? Well you know that in the documentation, in the community tab, there is this UXP for Photoshop sample repo code on GitHub, and then you can download the entire zip and you have all those beautiful plugins for you to test. I‚Äôve already done that so I can go back to the UXP DevTool, click ‚ÄúAdd existing plugin‚Äù and I can point to the manifest.json of the ui-kitchen-sync. You have to use the manifest.json to load the plugin not into Photoshop, but first into the UI, right? You must see on the left column the host application: Adobe Photoshop 22, which is Photoshop 2021, otherwise this won‚Äôt work, of course. So this version of Photoshop is currently running. Now that you have it here, you can explicitly load it and this should bring it up in Photoshop: here it is, the kitchen-sink; I think I showed you this in the first video maybe. This is the spectrum typography, then you have the widgets all the things you can add, the native elements, HTML events, and whatnot so this is not really about the kitchen-sink but the UXP DevTool. One thing that you can do is, after we have loaded a plugin, to reload it in case you have changed its source code. I should have it here in Atom so this is the heading, this thing that you‚Äôre seeing here, let me add some exclamation marks. And I‚Äôm going to save and those changes are not caught by default in the plugin you have to reload this so let‚Äôs click this three dot button again and click reload and sure enough you see that the changes have been applied, right? But it‚Äôs kind of boring to have to manually reload it each time you may want to watch it for changes, so with this each time that you change something in the source folder is going to be reloaded the plugin is going to be reloaded automatically for you so let me remove those exclamation marks, save again and back to Photoshop: sure enough they‚Äôve been removed, right? Fine. So let me close this and another thing that you can do besides loading reloading watching and unwatching, so let me unwatch this, is to create a plug-in, scaffolding a plug-in. So let me do that: Create plug-in, you have to add name, let‚Äôs call this Test UXP plugin, and then you have to add an ID and this ID is given you by the Adobe Dev Console which is where you upload your plugin to for admission into the Adobe marketplace. You can change this later on so let me add zero-zero-zero-zero-zero here, right? Plugin version must be three numbers so 1.0.0 is fine the host application Photoshop okay and the version at least 22.0.0. Then you can select between two different templates: the ps-starter is the vanilla javascript one and then you have a React-based one, I‚Äôm going to show you the vanilla one. So select folder you have to enclose that in a new folder otherwise it would just throw the files in here so let me call this UXP Test Folder, and create that, right? Plugin‚Äôs been created successfully you have the toast, green toast here. Here it says that you will need to run additional commands from your terminal in order to install various dependencies, and this is true only if you are scaffolding a React plugin not a vanilla one: vanilla one is ready to go, right? So here we have it and so let‚Äôs load it in Photoshop. Plugin has been loaded successfully, and this is it. You can click populate layers and nothing happens, which is fine because this works when you have an open document. So, let me open this in Atom, it was UXP Test Folder, this here, and you see the code is very basic: and index.html and then there‚Äôs the JS and the manifest and this is the ID that you can always change later on as well as all the other data here, right? Okay, now that we have this plugin open we might want to debug it so let‚Äôs click Debug and this pops up this Chrome DevTool-like window. I say that it‚Äôs like a Chrome DevTool because it‚Äôs not fully-fledged, you see that there are a lot of things missing here: you cannot install other things for instance the React DevTool ‚Äì yet might be possible in the future ‚Äì but it works exactly as the Chrome DevTool: you have the Console with an error, and I‚Äôm going to show you why in a minute. And one thing that you can do which is quite helpful is to use the Console to experiment with the Photoshop API. Let me try to make this‚Ä¶ Oh no, I cannot make the font size bigger, and this is one of the limitation of the Console as it is right now: some of the keyboard shortcuts don‚Äôt work. For instance you can clear the console with ctrl+L but you cannot use Command + for instance to change the font size. So what you can do is to use this as I said Console to experiment: so let‚Äôs say const photoshop equal require Photoshop I‚Äôm typing this a lot so I already have it here. And then you have the Photoshop object, for what? Well to play: photoshop, and then dot, and then you can see everything that you have the app, the core‚Ä¶ So let me pick app and then you click dot and you just see what‚Äôs in there right? If you knew the documentation like the back of your hand you would know what everything here is. I don‚Äôt so I‚Äôm just, you know, picking things: the actionTree, so what is this Photoshop.app.actionTree? No idea, let‚Äôs check this out. So it turns out that it‚Äôs an array of actionSets and each actionSet is an object that contains properties, such as the action array, and the action array in turn has actions with an index, with the name, and an id. Okay, so I‚Äôve learned a new thing, right? What can I do with an action? I don‚Äôt know, let‚Äôs try this again. So Photoshop.app.actionTree, so the actionTree is an array so let me pick the first element in the array, so the one with index of 0, so this is an object that has an actions property; the actions is an array so let me pick the first one, again. If I click dot I see all the things that I can do: and I can get the index, I can get the name, I can play it so this looks promising. Let‚Äôs try this: play seems an action so probably it‚Äôs going to be a function so let‚Äôs add a couple of parentheses here and click this, and it says‚Ä¶ First of all something happened, which is cool, the command make is not currently available so let me stop, and what is this? Probably the action which is this one, so the first actionSet, the first action wants to make a snapshot but I don‚Äôt have any document open so this breaks which is fine. The point of all that is that you can use the Console and the auto-completion in the Console to just experiment things you can always then go back to the actual documentation and which is here Photoshop API, the modules, and Photoshop and here you see the actionTree then you have a confirmation that it outputs an actionSets array and so on so forth‚Ä¶ You can educate yourself in the documentation; I would say that it‚Äôs better to use the documentation and then test things in the Console or you can also use the other way around it‚Äôs probably a little bit more fun. Okay, so back to our original panel here: when we click this populate layers we saw that we have an error. Cannot read property layers of null, so let‚Äôs debug the error. In the code, which is here, we see that we have this sp-button and mind you the plugin uses Spectrum Components so sp-something. You have an sp-body with id of layers and body is not really a body is like a paragraph, right? So it‚Äôs styled, it changes the color depending on the theme so it‚Äôs light when the theme is dark and vice versa. It says no layers, does it? Yes, and when you click this button with id of btn-populate what happens is that you have a listener for the click event for this button populate that runs the showLayerNames function which is up here. he showLayerNames uh first stores into the app constant the Photoshop app objectm and then checks for the layers of the active document and then maps all the layers so this is an array, allLayers is an array, and it creates a new array running this function here function that takes the layer as an argument and outputs or returns the layer name and stick that array of layer names into this allLayerNames array and then sorts it with the sort method and when you have this sortedNames array, so this is an array it, changes the innerHTML of this layers element which is this sp.body here so sp-body is not going to be ‚Äúno layers‚Äù anymore but it‚Äôs going to be what? A string created using these backticks with an unordered list, and then you use ‚Äì this is all modern JavaScript, so you have the backtick string and then you can interpolate with the dollar and open and closed curly braces. You have the sortedNames array then you map the sortedNames array so you run this function for each one of the sorted names: you take the name as a parameter, and then you output for each one of those a string with a list item, with the name in it, and then eventually you have this array of list item strings, and then you join it. So eventually it is just one long string of list items, and then you close the unordered list. By the way if you remember in the last video I told ‚Äì last video? Yeah the last video ‚Äì I told you that there is no such a thing as an unordered list in UXP, reason why in this plugin they are adding specific styles to the list items because otherwise it won‚Äôt have it by default, right? So let‚Äôs check this out in Photoshop, I want to create a dummy document and let me duplicate the layers some times and click Populate Layers. And you see that you have the background, layer one, copy, copy two, copy three, right? So this is okay but I want to fix this error here ,so let‚Äôs debug that. One thing that you can do is in the Sources to add a breaking point right? So you click here, it‚Äôs the same with Chrome DevTool, I‚Äôm showing this to you just in case you‚Äôre not really familiar with it. So you see that we have this Uncaught Type Error: cannot read property layers of null. So let me close the document so that we have no document, so we are able to recreate the error. I‚Äôve added this breaking point; am I watching the source code? I‚Äôm not, so let me watch this, so that each time that I change the source code it‚Äôs automatically reloaded right? Okay and this time you should be able to click Populate Layers and have an error output, and when I click the button you see that the app is paused on that breakpoint: and I can use the step-over, step-in, step-out buttons as usual, so let me step-in. Let me try to make this a little bit bigger, I have the app object and it breaks here and the error is: ‚Äúcannot read property layers of null‚Äù right? So we have seen how to create a breaking point we‚Äôve got the error so now let‚Äôs fix this. Of course it can‚Äôt read the property layer because we don‚Äôt have any active document. So let‚Äôs get back to Atom, index.js, I want to stick that outside of the function because this might be useful to have for all the functions as well. So I need to check whether this app activeDocument exists or not so if not if we have no app activeDocument then just return, right? Well actually let‚Äôs say let‚Äôs console log something: console.log no docs and then return. All right, so let‚Äôs save this, Populate Layers: no docs, right? So this works. So one thing that I want to mention in this template: you have the index, you have the html, you have JavaScript, the manifest, but also this watch dot shell that uses this UXP plug-in load command. So if you try this if you try running this it‚Äôs not going to work because this was made when, in a pre-release, we had this UXP command-line utility. So the UXP DevTool initially existed as a command-line utility then evolved with the UI which is more easy to use and with more features. I am told that the command-line utility which I like very much because it‚Äôs easier if you will to plug into npm scripts, especially when you‚Äôre building a larger project, I‚Äôm told that this is going to be released as well so it‚Äôs going to be updated and matched feature-wise with the UXP DevTool with the GUI. So eventually in the future, probably, you‚Äôre going to have the choice to use either the command-line utility or this UXP DevTool as we use it now. So what else? We have loaded, reloaded, watched, debugged, logs, well logs just opens the the Console and there‚Äôs the possibility to package that plugin into a .ccx file. If you don‚Äôt remember where the folder is you can Open Folder and then it shows you in Finder and what? You have these options with breaking point and start, and all right: this Advanced with the plugin build folder here it says path should be relative to the selected manifest.json file. So this is useful when you use React plugins and should be documented in the DevTool working with React here watching your plugin. So basically the idea is that you tell the UXP DevTool to load the plugin based on the source manifest file, but when you use React you very likely have Webpack running and Webpack is going to output the final product into a /dist folder with its own manifest so you can tell the UXP DevTool where to find that distribution manifest so you say something like /dist, like that and this is better so that the UXP can manage with the hot-reloading thing. I think. What else? Here you can find the UXP DevTool preferences with the service port this is the port through which the UXP DevTool connects with Photoshop, and then you can change the theme from light to dark and vice versa of course this is built with spectrum components so it‚Äôs quite nice. All right I think this wraps it up I hope you enjoyed this one and if you did please consider supporting me, I‚Äôve even added a donation button in my website. Or you can purchase ALCE and Double USM in the Photoshop marketplace and if you happen to buy them please leave a positive rating or review which will always help very much. Okay, thanks for watching and see you in the next one. Bye!&lt;/p&gt;
</description>
        <pubDate>Fri, 13 Nov 2020 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/development/Adobe-UXP-things-you-need-to-know-3-UXP-developer-tool.html</link>
        <guid isPermaLink="true">http://localhost:4000/development/Adobe-UXP-things-you-need-to-know-3-UXP-developer-tool.html</guid>
        
        <category>UXP</category>
        
        
        <category>Development</category>
        
      </item>
    
      <item>
        <title>Adobe UXP: Things you need to know! #2 Documentation</title>
        <description>&lt;p&gt;In this episode I‚Äôm covering &lt;a href=&quot;https://www.adobe.io/&quot;&gt;adobe.io&lt;/a&gt;, the new developer portal that hosts the Photoshop UXP documentation among other things. And for once I‚Äôm glad they‚Äôre stealing my job ‚Äì the material they‚Äôve put together does stand out!&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/5SOUAWg-ghs&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;If you find this content useful, &lt;em&gt;please consider supporting me&lt;/em&gt; ‚Äì 2020 is a hell of a year. I don‚Äôt have a Patreon page, but I‚Äôve got two fairly cheap plugins on the Photoshop Marketplace, &lt;a href=&quot;https://adobe.com/go/cc_plugins_discover_plugin?pluginId=28db2e07&amp;amp;workflow=share&quot;&gt;ALCE&lt;/a&gt; (Advanced Local Contrast Enhancer) and &lt;a href=&quot;https://adobe.com/go/cc_plugins_discover_plugin?pluginId=78c3cdaf&amp;amp;workflow=share&quot;&gt;Double USM&lt;/a&gt; (on sharpening). If you happen to buy them, please leave a positive rating/review, it would greatly help. Or, you can&lt;/p&gt;

&lt;form action=&quot;https://www.paypal.com/donate&quot; method=&quot;post&quot; target=&quot;_top&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;hosted_button_id&quot; value=&quot;37N4GHTNJK8YE&quot; /&gt;
&lt;input type=&quot;image&quot; src=&quot;https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif&quot; border=&quot;0&quot; name=&quot;submit&quot; title=&quot;PayPal - The safer, easier way to pay online!&quot; alt=&quot;Donate with PayPal button&quot; /&gt;
&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;https://www.paypal.com/en_IT/i/scr/pixel.gif&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;
&lt;/form&gt;

&lt;p&gt;If you cannot, or don‚Äôt want to, that‚Äôs OK anyway.&lt;br /&gt;
Stay safe and thanks! üôèüèª&lt;/p&gt;

&lt;h2 id=&quot;the-whole-series-so-far&quot;&gt;The whole series so far&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know.html&quot;&gt;#01 ‚Äì Rundown on the UXP announcement @ the Adobe MAX 2020&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-2-documentation.html&quot;&gt;#02 - Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-3-UXP-developer-tool.html&quot;&gt;#03 - UXP Developer Tool&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-4-commands-panels-manifest.html&quot;&gt;#04 - Commands vs. Panels and the manifest.json&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-5-async-vs-sync-in-photoshop-dom-scripting.html&quot;&gt;#05 - Sync vs. Async code in Photoshop DOM Scripting&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-6-BatchPlay-part-1-ActionManager-roots.html&quot;&gt;#06 - BatchPlay (part 1): the ActionManager roots&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-7-BatchPlay-part-2-Alchemist-plugin-listener.html&quot;&gt;#07 - BatchPlay (part 2): Alchemist as a UXP Script Listener&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-8-BatchPlay-part-3-Alchemist-plugin-inspector.html&quot;&gt;#08 - BatchPlay (part 3): Alchemist as a UXP Inspector&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;transcription&quot;&gt;Transcription&lt;/h2&gt;

&lt;p&gt;The transcripted video looks weird, but I‚Äôm told it helps to have it anyway because it‚Äôs easier to translate to other languages. Apologies for the lack of punctuation and the sloppy syntax.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Hey I‚Äôm Davide and this is Adobe UXP: Things you need to know! Today I‚Äôm talking about documentation. And I know this doesn‚Äôt really sound exciting, and a lot of you have already asked me to cover more advanced topics such as BatchPlay or the Alchemist plugin but this series tries to reach a larger audience, even people who have less experience in Adobe development. Hence learning how to navigate the new documentation portal is paramount; and by the way Adobe has put a lot of effort in the creation of such documentation so it‚Äôs fair for us at least to acknowledge their efforts and try to understand what‚Äôs in there. And by the way the UXP section of the Adobe portal for developers is a work-in-progress so let‚Äôs be forgiving if we find a link that is missing, or information that is a bit rough. So let me show you what we‚Äôre talking about. So this is the place to go Adobe.io and you might be tempted to just scroll down until you find the Adobe Photoshop API and click learn more. This is not really what you would expect if you‚Äôre looking for UXP content because the Photoshop API is something related to Photoshop as a Service, which is not the Photoshop-server thing but closer to it than it is to UXP. Quite interesting one, but not what we are after. You have to click this discover tab here and then you can find Photoshop, and here, right about here the UXP plugin API mini-site. so let‚Äôs click ‚ÄúView the docs‚Äù and here it is. This is the landing page with information on what to expect in this mini-site and let me pick the Guides and first thing that pops to the eye is that we have three levels of Navbars. So the top navbar here is the first level, and we have selected the Guides, and the second level is on the sidebar at the left, and the sidebar on the right just keeps track of where we are in the page as we scroll down or up. Other thing to notice is this ‚ÄúEdit in GitHub‚Äù link here and ‚ÄúLog an issue‚Äù because all this website, which by the way is based on something called the Gatsby Theme Parliament, Adobe Gatsby Theme Parliament or something like that, this is a template that uses Gatsby hence React.js that Adobe has made open source and you can look for it if you want. So everything here belongs to this AdobeDocs user, and this UXP-Photoshop repository also you can log an issue here if you find, I don‚Äôt know what, misleading information, or wrong statements or missing links, or whatnot. Again this is a working progress so it is to be expected to find missing pages and wrong links; that‚Äôs going to be okay. So I‚Äôm going to quickly browse through the documentation ‚Äì not reading it, but just pointing out interesting elements so that you know where to find them when you will need it in the future. So the ‚ÄúGetting Started‚Äù is just a very quick overview of the UXP technology and ‚ÄúUXP for you‚Äù points you to different pages depending on your background so if you are a UXP developer in XD but not in Photoshop you start here, if you have CEP experience but not UXP then you go there and, so on and so forth. ‚ÄúUXP toolchain‚Äù is describing you what you need in case you want to use, you want to create UXP plugins vanilla javascript UXP plugin so the UXP developer tool and then Visual Studio Code, a code editor or a more advanced toolchain in case you want to create React based UXP plug-ins so Node.js, npm and so on and so forth, how to install them and and other other things. So for instance this Kitchen-Sink example here is a sample plug-in that shows all the elements that you can use in the interface. Quite useful. ‚ÄúUXP for Photoshop basics‚Äù well this is the DOM, or the scripting side of UXP in Photoshop, so they tell you synchronous versus asynchronous scripting, how to use the various objects that are provided in this required Photoshop object. So in the app you have documents layer and so on and so forth, so this is just scripting. The ‚ÄúUXP Developer Tool‚Äù is a brief section or introduction to it, more information in the ‚ÄúDeveloper Tool walkthrough‚Äù where they tell you how to watch, load, reload, create a new plugin from a template and so on and so forth. And in ‚ÄúOther topics‚Äù you can find info about the UXP manifest, how to localize your plugin, the flyout menu access, file system, networking and Spectrum CSS. So what else? ‚ÄúHow do I‚Ä¶‚Äù this is a section that tells you how to perform basic tasks, so for instance: exporting and importing modules in your UXP plugin, how to use promises, async awaits. Specific snippets, these are things that you might find yourself using over and over again, especially for debugging purposes. FileIO, or other useful snippets, this shows you how to display a simple alert and mind you there is no equivalent in UXP to the prompt or the confirm functions, at least so far. Theme awareness: this goes into a theming for the plugin, and CSS vars so you can use ‚ÄìUXP-host-background-color so on and so forth. You also have examples on how to use them. Debugging your plugins shows you how to look for manifest problems, installation problems, javascript, CSS and what else, especially Gremlins. We have a lot of Gremlins in UXP. Photoshop API this is a section where you dig deeper into the scripting side of UXP, so you have all these modules for all the various objects that you have in the Photoshop: apps, action, action set, document, layer, and so on so forth. So let me just bring up the layer where you have all the various props and functions that you can run. So for instance how to duplicate a layer, right, and this is the place where to find all information. Mind you the DOM is still largely incomplete, so it is okay if you don‚Äôt find here what you were looking for, because you can always use BatchPlay which is here and this is the section where they tell you about the various BatchPlay options and how to run it. It‚Äôs quite bare as a section but I‚Äôm sure they‚Äôre going to add more information as time goes by. API extensions this is something I doubt I have already covered in my previous video and it‚Äôs interesting. I want to mention it here. We are now allowed to extend the prototype of a native object so you can add this custom prepend low-dash for instance function in the document prototype so that you can call it, for instance app.activedocument then you can run this prepend low dash that is going to rename all the layers prepending a low dash in their name so you can extend the prototype of the Photoshop document, layer, action set, and action. Then there‚Äôs this section about the communication between a UXP plugin and C++ plugins and how to listen to events. Also here they mentioned that app event notifier is not something that you want to use in commercial plugins because this is quite resource intensive and by the way it requires for the user to have the developer mode switched on in the Photoshop preferences, which users usually don‚Äôt have. So this is okay when developing a UXP plugins, this is not okay when these plugins are shipped to the marketplace. UXP API this is a section about instead the specific things of UXP, so not the host application, not Photoshop, not the scripting, but the panels and stuff. The javascript reference, global members, and modules these are all the things that you have access to in UXP so the clipboard websocket fetch and what else: data storage, you have local storage and a session based storage and all the various html events, html dom, and html elements, and the modules. These are specific to UXP so you have the ‚Äúos‚Äù not to be confused to node.js ‚Äúos‚Äù this is a different thing, you have three different methods for the platform: darwin is Mac, or windows-whatever is Windows. The release number, and then the architecture: 32-bit 64 and so on so forth. Mind you the release doesn‚Äôt correspond to the actual macOS version if you are on darwin. Let me show that to you: darwin versions, so for instance let me scroll down here if you have a darwin version of I don‚Äôt know 18.2 this is macOS 10.14, so you have to match them in order to know what operative system your users are using. Then the shell has just one method which is used to open a url in the default browser and then the ux well this is big I‚Äôm not going to cover this here because it‚Äôs going to have its own video but these are UXP specific things. For instance the entry points is an object that takes care of what happens during the UXP life cycle for instance the functions that you want to run when the panel shows or is created. And then you have storage, various information about it and key/value storage, version, host information and so on and so forth. The secure storage don‚Äôt be misled by the name: secure storage is encrypted but the user can decrypt it so you won‚Äôt store here information that you want to hide from the user, so for instance licensing information ‚Äì this is not the right place. Just mentioning this. And then what we have CSS reference here, so what‚Äôs available in UXP in terms of CSS as I mentioned in a previous video not everything is available so you have all the general variables, units, you can also use a ‚Äúcalc‚Äù function, which is cool and then what: selectors, media queries, pseudo elements, pseudo classes, and styles. So all these things are available with some caveats: so for instance the opacity here sets the opacity of an element, that‚Äôs okay. You have the MDN link but then quirks and exceptions: red flag Photoshop does not support this property although UXP will parse it do not use this style to control visibility! So read all of that if you‚Äôre going to use these styles here. And then what else_ we have similarly an html reference with the general supported and unsupported elements. Let‚Äôs check the unsupported elements first: in the typography quite surprisingly you don‚Äôt have a italic, you don‚Äôt have a strong, you don‚Äôt have a blockquote, pre, or code, you don‚Äôt even have an ordered list nor ordered list. You can add them, they won‚Äôt display as you expect them to do so you have to add your own styling for that. You don‚Äôt have the title. And these are the unsupported attributes, and then you have all the things that are instead supported: the body, the head, the html, link, so on so forth. Hierarchy, let me pick this h4 here, they tell you that the h4 is equivalent to the Spectrum heading of size extra-small, okay thank you. And then you have this Spectrum UXP reference because you know you can use Spectrum web components, they are already available without the need for you to import anything, as sp-something: sp-button and so on and so forth. So let‚Äôs see what‚Äôs in there about Spectrum UXP, so what‚Äôs Spectrum UXP, and using it with React. React has some quirks in terms not of Spectrum web components but web components in general. For instance, you have to use a closing tag, not self-closing tags. With Spectrum web components you have to use class instead of classname, so if you have a div in React well then you have to use classname, if you have e.g. a Spectrum icon you have to use class. And then more and then this is really important boolean attributes, this which you would normally use with React is not going to work with Spectrum web component: instead you have to use the ternary operator, and check for the property and set explicitly to true or null or undefined. And then event handling. What else: typography here, these are the available Spectrum typography web components and by the way if you look at the Spectrum web components website, this here, you don‚Äôt have for instance the sp-body that instead you have available in UXP. So there is an overlap between Spectrum web components in UXP and Spectrum web components tout-court but it‚Äôs a funny kind of overlap. And then you have sp-detail, a heading, label and so on and so forth. If you want to see how they look uh well then you have to go to the Spectrum web components website and then you have here for instance the switch which by the way is not one of the available web components in UXP so you have it here you can see how it looks but in this case it‚Äôs not found among the UXP components but it will be introduced later on. So if you want to see for instance sp-detail let‚Äôs check, detail should be in the typography, probably‚Ä¶ no no it turns out that not even sp-detail is found here but it should be found in the Spectrum CSS, so Spectrum CSS we should have the sp-detail I think in the typography here, please, yeah typography detail so you see it‚Äôs it‚Äôs kind of funny: some things are found in the Spectrum web components, other things are found in the Spectrum CSS, and some of them are in the UXP. Anyways, user interface these are all the available elements such as buttons, checkboxes, and whatnot. Again let me check for instance this here, yeah you have a graphic display of how they look like, not as interactive as the one in the Spectrum web component, so for instance let me check this slider here. These should be functional, yes, these are just images, yes, and then you have uh the code samples down below. Known issues, this is something really important that you should know like the back of your hand because many things won‚Äôt work as you would expect them to do, and so here you find all the known issues for UXP right? Sample code you find here javascript samples, React samples, and batch play samples. Then the design section is about designing a plug-in experience, so basically the Adobe guidelines in terms of the UI of the plug-in UX patterns. I don‚Äôt think these links work, yes they don‚Äôt but they will. So the user experience patterns, the user interface suggestions and so on and so forth. And then a section on the developer tool installation, plugin management, and working with React. And the UXP dev tool. The share tab is quite important as well because here is where Adobe tells you how to package your plugin, that is to say how to create the .ccx file, the options that you have for distribution, so for instance you can email they say your .ccx file, or upload it to the marketplace. The various guidelines for submission and review to the marketplace, and again: this is quite a strict process so you have to follow the Adobe guidelines otherwise your plugin is going to be rejected. And how to market your plugins t‚Äì his is not yet there but they‚Äôre going to add this kind of information as well. And finally the community: so we have now a Creative Cloud developer forums based on Discourse I think. Actually Adobe XD already had it I think, because this message is from August 2018, if I am correct. I should be. and the Photoshop section has been added quite recently so this is the place where you can meet other developers and discuss topics, and ask questions. Then you have the GitHub repo for the entire UXP doc minisite and the sample code repo where you can find all the available samples. So these are plugins that you can just, you know ,grab the code from and and learn from. WebSocket example, web service call example, and so on and so forth. And I think that with this I can wrap this video up. If you have enjoyed it please consider supporting me I don‚Äôt have any Patreon pages as I told you last time but I have Adobe development content and especially if you want to help: a purchase of my two extensions that are in the UXP marketplace would be a great thing, they‚Äôre still for sale at 16 bucks each, and if you happen to buy them just please leave a positive rating or review which will help immensely. If you cannot or don‚Äôt want to that‚Äôs okay right thank you for watching and see you in the next one. Stay safe! Bye.&lt;/p&gt;
</description>
        <pubDate>Thu, 05 Nov 2020 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/development/Adobe-UXP-things-you-need-to-know-2-documentation.html</link>
        <guid isPermaLink="true">http://localhost:4000/development/Adobe-UXP-things-you-need-to-know-2-documentation.html</guid>
        
        <category>UXP</category>
        
        <category>Adobe MAX</category>
        
        
        <category>Development</category>
        
      </item>
    
      <item>
        <title>Adobe UXP: Things you need to know!</title>
        <description>&lt;p&gt;I am starting a new series on development, called ‚ÄúAdobe UXP: Things you need to know‚Äù (I‚Äôm getting fancy with titles üòä) In my intentions it‚Äôll be very much along the lines of the old ‚ÄúHTML Panels Tips‚Äù series but in a different media. This first installment, a quick rundown on the news from the Adobe MAX 2020 announcement, is a 27 minutes video.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/zAOUBpDjc1Q&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Let me know what you think: feedbacks on the series idea, about UXP, life during the pandemic.
Speaking of which: if you find this content useful, &lt;em&gt;please consider supporting me&lt;/em&gt; ‚Äì 2020 is a hell of a year. I don‚Äôt have a Patreon page, but I‚Äôve got two fairly cheap plugins on the Photoshop Marketplace, &lt;a href=&quot;https://adobe.com/go/cc_plugins_discover_plugin?pluginId=28db2e07&amp;amp;workflow=share&quot;&gt;ALCE&lt;/a&gt; (Advanced Local Contrast Enhancer) and &lt;a href=&quot;https://adobe.com/go/cc_plugins_discover_plugin?pluginId=78c3cdaf&amp;amp;workflow=share&quot;&gt;Double USM&lt;/a&gt; (on sharpening). If you happen to buy them, please leave a positive rating/review, it would greatly help. Or, you can&lt;/p&gt;

&lt;form action=&quot;https://www.paypal.com/donate&quot; method=&quot;post&quot; target=&quot;_top&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;hosted_button_id&quot; value=&quot;37N4GHTNJK8YE&quot; /&gt;
&lt;input type=&quot;image&quot; src=&quot;https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif&quot; border=&quot;0&quot; name=&quot;submit&quot; title=&quot;PayPal - The safer, easier way to pay online!&quot; alt=&quot;Donate with PayPal button&quot; /&gt;
&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;https://www.paypal.com/en_IT/i/scr/pixel.gif&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;
&lt;/form&gt;

&lt;p&gt;If you cannot, or don‚Äôt want to, that‚Äôs OK anyway.&lt;/p&gt;

&lt;p&gt;Stay safe and thanks! üôèüèª&lt;/p&gt;

&lt;h2 id=&quot;the-whole-series-so-far&quot;&gt;The whole series so far&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know.html&quot;&gt;#01 ‚Äì Rundown on the UXP announcement @ the Adobe MAX 2020&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-2-documentation.html&quot;&gt;#02 - Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-3-UXP-developer-tool.html&quot;&gt;#03 - UXP Developer Tool&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-4-commands-panels-manifest.html&quot;&gt;#04 - Commands vs. Panels and the manifest.json&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-5-async-vs-sync-in-photoshop-dom-scripting.html&quot;&gt;#05 - Sync vs. Async code in Photoshop DOM Scripting&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-6-BatchPlay-part-1-ActionManager-roots.html&quot;&gt;#06 - BatchPlay (part 1): the ActionManager roots&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-7-BatchPlay-part-2-Alchemist-plugin-listener.html&quot;&gt;#07 - BatchPlay (part 2): Alchemist as a UXP Script Listener&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-8-BatchPlay-part-3-Alchemist-plugin-inspector.html&quot;&gt;#08 - BatchPlay (part 3): Alchemist as a UXP Inspector&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;transcription&quot;&gt;Transcription&lt;/h2&gt;

&lt;p&gt;Since I‚Äôve been asked about it here‚Äôs the speech transcription (automatically generated by YouTube and then edited to match the actual audio content). Hope this helps!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Hey this is Davide, and the time has finally¬†
come to talk about UXP. So housekeeping first,¬†¬†
this is not a new podcast. The world doesn‚Äôt¬†
need a new one, but the topic - UXP the Unified¬†¬†
Extensibility Platform - is so important that I¬†
decided to set aside the dry blog posts that I¬†¬†
usually write and try with a medium that allows¬†
me a more extended, and probably even more¬†¬†
nuanced, kind of conversation. So here I would¬†
like to match in UXP terms the HTML Panels¬†¬†
Tips series that I had posted on my blog¬†
years ago, which was quite helpful I‚Äôm told.¬†¬†
So my intention is to cover all the basics about¬†
UXP for third-party developers and in this first¬†¬†
installment I would just want to introduce you to¬†
the big news that Adobe has dropped at MAX 2020,¬†¬†
and basically answer the following questions.¬†
What the heck is UXP? Should I care? How to¬†¬†
prepare? Can you help? Those kind of things. And¬†
then in the next videos, which might be videos¬†¬†
or written posts I don‚Äôt know yet, just leave me¬†
your feedback so that I know what is best for you,¬†¬†
I will try to dig deeper on those subjects. But¬†
for the time being let‚Äôs just review the big news.¬†¬†
It‚Äôs not really that UXP has been announced at¬†
MAX because it was already there in Adobe XD.¬†¬†
The news is that UXP is available to third-party¬†
developers like me, and probably like you,¬†¬†
in one of the major Creative Cloud applications:¬†
Photoshop 2021. I haven‚Äôt even touched what UXP¬†¬†
is, but you have to know that this is¬†
the future of extensibility for all the¬†¬†
major Creative Cloud apps so after effects¬†
indesign illustrator and so on and so forth¬†¬†
actually it is already there and this¬†
is being revealed by Adobe themselves¬†¬†
so UXP powers internal feature development¬†
in addition to third-party extensibility.¬†¬†
I.e Adobe is using UXP now as they were using¬†
CEP, the Common Extensibility Platform in the past¬†¬†
to implement first-party features: for instance¬†
in Photoshop there‚Äôs the I think it‚Äôs called¬†¬†
the New File dialog that was a CEP dialog and¬†
it has been converted now to a UXP dialog, so¬†¬†
those kind of features are right now implemented¬†
in Photoshop, Illustrator, InDesign, Premiere Pro¬†¬†
and so on and so forth. But they are not available¬†
to third-party developers except for Photoshop and¬†¬†
of course XD. So UXP API in Photoshop 2021, and¬†
in the end this is going to get almost everywhere.¬†¬†
And the really important bit: UXP, the Unified¬†
Extensibility Platform, is going to replace CEP,¬†¬†
the Common Extensibility Platform in the long run.¬†
So the Unified will beat the Common. But relax,¬†¬†
this is not going to happen overnight. We will¬†
have plenty of time to learn the new thing and¬†¬†
port legacy code to UXP. This is what we have¬†
been told over and over again. quote &amp;amp; quote:¬†¬†
plenty of time. But we haven‚Äôt been given¬†
any actual expiration date so right now CEP¬†¬†
and UXP are co-existing in the same Photoshop.¬†
If you ask me what this ‚Äúplenty of time‚Äù means¬†¬†
well when you have plenty of something you have¬†
more than one unit of that something. And speaking¬†¬†
of time the unit here is likely one cycle i.e one¬†
major version. So I would say that it is fair to¬†¬†
expect that we‚Äôll have at the very least a couple¬†
of cycles, two years of CEP and UXP overlap. Maybe¬†¬†
more. In my optimistic days I would say at least¬†
twice that, so four years. But let‚Äôs just say¬†¬†
at the very least two. And actually nobody¬†
really knows, this is my best guesstimate.¬†¬†
So in my opinion there is no need for¬†
you to quit everything in your CEP¬†¬†
or ExtendScript development tomorrow to start¬†
trying to port your production code in UXP.¬†¬†
That would be in my opinion a very bad idea;¬†
just get your feet wet with this technology¬†¬†
and keep maintaining your old code bases.¬†
But UXP is definitely going to be the future¬†¬†
of the entire Creative Cloud extensibility. That¬†
said the first question that is fair to ask is:¬†¬†
why, why the need of UXP? And this is a question¬†
that I also had. CEP was kind of stagnating in¬†¬†
the last couple of years, and that was good!¬†
Because nothing was changing, you could just¬†¬†
go on with your business, write code sell stuff.¬†
But it turns out that Adobe was experiencing and¬†¬†
trying to react to some of the drawbacks of¬†
CEP, so let me try to describe them to you.¬†¬†
First one is likely very well known to every¬†
developer: CEP is running on one engine,¬†¬†
which is the JavaScript V8 engine that engine¬†
dialogues with the host application engine,¬†¬†
which is an old and grumpy ExtendScript engine.¬†
So just for us to be on the same page: CEP, the¬†¬†
old technology, is just an NW.js instance running¬†
in the host application. And NW.js is a way to¬†¬†
combine the Chromium Embedded Framework or CEF¬†
with Node.js so basically you have a browser and¬†¬†
Node.js combined. And then you write some sort of¬†
supercharged web application that runs within that¬†¬†
context and those two. Chromium and Node are¬†
embedded in the host application, in my case¬†¬†
Photoshop. And by the way I have a course on NW.js¬†
which is called JavaScript Native Applications for¬†¬†
Photoshop, which is basically a way to transplant¬†
CEP panels outside of Photoshop as independent¬†¬†
application. This is just a shameless plug,¬†
because it‚Äôs 2020 for everybody guys‚Ä¶ Where¬†¬†
was I? With CEP you have this two different heads¬†
communicating and sending messages back and forth;¬†¬†
so the JavaScript V8 engine of the panel sends¬†
scripting messages as Strings to the Photoshop¬†¬†
/ host application engine which is ExtendScript¬†
based, then collects the return value. All this¬†¬†
back and forth is not really ideal. We would like¬†
to have just one engine to rule them all. Second,¬†¬†
every time that Chrome or Chromium or something¬†
like that is involved you might have experience of¬†¬†
the fact that Chrome is quite resource intensive,¬†
it‚Äôs heavy, it consumes RAM and CPU cycles.¬†¬†
So you start having more than one panel open¬†
and running that might have a substantial¬†¬†
impact on your machine and performances. And¬†
by the way it‚Äôs not only third-party panels:¬†¬†
as I said host applications are using the same¬†
technology to support their own native features,¬†¬†
so you might have a very large number of panels¬†
loaded in your system and this might degrade the¬†¬†
performances quite substantially. And these are¬†
the two main drawbacks that UXP tries to solve.¬†¬†
Let me bring up this diagram here, which is quite¬†
scary at first, but I will try just to sum up the¬†¬†
most salient parts. We have a couple of problems¬†
first problem the two engines and this is solved¬†¬†
brilliantly killing one engine. So in UXP we¬†
have just one engine that deals with the UI,¬†¬†
so with the panel. By the way we‚Äôre not talking¬†
about panels anymore, this is against the¬†¬†
Adobe guidelines and they are patrolling that¬†
quite strictly. We are talking about plugins,¬†¬†
so you will be writing and developing¬†
UXP plugins, and a plugin can contain:¬†¬†
zero or more panels; zero or more dialogues,¬†
which are just modal windows, modal dialogues;¬†¬†
and zero or more commands, which are headless¬†
scripts. So if your thing doesn‚Äôt really need¬†¬†
a UI you‚Äôre going to call that a Command now.¬†
So a plugin is a container of all those things¬†¬†
together or just one of them. UXP plugins have¬†
one JavaScript V8 engine alone, and that deals¬†¬†
with the scripting side as well now, so we finally¬†
got rid of the ExtendScript language. This is a¬†¬†
huge change that has some you know pretty wild¬†
consequences that we will get to in a moment.¬†¬†
Second problem, performances; in both CEP and¬†
UXP the UI that you design is built using HTML,¬†¬†
CSS and JavaScript. Actually UXP allows a¬†
subset of HTML, CSS and JavaScript, but more¬†¬†
on that in a minute. This UI is not just shown¬†
as rendered HTML elements in the user interface,¬†¬†
instead it is parsed and then converted¬†
into native controls. So your, say,¬†¬†
HTML button is not just displayed as CEP¬†
would do, but it is converted into a native¬†¬†
bit of Photoshop UI, made of the same matter¬†
of all the rest of the native Photoshop UI.¬†¬†
And this speeds up the whole interface quite a¬†
bit, so you are solving both CEP‚Äôs main problems¬†¬†
at once: the two engines and the reactivity of the¬†
interface / the footprint it has in your system.¬†¬†
Actually there is more in this UXP umbrella¬†
term: besides the scripting engine with all¬†¬†
the bells and whistles of modern JavaScript, the¬†
fat arrow syntax, object destructuring, and so on¬†¬†
and so forth, we get also a common set of APIs for¬†
Networking, FileIO, and in the future, these are¬†¬†
not yet available, Imaging and Machine Learning as¬†
well. Let me talk about the DOM, so the scripting¬†¬†
layer. There is this massive switch to a new¬†
JavaScript engine and this is not a bloodless¬†¬†
transition. For instance all the elements that¬†
were peculiar to the ExtendScript language¬†¬†
are gone, like gone forever. XML literal support,¬†
or the ScriptUI library ‚Äì those beloved ScriptUI¬†¬†
windows, they cannot exist anymore. The Adobe¬†
team has been up to this huge task of rewiring¬†¬†
all the DOM and the system is new, so let me try¬†
to find the right bits, you see that you require¬†¬†
‚Äòphotoshop‚Äô, this new object is made available¬†
by UXP and then you go on with the dot notation,¬†¬†
the app, properties and methods. But we are far¬†
from having a complete DOM: this is the target¬†¬†
of the Photoshop team, this is what we have been¬†
told, but we are not there yet. Lots of things are¬†¬†
missing. Fortunately Photoshop has this peculiar¬†
thing called ActionManager, and ActionManager lets¬†¬†
you get where the DOM can‚Äôt go. So you can get¬†
and set properties and you can perform actions.¬†¬†
ActionManager is still there in UXP, it‚Äôs even¬†
more powerful, but now it is called BatchPlay,¬†¬†
and it has a new syntax which is kind of simpler,¬†
JSON based. You can group different actions¬†¬†
in an array and run them at once, it‚Äôs quite fast.¬†
But the underlying structure of the actual events¬†¬†
and descriptors is the same. One question that¬†
I‚Äôve been asked quite a lot is the following:¬†¬†
is there a ScriptingListener plugin for¬†
UXP? In ActionManager that was crucial,¬†¬†
so is there a BatchPlay equivalent? The good¬†
news is that there is, actually it‚Äôs much¬†¬†
better, and that‚Äôs made by my friend the¬†
incredibly talented developer Jaroslav Bereza.¬†¬†
Sounds Spanish but he‚Äôs from the Czech Republic.¬†
The thing is called Alchemist for Photoshop¬†¬†
and it‚Äôs kind of an inspector and a listener¬†
combined, so it‚Äôs much much more powerful.¬†¬†
It can be found at this GitHub repo and¬†
recently in the UXP Marketplace as well.¬†¬†
Let me rewind a bit, when I told you that you have¬†
just a subset of HTML, CSS and the JavaScript to¬†¬†
work with: this is very very important, the most¬†
important takeaway here is that, I know it sounds¬†¬†
silly but‚Ä¶ UXP is not CEP. So with CEP you¬†
were used to this idea that you were targeting¬†¬†
something like a browser, so you could access all¬†
the standards in the world, plus you had Node.js.¬†¬†
Not the case here. And I‚Äôm not saying this to¬†
scare you, but just bring you to realize that UXP¬†¬†
is very different. Speaking of missing elements,¬†
in the HTML for instance, to date, so far, there¬†¬†
is no canvas element. So if you need the canvas¬†
to draw your fancy interfaces in the 2d context¬†¬†
ah you‚Äôre out of luck. Might be that the canvas¬†
will be introduced because of missing elements and¬†¬†
API are still added so probably in a month, four¬†
months from now, it will be available. I cannot¬†¬†
say. But to date the canvas is not yet there. And¬†
just to name another one, in CSS we don‚Äôt have the¬†¬†
float, which would sound quite you know, standard,¬†
but we don‚Äôt have it. We have the FlexBox instead¬†¬†
so we use FlexBox to architect the UI, and¬†
we will have the CSS Grid, we‚Äôve been told,¬†¬†
in the future probably somewhere in 2021. So you¬†
see that there are missing parts and some of them¬†¬†
probably are going to be added in the future,¬†
some others won‚Äôt, and only time will tell.¬†¬†
Speaking of JavaScript and API there is no, or¬†
at least the last time that I‚Äôve checked there¬†¬†
was no, document.createevent(). And you might¬†
say: well, who cares, I mean that‚Äôs the first¬†¬†
time that I‚Äôve heard about it. Turns out that¬†
document.createevent() is something that Vue.js,¬†¬†
the latest version of Vue.js heavily relies¬†
upon, and if you don‚Äôt have a createevent Vue.js¬†¬†
will not work, I have been told that createevent¬†
might be shimmed, I‚Äôve not been able to do that,¬†¬†
but I‚Äôm told that it can be done, so probably¬†
Vue.js, if properly massaged, will work¬†¬†
but these are the kind of things that you have to¬†
deal with. So forget about CEP as this beautiful¬†¬†
large body of standards, we are dealing with¬†
a much smaller playground here. And this is¬†¬†
also the reason why if you‚Äôre serious about¬†
UXP plugin creation you should learn React,¬†¬†
because React.js is the JavaScript framework that¬†
Adobe itself uses to build their own plugins, and¬†¬†
it works because somehow UXP is shaped to¬†
make it work. So if there‚Äôs something in UXP¬†¬†
that is missing to make React work properly,¬†
engineers will implement it so you can be¬†¬†
sure that React is going to work. If you want to¬†
plug in something else you might be lucky, you¬†¬†
might not. What else comes from MAX 2020, there¬†
is this new way to deploy and look for plugins,¬†¬†
let me talk about the deployment first. We are¬†
happily abandoning the ZXP format hallelujah¬†¬†
and we are embracing something called CCX. And¬†
this is very simple, it‚Äôs just a matter of zipping¬†¬†
the plugin folder, no signature, no timestamp, and¬†
then you rename the ZIP to CCX, upload it to the¬†¬†
developer console and submit it to the Marketplace¬†
or distribute it to your channels. The CCX¬†¬†
when the user double clicks it is going to be¬†
opened by the Creative Cloud desktop application¬†¬†
that performs the installation. In the Creative¬†
Cloud desktop app there‚Äôs this Marketplace tab,¬†¬†
here I‚Äôve selected all plugins and filtered¬†
for Photoshop plugins. All these entries are¬†¬†
new UXP plugins these have been made in the¬†
last months this is mine this is mine too¬†¬†
all the rest below this available from Adobe¬†
exchange is basically the old CEP Marketplace.¬†¬†
Now let me get to Photoshop where there‚Äôs this¬†
new Plugins menu item, and you have a few things¬†¬†
in here: first you can browse for plugins, and¬†
this brings up the Creative Cloud application,¬†¬†
or you can launch your plugins panels. This is¬†
where your licensed plugins belong. These are my¬†¬†
four ones and this is just a development thing.¬†
Then you click herem and then you have all those¬†¬†
commands that are the same that belong to this¬†
menu here, so this is the panel, and then you¬†¬†
see you have other entries like About, and About¬†
is a modal dialog, right, and you have the panel,¬†¬†
the modal dialog, and as I said there are other¬†
things that could be there for instance Commands:¬†¬†
scripts that you can run. Also please know that¬†
CEP panels now are in this Extensions Legacy,¬†¬†
a name that some developers haven‚Äôt liked too¬†
much. But anyways‚Ä¶ Plugins are the new UXP thing¬†¬†
and then Extension Legacy is the place where all¬†
CEP panels belong. So what else, okay, tooling oh¬†¬†
well this is good, this is cool! We now have this¬†
thing called the Adobe UXP Developer Tool which is¬†¬†
really helpful. You can add existing plugins,¬†
for instance like this one, you just load the¬†¬†
manifest.json and well the plugin already exists¬†
so we can dismiss this. And you can load, reload,¬†¬†
watch the folder, so that the UXP Developers Tool¬†
reloads each time that you change the source code¬†¬†
and also debug. And this opens this kind of Chrome¬†
Developers Tool window which is not really a match¬†¬†
features-wise with the real Chrome Developers Tool¬†
but you know it‚Äôs useful. You have the console,¬†¬†
you can look for elements and so on and so forth.¬†
And you can look at the logs and you can also¬†¬†
package directly from the UXP Developers Tool, so¬†
create the CCX file here, and then you have other¬†¬†
things. So this is really handy and completely¬†
new and it helps a lot in creating UXP plugins.¬†¬†
And you can also create a new plugin from the UXP¬†
Developers Tool, so this pops up a dialogue where¬†¬†
you can enter the name, the id, version, so on¬†
so forth and also select template. And you have¬†¬†
a couple of them, one is called ps-starter,¬†
and then we have this ps-react-starter¬†¬†
so you can think about those UXP plugin as¬†
you know a simple one and the complex one.¬†¬†
I have them both so let me close this and get¬†
back to that. There‚Äôs this one called Theme¬†¬†
Switcher which is, let me show that to you because¬†
it‚Äôs fun, the simplest thing ever. It‚Äôs just four¬†¬†
buttons and an icon and then you can change¬†
the UI brightness of the Photoshop interface.¬†¬†
And by the way you see that you you have this¬†
possibility to keep the panel appearance in sync,¬†¬†
and this is done not via JavaScript as in CE√© but¬†
with Media Queries. This is quite simple you see¬†¬†
there is an index.html, css and JavaScript and the¬†
manifest. Manifest is really important, this is¬†¬†
where all the properties of the products are set¬†
so the id, the name, the width, height, preferred¬†¬†
width and height, max width and height, icons¬†
and stuff. And then you have the plugins that use¬†¬†
Eeact such as ALCE, which is here let me show that¬†
to you as well. This one is quite more complex you¬†¬†
see you have tooltips, sliders, buttons, and¬†
whatnot. And in case of a more complex UI,¬†¬†
and this is not complex at all in absolute terms¬†
but it‚Äôs more complex that this four button guy¬†¬†
here, you should really use React and in fact¬†
you see all the usual React Garbage and in fact¬†¬†
you see all the usual React stuff. I have a bunch¬†
of components, css, controller, JavaScript files,¬†¬†
and the ubiquitous manifest.json which is¬†
here. As a code editor you can use whatever¬†¬†
editor you want, I use Visual Studio Code, it‚Äôs¬†
just handier for me because I also need it for¬†¬†
ExtendScript code, because remember you can still¬†
use ExtendScript: those things are coexisting.¬†¬†
Now, in my case I‚Äôm running macOS Catalina so¬†
I don‚Äôt have access to the ExtendScript ToolKit¬†¬†
anymore, and I have to use the plugin for Visual¬†
Studio Code. One last thing that I want to mention¬†¬†
in this introduction is, let me bring back Chrome,¬†
here is the Spectrum Web Components. So when you¬†¬†
build a UI for Photoshop UXP panels or dialogues¬†
you have access to Spectrum Web Components, those¬†¬†
sp- things you have sp-button, sp-dropdown and¬†
so on so forth, and in this website you have a¬†¬†
bunch of them. Mind you, not all of them have been¬†
implemented in UXP, we have just a limited set by¬†¬†
now, but the support is growing with time. So for¬†
instance we don‚Äôt still have the Switch I think,¬†¬†
which is here, I would have needed that but¬†
I‚Äôm told that this is going to be available¬†¬†
in the future. So you can use this website as a¬†
reference. Please note that if you Google Adobe¬†¬†
Spectrum, Spectrum is a design system that Adobe¬†
has been working on for quite some time, you can¬†¬†
find several different things. On the one side¬†
you find the Spectrum specs, so this is just you¬†¬†
know the theoretical design system, and then you¬†
have the Spectrum CSS which is of course the CSS¬†¬†
implementation of that design system, but I don‚Äôt¬†
think they are really functional so for instance¬†¬†
in the Spectrum CSS I don‚Äôt think, I might be¬†
wrong but I don‚Äôt think you can open a drop down¬†¬†
menu you just have the design of that element.¬†
And then you have the Spectrum Web Components that¬†¬†
we have seen in UXP but you also have something¬†
called Coral Spectrum which is by Adobe as well¬†¬†
and these two are a web components implementation¬†
of the Spectrum design system but it‚Äôs a different¬†¬†
implementation of the first Spectrum¬†
Web Components, that‚Äôs kind of strange.¬†¬†
And then eventually you have React Spectrum¬†
which is the React components implementation¬†¬†
of that so, be aware that in the context of UXP¬†
plugins Spectrum Web Components are the ones made¬†¬†
available by default by UXP, so you can add for¬†
instance an sp-button. Let me show that to you¬†¬†
where‚Äôs the button here you can add an sp-button¬†
and that is going to appear in your UXP plugin no¬†¬†
need to import anything. You could also use native¬†
components, let me bring up this plugin here¬†¬†
you can use native elements they‚Äôre not very fancy¬†
looking, so for instance this is the range, the¬†¬†
slider, native range, whereas we have the Spectrum¬†
slider here which is kind of nicer. So you should¬†¬†
use Spectrum components where possible because¬†
this will keep the look consistent and they are¬†¬†
keeping refining those components over and over¬†
as opposed to these dull native elements you know.¬†¬†
I think that‚Äôs it for this not so brief overview¬†
of the main highlights of the UXP announcement¬†¬†
so let me try to sum up what I‚Äôve covered here.¬†
So UXP is going to be the future of all Adobe¬†¬†
Creative Cloud extensibility. CEP is going¬†
to be faded out, it will take a lot of time,¬†¬†
nobody knows how long. UXP has one engine compared¬†
to the two engines of the CEP system, the one¬†¬†
engine deals with both the UI and the scripting¬†
side so we have an entirely new scripting engine¬†¬†
that has a new DOM. You can use subset HTML,¬†
CSS and JavaScript and the result of what you¬†¬†
write is then converted into native controls¬†
which are faster and have a lighter footprint.¬†¬†
We have common APIs for Networking, FileIO and¬†
in the future Imaging and Machine Learning,¬†¬†
so this is really exciting. We also have a¬†
new set of tools, UXP Developer Tool and the¬†¬†
possibility to create either simple vanilla¬†
plugins or more complex ones based on React.¬†¬†
we‚Äôve got a new Marketplace and a simpler¬†
installation via CCS that is more reliable¬†¬†
than ZXP, if it was less reliable that would have¬†
come really as a surprise, and the entire UXP¬†¬†
experience is driven by the Creative Cloud¬†
desktop app. In the end, if you ask me, I am¬†¬†
quite pleased by the change. I had my problems¬†
with it because I i hate change in general¬†¬†
but in the end I think that this is going to¬†
bring more positive sides than negative. It is,¬†¬†
compared to CEP but I don‚Äôt want to sound rude in¬†
that, but UXP sounds more like a super-polished¬†¬†
modern version of ScriptUI rather than a big¬†
step into the standards direction, and this¬†¬†
is more of a closed system but we have to play¬†
into this smaller frame that Adobe is drawing.¬†¬†
That said you can find in this blog post of mine¬†
all the links to the available documentation that¬†¬†
Adobe is currently working on, and they‚Äôre¬†
doing a pretty good job, and by the way let¬†¬†
me thank all the people in the Adobe teams that¬†
have been supporting us third-party developers¬†¬†
for the MAX 2020 launch. I do plan to cover all¬†
the topics that I‚Äôve just briefly touched here¬†¬†
in future videos, blog posts, audio I don‚Äôt know¬†
just let me know what you think and what would be¬†¬†
best for you, and feel free to ask questions and¬†
suggest topics: I‚Äôll be happy to give you answers,¬†¬†
if I have them. If you have enjoyed this please¬†
consider supporting me: 2020 is a hell of a year,¬†¬†
I don‚Äôt have any Patreon page but¬†
besides my Adobe development content,¬†¬†
you can find in the UXP Marketplace there are¬†
two plugins of mine: ALCE, the advanced local¬†¬†
contrast enhancer or DoubleUSM about sharpening.¬†
They‚Äôre for sale half of the regular price,¬†¬†
they‚Äôre 16 bucks now and if you happen to buy¬†
them please leave a positive rating or review,¬†¬†
that would greatly help. If you cannot¬†
or don‚Äôt want to, that‚Äôs okay anyway.¬†¬†
All right thank you for watching and¬†
see you in the next one. Stay safe! Bye.&lt;/p&gt;
</description>
        <pubDate>Tue, 27 Oct 2020 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/development/Adobe-UXP-things-you-need-to-know.html</link>
        <guid isPermaLink="true">http://localhost:4000/development/Adobe-UXP-things-you-need-to-know.html</guid>
        
        <category>UXP</category>
        
        <category>Adobe MAX</category>
        
        
        <category>Development</category>
        
      </item>
    
      <item>
        <title>UXP launch at Adobe MAX 2020</title>
        <description>&lt;p&gt;The &lt;a href=&quot;https://www.adobe.com/max.html&quot;&gt;Adobe MAX 2020&lt;/a&gt; conference is unfolding right now, free and online, carrying a number of major updates in the Creative Cloud apps lineup ‚Äì Photoshop 2021 included. These are three of the major keynote‚Äôs highlights IMHO.&lt;/p&gt;

&lt;h4 id=&quot;conan-obrien-mentioning-cep-10-on-stage&quot;&gt;Conan O‚ÄôBrien mentioning CEP 10 on stage&lt;/h4&gt;

&lt;p&gt;Read that again to sink it in.&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&quot;/wp-content/uploads/2020/10/Conan.jpg&quot; srcset=&quot;/wp-content/uploads/2020/10/Conan.jpg 1x, /wp-content/uploads/2020/10/Conan@2x.jpg 2x&quot; alt=&quot;Conan O'Brien on-stage at MAX 2020&quot; /&gt;
&lt;figcaption&gt;Conan O'Brien on stage co-hosting MAX 2020. He really said &quot;CEP 10&quot;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h4 id=&quot;adobe-photoshop-2021-supporting-the-new-uxp-plugins-architecture-for-3rd-party-developers&quot;&gt;Adobe Photoshop 2021 supporting the new UXP plugins architecture for 3rd-party developers.&lt;/h4&gt;

&lt;p&gt;UXP stands for &lt;em&gt;Unified Extensibility Platform&lt;/em&gt;, a technology that was Guinea-pigged on Adobe XD and &lt;a href=&quot;https://medium.com/adobetech/announcing-uxp-in-photoshop-288496ab5e3e&quot;&gt;‚Äúenables JavaScript-based plugin development with near-native performance‚Äù&lt;/a&gt;, quoting Ari Fuchs (Product Lead for in-app extensibility at Adobe).&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&quot;/wp-content/uploads/2020/10/UXP.png&quot; srcset=&quot;/wp-content/uploads/2020/10/UXP.png 1x, /wp-content/uploads/2020/10/UXP@2x.png 2x&quot; alt=&quot;The UXP architecture&quot; /&gt;
&lt;figcaption&gt;The UXP Architecture (don't worry it'll be fine)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;My fellow developer, if this doesn‚Äôt get you excited feel worried then: &lt;strong&gt;in the long run UXP is going to replace CEP&lt;/strong&gt;, so you must care sooner or later. Let me stress that &lt;em&gt;it will not happen overnight&lt;/em&gt;, we‚Äôre just in the early stages and they‚Äôre going to overlap for a significant amount of time. Yet, be aware that UXP is clearly the future of plugins development in Adobe-land for all major CC apps. Which apps?&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&quot;/wp-content/uploads/2020/10/UXP-apps.png&quot; srcset=&quot;/wp-content/uploads/2020/10/UXP-apps.png 1x, /wp-content/uploads/2020/10/UXP-apps@2x.png 2x&quot; alt=&quot;The UXP architecture&quot; /&gt;
&lt;figcaption&gt;Ari Fuchs on current UXP support for internal features; 3rd party support will follow sometimes in the future.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h4 id=&quot;the-creative-cloud-marketplace-featuring-uxp-plugins-photoshop&quot;&gt;The Creative Cloud Marketplace featuring UXP plugins Photoshop&lt;/h4&gt;

&lt;p&gt;We‚Äôve been working behind the scenes for months now (‚Äúwe‚Äù being yours truly and other amazing developers, with the invaluable support of Adobe employees) to build and launch our UXP plugins in time for MAX 2020. I‚Äôve released new versions of ALCE, Double USM (that for a limited time are 50% off the original price), and the free utilities Theme Switcher and Floating Adjustments.&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&quot;/wp-content/uploads/2020/10/UXP-Marketplace.jpg&quot; srcset=&quot;/wp-content/uploads/2020/10/UXP-Marketplace.jpg 1x, /wp-content/uploads/2020/10/UXP-Marketplace@2x.jpg 2x&quot; alt=&quot;The UXP architecture&quot; /&gt;
&lt;figcaption&gt;The new Plugins panel and the CCD Marketplace &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The hub for plugins discovery and installation is now the CCD ‚Äì Creative Cloud Desktop app ‚Äì read more on &lt;a href=&quot;https://blog.adobe.com/en/2020/10/20/creative-cloud-ecosystem-update-max-2020.html&quot;&gt;this post&lt;/a&gt; by Vijay Vachani, (Sr. Director Product Management &amp;amp; Platform Partnerships at Adobe). Photoshop 2021 also sports a new Plugins menu and panel.&lt;/p&gt;

&lt;h2 id=&quot;uxp-and-you--how-this-blog-can-help-&quot;&gt;UXP and you ‚Äì how this blog can help üöÄ&lt;/h2&gt;

&lt;p&gt;In the past, I‚Äôve extensively blogged about CEP in the apparently quite popular ‚ÄúHTML Panels Tip‚Äù series. I plan to do the very same here with UXP ‚Äì with the difference that &lt;strong&gt;I‚Äôm also going to record videos&lt;/strong&gt;: the first being an extensive introduction/first-aid to the UXP platform that I‚Äôll release here before the end of the month. So stay tuned! And let me know what you think in the comment below.&lt;/p&gt;

&lt;p&gt;This is a collection of the available UXP resources at the moment:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/adobetech/announcing-uxp-in-photoshop-288496ab5e3e&quot;&gt;Announcing UXP in Photoshop&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.adobe.com/en/2020/10/20/creative-cloud-ecosystem-update-max-2020.html#gs.j8yw75&quot;&gt;Adobe expands Creative Cloud Platform capabilities and new marketplace for plugins and integrations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/adobetech/the-next-iteration-of-adobe-plugin-distribution-47ba732dc20a&quot;&gt;The Next Iteration of Creative Cloud Plugin Distribution&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.adobe.io/photoshop/uxp/&quot;&gt;UXP for Adobe Photoshop Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://forums.creativeclouddeveloper.com/&quot;&gt;Public Forums for UXP developers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://helpx.adobe.com/creative-cloud/kb/troubleshoot-common-addon-installation-issues.html&quot;&gt;Fix common installation issues with Creative Cloud app extensions or plugins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the meantime, there are a number of freely available &lt;a href=&quot;https://www.adobe.com/max.html&quot;&gt;Adobe MAX sessions&lt;/a&gt; to watch and learn from ‚Äì check them out. Stay safe and cheers from Italy! üñê&lt;/p&gt;

&lt;p&gt;Davide&lt;/p&gt;
</description>
        <pubDate>Tue, 20 Oct 2020 00:00:00 +0200</pubDate>
        <link>http://localhost:4000/development/UXP-at-Adobe-MAX-2020.html</link>
        <guid isPermaLink="true">http://localhost:4000/development/UXP-at-Adobe-MAX-2020.html</guid>
        
        <category>UXP</category>
        
        <category>Adobe MAX</category>
        
        
        <category>Development</category>
        
      </item>
    
      <item>
        <title>JavaScript Native Applications for Photoshop</title>
        <description>&lt;p&gt;I‚Äôm incredibly happy to announce that my new video-course has been published (confetti falls from the sky). Watch below a 3 minutes short presentation.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/8A4UEx8Gb1A&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;want-to-know-more&quot;&gt;Want to know more?&lt;/h2&gt;

&lt;p&gt;I‚Äôve revamped my &lt;a href=&quot;https://www.ps-scripting.com&quot;&gt;PS-Scripting&lt;/a&gt; website, which is going to be the central hub for all my books and courses, including this new &lt;strong&gt;JavaScript Native Applications for Photoshop&lt;/strong&gt; video-series.&lt;/p&gt;

&lt;div style=&quot;text-align:center; width:100%&quot;&gt;&lt;a href=&quot;https://www.ps-scripting.com/js-native-apps-for-photoshop.html&quot; target=&quot;_blank&quot; style=&quot;box-sizing: border-box; margin: 0; font-family: inherit; overflow: visible; text-transform: none; -webkit-appearance: button; display: inline-block; font-weight: 400; text-align: center; vertical-align: middle; user-select: none; border: 1px solid transparent; transition: color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out; color: #fff; background-color: #673ab7; border-color: #673ab7; padding: .5rem 1rem; font-size: 1.25rem; line-height: 1.5; border-radius: .3rem; margin-top: .25rem; margin-bottom: .25rem; cursor: pointer;&quot;&gt;Visit the course website&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;To those of you who did express their interest via the contact form: you should have received a special coupon code ‚Äì check your email. Everyone else: I‚Äôve set an automatic &lt;em&gt;launch price&lt;/em&gt; discount code that is going to expire in the early days of July. Sample content available.&lt;/p&gt;

&lt;h2 id=&quot;thanks&quot;&gt;Thanks!&lt;/h2&gt;

&lt;p&gt;Thank you all for your support, and for checking this blog from time to time ‚Äì my friends, 2020 is a tough year! I hope you‚Äôre all safe and‚Ä¶ reasonably fine? I can‚Äôt push that any further giving the crazy times we‚Äôre living through. üñê&lt;/p&gt;

&lt;p&gt;Davide&lt;/p&gt;
</description>
        <pubDate>Wed, 17 Jun 2020 00:00:00 +0200</pubDate>
        <link>http://localhost:4000/development/JavaScript-native-applications-for-photoshop.html</link>
        <guid isPermaLink="true">http://localhost:4000/development/JavaScript-native-applications-for-photoshop.html</guid>
        
        <category>Native App</category>
        
        <category>JavaScript</category>
        
        <category>Machine Learning</category>
        
        
        <category>Development</category>
        
      </item>
    
  </channel>
</rss>
