<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>Digital Caveman. Photoshop retoucher and plugins developer. Check out my Courses page!</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 28 Dec 2021 15:51:05 +0100</pubDate>
    <lastBuildDate>Tue, 28 Dec 2021 15:51:05 +0100</lastBuildDate>
    <generator>Jekyll v4.1.1</generator>
    
      <item>
        <title>Adobe UXP: Things you need to know! #12 React JS</title>
        <description>&lt;p&gt;In this instalment I’d like to tell you about ReactJS, and I’ll take the chance to announce a brand new course of mine: &lt;strong&gt;Adobe UXP plugins development with ReactJS - Build products and Create a Business in the Creative Cloud Marketplace and Beyond&lt;/strong&gt;.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/ll84YImfMP4&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;So far in this series I’ve only used Vanilla JavaScript to keep it simple, but in the real world a large part of plugin developers don’t like to reinvent the wheel themselves and end up using one of the available frameworks. And guess what, ReactJS is the most popular JavaScript library according to the StackOverflow 2021 survey. Even more than jQuery, check that out!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/11/frameworks.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By the way, React JS is a Library and not a Framework (such Vue.js or Angular), do you know the difference? A &lt;strong&gt;Library&lt;/strong&gt; is something that you &lt;em&gt;“plug in your code”&lt;/em&gt;, whereas a &lt;strong&gt;Framework&lt;/strong&gt; is something &lt;em&gt;“you plug your code into”&lt;/em&gt;… subtle but meaningful difference! In other words, &lt;em&gt;your code uses a Library&lt;/em&gt;, whereas &lt;em&gt;your code is used by a Framework&lt;/em&gt;. This is what is generally referred to as &lt;em&gt;“Inversion of Control”&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;According to this definition, it turns out that React JS is in fact a library, i.e. some code that enhances “regular” JavaScript adding useful features, but it doesn’t require you to buy into some opinionated way of structuring your source code, as Frameworks generally do.&lt;/p&gt;

&lt;h2 id=&quot;react-feats&quot;&gt;React feats&lt;/h2&gt;

&lt;p&gt;So, what kind of feats made React JS so popular over the years? First of all, &lt;strong&gt;Components&lt;/strong&gt;, a handy way to bundle into a custom element bits of user interface and logic.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;Heading&amp;gt;&amp;lt;/Heading&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;Slider&amp;gt;&amp;lt;/Slider&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;Buttons&amp;gt;&amp;lt;/Buttons&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Creating a component is as easy as writing a function: that in React can return markup, i.e. HTML elements.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-jsx&quot; data-lang=&quot;jsx&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Buttons&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;buttons&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;variant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;secondary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Cancel&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Run&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is referred to as JSX: JavaScript Syntax Extension, or JavaScript XML. Those components can be passed &lt;strong&gt;Properties&lt;/strong&gt; by the parent: they can make use of them, e.g. to display values via curly braces &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{}&lt;/code&gt; interpolation or to do whatever they have to do.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- In the Parent --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ToggleButton&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;message=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Click me&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bigger=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here we’re passing a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;message&lt;/code&gt; and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bigger&lt;/code&gt; properties, that are then destructured and used in the component to set the Spectrum Button text and assign classes.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-jsx&quot; data-lang=&quot;jsx&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// In the Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ToggleButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bigger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bigger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;larger highlight&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;normal&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Thanks to &lt;strong&gt;Hooks&lt;/strong&gt;, special React functions that give Components superpowers, you can e.g. create a &lt;strong&gt;State&lt;/strong&gt;: a &lt;em&gt;reactive&lt;/em&gt; property (alongside with its setter) that is able to trigger a component re-render when the property changes.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-jsx&quot; data-lang=&quot;jsx&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useState&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;react&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ToggleButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setIsOn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;lt;- State&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setIsOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;si&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isOn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Toggled ON&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Toggled OFF&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In the example above, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isOn&lt;/code&gt; is a boolean stored in the State; depending on its value, a different string is displayed in the Spectrum Action Button. The boolean is flipped in the button’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onClick&lt;/code&gt; handler via its setter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setIsOn()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reactivity&lt;/strong&gt; is key here: you’re building &lt;em&gt;declarative&lt;/em&gt; interfaces based on data, that are going to reflect changes in data as they happen. On the other side, with &lt;em&gt;imperative&lt;/em&gt; code (e.g. jQuery) you have got to explicitly impart instructions to the UI on what to do, and when.&lt;/p&gt;

&lt;p&gt;Obviously there’s much more to React than Components and Hooks, but thanks to them and to JSX (the possibility to use JavaScript to compute HTML code) you’re able to build remarkably powerful User Interfaces.&lt;/p&gt;

&lt;p&gt;For all your needs there is a large ecosystem of plugins: take State Management as an example—i.e. a unique place to store reactive data that is accessible to all components no matter their parent/child relation. React provides you with solid foundations only, but you can easily plug-in the library you like the most among the available ones: Redux, Recoil, MobX, Zustand, etc.&lt;/p&gt;

&lt;h2 id=&quot;why-react&quot;&gt;Why React&lt;/h2&gt;

&lt;p&gt;And not Vue, Angular, Svelte…? Because: Adobe! You might not like this, but let me explain.&lt;/p&gt;

&lt;p&gt;UXP, as we’ve seen over and over again throughout this series, is heavily inspired by standards, but &lt;strong&gt;it shouldn’t be considered a Browser environment&lt;/strong&gt;. Hence, not everything that works in a Browser is to be expected to automatically work in a UXP plugin. As an example, until very (very!) recently, there wasn’t a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;document.createEvent()&lt;/code&gt; method, which is what Vue.js version 3 relies upon. Why was it missing? Because the UXP team has to willingly implement features, and that one didn’t happen to be high priority to them. As a result, for almost a year after the UXP announcement you couldn’t even load Vue.js v3.&lt;sup id=&quot;fnref:vuejs&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:vuejs&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;It also happens that &lt;strong&gt;React JS is exactly what Adobe uses for their own first-party features&lt;/strong&gt;, like for instance the Welcome screen, the New File dialog, the Neural Filters interfaces: all UXP plugins. And you can bet that if React-next-version is going to need some Browser API that didn’t make into UXP yet, that very feature is going to be implemented at once. Because they won’t risk Neural Filters to crash because of it, right? On the other hand, any other feature might take months to be implemented—as it’s happened with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;document.createEvent()&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In other words, not only React is a solid choice thanks to the popularity of the library in the JavaScript ecosystem and the amount of available resources; given its adoption by Adobe’s engineering teams it has to be considered the &lt;em&gt;safest choice&lt;/em&gt;, support-wise.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With any other framework, although they might work, you’re… more on your own. The [insert your framework of choice] might or might not work now, and might stop working when its newer version is released. ¯\_(ツ)_/¯&lt;/p&gt;

&lt;h2 id=&quot;the-uxp-and-react-js-course&quot;&gt;The UXP and React JS course&lt;/h2&gt;

&lt;p&gt;I was chatting with a developer friend once, and they said: “I’ll start with Vanilla JS plugins, and when I’m familiar with the environment I’ll approach React JS. You know, I don’t want too much on my plate”.
Although it may sound considerate at first, I don’t buy it, IMHO there’s a &lt;strong&gt;way better approach&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;On the one side, learning a tool&lt;sup id=&quot;fnref:react&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:react&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; such as React for React’s sake, in some abstract/generic environment &lt;em&gt;à la&lt;/em&gt; “let’s build a Todo app, or a Reddit clone” is always going to be an inferior way, compared to &lt;strong&gt;learning it in the actual context in which you’re gonna use it&lt;/strong&gt;: a UXP plugin. Not only you’re gonna save a huge lot of time, but it sucks way less.&lt;/p&gt;

&lt;p&gt;Provided that somebody (i.e. yours truly) has figured out &lt;strong&gt;a learning path that combines UXP and React JS&lt;/strong&gt; in such a way that you’re presented with a UXP problem, and given a gradually more complex React tool to solve it. So, hopefully, next time you’ll run into the same kind of problem in your own UXP plugins, it’ll come natural for you to reach out for that same React tool to hammer it. Much better than trying to fit some abstract example into the case at hand.&lt;/p&gt;

&lt;p&gt;Moreover, there’s a small(ish) subset of React features that allow you to accomplish a great deal of good in the UXP environment. Everybody love Venn Diagrams, isn’t that right?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/11/venn.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The overlapping area is evident &lt;em&gt;after&lt;/em&gt; you’ve drawn the two circles, i.e. after you’ve learned the two topics separately. But &lt;em&gt;while&lt;/em&gt; you’re drawing (i.e. learning) them on your own? You’ve no idea whether the React JS topic you’re approaching is going to be of fundamental importance, marginal, or just a waste of time. Wouldn’t it be better to start from this relatively approachable core of super-important topics instead, dealt with in the UXP plugins context to optimize your energies and time?&lt;/p&gt;

&lt;p&gt;That’s precisely the Adobe UXP plugins development with React JS course’s agenda.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/11/UXP_Hero.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Subtitled: “Build products and Create a Business in the Creative Cloud Marketplace and Beyond”. There’s a fat section on the business of UXP plugins, from mundane but fundamental topics such as VAT, ecommerce providers etc. that I wish somebody told me when I started many years ago, up to a comparison of marketing strategies. With examples from a barely average marketeer and a very successful one (and by very successful I mean in the six-figures range) such as Micheal Bruny-Groth, the author of the Logo Package for Adobe Illustrator.&lt;/p&gt;

&lt;p&gt;The course consists of a &lt;strong&gt;PDF ebook, ~290 pages&lt;/strong&gt; lusciously typeset in LaTeX (a pain in the ass, but still luscious).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/11/book.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then there are &lt;strong&gt;16 demo plugins&lt;/strong&gt; with fully commented code, from the ubiquitous “Action buttons” plugin, up more advanced topics such as React custom hooks, server-side communication, etc.&lt;/p&gt;

&lt;p&gt;I’ve also recorded &lt;strong&gt;5 and a half hours of videotutorials&lt;/strong&gt;, with theory, live coding, bug fixing and whatnot.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/11/SiB_videos.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I definitely plan to add more content as UXP evolves. The course is offered in three different &lt;em&gt;packages&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://gumroad.com/l/FrlXB?variant=Basic&quot;&gt;Basic&lt;/a&gt;: Book + Code samples&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gumroad.com/l/FrlXB?variant=Complete&quot;&gt;Complete&lt;/a&gt;: Book + Code samples + Videos (streaming only)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gumroad.com/l/YNFVJ&quot;&gt;Enterprise&lt;/a&gt;: Book + Code samples + Videos (downloadable, licensed for teams up to 10 seats strong)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more info and FAQ check out the course home at &lt;a href=&quot;https://www.ps-scripting.com/uxp-react.html&quot;&gt;PS-Scripting.com&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Thanks for following along! If you find this content useful, &lt;em&gt;please consider supporting me&lt;/em&gt;: you can either purchase my latest &lt;a href=&quot;https://www.ps-scripting.com/uxp-react.html&quot;&gt;UXP Course&lt;/a&gt; or &lt;a href=&quot;https://bit.ly/unDavide&quot;&gt;donate what you want&lt;/a&gt; as the following fine people have done—it’ll be much appreciated! 🙏🏻&lt;/p&gt;

&lt;p&gt;Thanks to: John Stevenson ⭐️, Adam Plouff, Dana Frenklach, Dmitry Egorov, Roberto Sabatini, Carlo Diamanti, Wending Dai, Pedro Marques, Anthony Kuyper, Gabriel Correia, Ben Wright, CtrlSoftware, Maiane Araujo, Mihály Dávid Paseczki.&lt;/p&gt;

&lt;form action=&quot;https://www.paypal.com/donate&quot; method=&quot;post&quot; target=&quot;_top&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;hosted_button_id&quot; value=&quot;37N4GHTNJK8YE&quot; /&gt;
&lt;input type=&quot;image&quot; src=&quot;https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif&quot; border=&quot;0&quot; name=&quot;submit&quot; title=&quot;PayPal - The safer, easier way to pay online!&quot; alt=&quot;Donate with PayPal button&quot; /&gt;
&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;https://www.paypal.com/en_IT/i/scr/pixel.gif&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;
&lt;/form&gt;

&lt;p&gt;Stay safe, get the Nth vaccine shot if/when you can – bye!&lt;/p&gt;

&lt;h2 id=&quot;the-whole-series-so-far&quot;&gt;The whole series so far&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know.html&quot;&gt;#01 – Rundown on the UXP announcement @ the Adobe MAX 2020&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-2-documentation.html&quot;&gt;#02 - Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-3-UXP-developer-tool.html&quot;&gt;#03 - UXP Developer Tool&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-4-commands-panels-manifest.html&quot;&gt;#04 - Commands vs. Panels and the manifest.json&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-5-async-vs-sync-in-photoshop-dom-scripting.html&quot;&gt;#05 - Sync vs. Async code in Photoshop DOM Scripting&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-6-BatchPlay-part-1-ActionManager-roots.html&quot;&gt;#06 - BatchPlay (part 1): the ActionManager roots&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-7-BatchPlay-part-2-Alchemist-plugin-listener.html&quot;&gt;#07 - BatchPlay (part 2): Alchemist as a UXP Script Listener&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-8-BatchPlay-part-3-Alchemist-plugin-inspector.html&quot;&gt;#08 - BatchPlay (part 3): Alchemist as a UXP Inspector&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-9-Adobe-Spectrum-UXP.html&quot;&gt;#09 - Adobe Spectrum UXP&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-10-Dialogs.html&quot;&gt;#10 - Modal Dialogs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-11-Flyout-menus.html&quot;&gt;#11 - Flyout Menus and Entrypoints&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-12-React-JS.html&quot;&gt;#12 - React JS and the UXP plugins Course&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:vuejs&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Vue.js version 2 worked fine out of the box, instead. &lt;a href=&quot;#fnref:vuejs&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:react&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;To me, React is just a tool to get the job done: I’m not a zealot, I’m not interested in JavaScript frameworks religion wars. &lt;a href=&quot;#fnref:react&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 17 Dec 2021 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/development/Adobe-UXP-things-you-need-to-know-12-React-JS.html</link>
        <guid isPermaLink="true">http://localhost:4000/development/Adobe-UXP-things-you-need-to-know-12-React-JS.html</guid>
        
        <category>UXP</category>
        
        
        <category>Development</category>
        
      </item>
    
      <item>
        <title>Adobe UXP: Things you need to know! #11 Flyout Menus and Entrypoints</title>
        <description>&lt;p&gt;In this episode I’ll show you how to setup Flyout Menus for UXP plugins, while introducing UXP Entrypoints. Feel free to watch the video or read the article, they cover the same ground.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/v-x1ZrOtlzQ&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;flyouts&quot;&gt;Flyouts&lt;/h2&gt;

&lt;p&gt;Flyouts are the kind of popup menus that appear when you click the top-right corner of UXP plugin’s panels. They’re traditionally used to launch info/about dialogs, or directly set Preferences in a remarkably unobtrusive way: the Flyout is easily reachable (stuff in there is always just one click away) and it helps you tremendously in keeping the precious real estate of the UI as uncluttered as possible.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/04/Panel.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Flyouts can store either single items, or group them inside submenus: which in turn can also be nested in a sort-of Russian doll fashion multiple times. In addition, all Flyout items can be dynamically set as &lt;em&gt;enabled&lt;/em&gt; or &lt;em&gt;disabled&lt;/em&gt; (grayed out), and &lt;em&gt;checked&lt;/em&gt; or &lt;em&gt;unchecked&lt;/em&gt; (with or without a flag besides their name).&lt;/p&gt;

&lt;p&gt;A UXP panel is always (when you instruct it to do so, which we’ll see in a moment) listening for Flyout user interactions, i.e. clicks. There’s just one callback in charge of dealing with those clicks, and within that function we’ll write the logic to handle the appropriate event—in other words, to recognize which menu item’s been clicked and then act accordingly.&lt;/p&gt;

&lt;p&gt;The subject of Flyout menus is also a way for me to introduce another crucial aspect of UXP plugins programming.&lt;/p&gt;

&lt;h2 id=&quot;entrypoints&quot;&gt;Entrypoints&lt;/h2&gt;

&lt;p&gt;You use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;entrypoints&lt;/code&gt; to bootstrap the plugin and set lifecycles hooks, i.e. functions that are expected to run when a particular event happens in the plugin’s life. They operate on the level of the &lt;strong&gt;plugin&lt;/strong&gt; itself, or the &lt;strong&gt;panels&lt;/strong&gt; and the &lt;strong&gt;commands&lt;/strong&gt; that the plugin can be made of&lt;sup id=&quot;fnref:command&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:command&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;In addition, it’s used to setup the Flyout menu and its callback. Although at the time of this writing (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uxp-4.4.2-PR-6039.17&lt;/code&gt; in Photoshop 2021 v.22.3 release) many of the hooks aren’t functional yet, let me show you how to use it.&lt;/p&gt;

&lt;p&gt;First you need to require &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uxp&lt;/code&gt; and use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;entrypoints.setup()&lt;/code&gt; method, that accepts an object.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// index.js&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;entrypoints&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;uxp&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;entrypoints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;panels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You’re allowed to call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setup()&lt;/code&gt; only once in your code, otherwise an error will be thrown. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plugin&lt;/code&gt; property contains lifecycle hooks on the plugin level, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;destroy&lt;/code&gt;. Neither of them work so let’s skate over this; I won’t talk about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;commands&lt;/code&gt; either (see &lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-4-commands-panels-manifest.html&quot;&gt;episode #04&lt;/a&gt; if you need to catch up), so let’s focus on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;panels&lt;/code&gt; entry.&lt;/p&gt;

&lt;h3 id=&quot;panels-lifecycle-hooks&quot;&gt;Panel’s lifecycle hooks&lt;/h3&gt;

&lt;p&gt;As I’ve already mentioned in this series, a single UXP plugin can contain more than one panel. Each panel can have its own &lt;em&gt;panel level&lt;/em&gt; entrypoint:  in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;panels&lt;/code&gt; object you should identify them through their &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt;, that you’ve set in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manifest.json&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;manifest.json&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;com.davidebarranca.flyout&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;UXP Flyout example&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;index.html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;host&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;PS&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;minVersion&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;22.0.0&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;manifestVersion&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;entrypoints&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;panel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;vanilla&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;*/&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;*/&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we have only one panel, with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; equal to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vanilla&lt;/code&gt;, so the code in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;entrypoints&lt;/code&gt; becomes:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// index.js&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;entrypoints&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;uxp&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;entrypoints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;destroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// NOT WORKING&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;panels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;vanilla&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Lifecycle hooks&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){},&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// NOT WORKING&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;hide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){},&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// NOT WORKING&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;destroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){},&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// NOT WORKING&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){},&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// callback when panel is made visible&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Flyout menu&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;menuItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// Flyout menu's structure&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;invokeMenu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){},&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// callback for Flyout menu click events&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you see, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hide&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;destroy&lt;/code&gt; hooks (theoretically for when the panel is created the first time, hidden or destroyed) don’t fire yet. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;show&lt;/code&gt; runs fine instead, but only once (so it’s kind of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create&lt;/code&gt; I suppose).&lt;/p&gt;

&lt;h3 id=&quot;panels-flyout-menu&quot;&gt;Panel’s Flyout menu&lt;/h3&gt;

&lt;p&gt;The actual Flyout menu stuff we’re interested about is in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;menuItems&lt;/code&gt; array, and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;invokeMenu&lt;/code&gt; callback. Let’s start with the former: the code to produce the Flyout from the first screenshot in this article is as follows.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// index.js&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;entrypoints&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;uxp&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;entrypoints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;panels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;vanilla&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;menuItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// by default all items are enabled and unchecked&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Preferences&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;submenu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;bell&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;🔔  Notifications&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;dynamite&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;🧨  Self-destruct&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;spacer&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// SPACER&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;enabler&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Enable  🧨&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;toggle&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Toggle me!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;checked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;about&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;About&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;reload&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Reload this panel&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let me walk you through the code. The structure is basically JSON: everything in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;menuItems&lt;/code&gt; array will turn into a Flyout menu item, in the example we’ve got eight of them. Items are objects with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;label&lt;/code&gt; property (please note that emoji do work there 🐋), and an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; where it makes sense. I’ve omitted the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; in the first object labelled &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;Preferences&quot;&lt;/code&gt;, because this acts as a container: in fact it has a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;submenu&lt;/code&gt; property, which holds another array of objects, each one provided with both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;label&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Non-submenu items have the optional &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enabled&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;checked&lt;/code&gt; properties. By default, i.e. if you don’t explicitly set them, they’re always enabled and unchecked. Spacers are available too, you create them setting the label to a single minus &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&lt;/code&gt;, then they get expanded to a full line and disabled by default.&lt;/p&gt;

&lt;p&gt;Let me paste again the menu here to show what I’m after (keep in mind it’s just a dummy menu):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/04/Panel.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We have a “Preferences” menu, that contains two items. One of which is disabled (too dangerous!): clicking the “Enable 🧨” entry will re-enable it—actually it’s slightly more complex but we’ll see that in a minute.&lt;/li&gt;
  &lt;li&gt;The “Toggle me!” item will check and uncheck itself.&lt;/li&gt;
  &lt;li&gt;“About” is going to fire a popup dialog (I’ll use a very lame &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alert&lt;/code&gt; instead), but it’s there as a placeholder for any kind of scripting code you may want to run&lt;/li&gt;
  &lt;li&gt;“Reload this panel” is a handy utility that will do what it suggests.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As is, the menu is shown when accessed from the UI, but it lacks any interactivity. This is why we also need the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;invokeMenu&lt;/code&gt; callback.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// index.js&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;entrypoints&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;uxp&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;entrypoints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;panels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;vanilla&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;menuItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;invokeMenu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Clicked menu with ID&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Storing the menu items array&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;menuItems&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;entrypoints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getPanel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;vanilla&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;enabler&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;menuItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;dynamite&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;enabled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
              &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;menuItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;dynamite&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;menuItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
              &lt;span class=&quot;nx&quot;&gt;menuItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Enable  🧨&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
                                             &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Disable  🧨&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                                             &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Enable  🧨&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;toggle&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;menuItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;checked&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;menuItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;checked&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;reload&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;about&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;showAbout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;One thing to notice is that we have one callback, that receives the item’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; as the only parameter: so it makes sense to use a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch&lt;/code&gt; statement with multiple cases.&lt;/p&gt;

&lt;p&gt;Let me start with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;toggle&quot;&lt;/code&gt;, which is simpler: it toggles its own &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;checked&lt;/code&gt; property. In order to reference itself, it uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getItem()&lt;/code&gt; method of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;menuItems&lt;/code&gt; array, which in turn you retrieve with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;entrypoints.getPanel()&lt;/code&gt; function, passing the panel &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; (the one in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manifest.json&lt;/code&gt;, here &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vanilla&lt;/code&gt;). So in the end it should be like:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;entrypoints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getPanel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;vanilla&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;menuItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;toggle&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In my code I’ve stored the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;menuItems&lt;/code&gt; in a constant in advance, for convenience: I’m going to need it multiple times. Also, there’s no need to explicitly write &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;toggle&quot;&lt;/code&gt;, as we already are in the case where this is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To recap, you &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getPanel()&lt;/code&gt; from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;entrypoints&lt;/code&gt; via the panel &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt;, then you access the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;menuItems&lt;/code&gt; array from the panel, then you &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getItem()&lt;/code&gt; from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;menuItems&lt;/code&gt; via the item’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt;. Finally you access the property that you need (here &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;checked&lt;/code&gt;) and assign the new value.&lt;/p&gt;

&lt;p&gt;A slightly more complex example is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;enabler&quot;&lt;/code&gt;, that toggles the boolean for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;dynamite&quot;&lt;/code&gt;’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enabled&lt;/code&gt; property. In doing so, it also change it’s own &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;label&lt;/code&gt; (it toggles between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;Enable 🧨&quot;&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;Disable 🧨&quot;&lt;/code&gt;). I’m not sure whether it’s really crucial from the UX point of view, but it was a nice way to show it’s possible to change labels too. Same &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;menuItems.getItem()&lt;/code&gt; dance than before.&lt;/p&gt;

&lt;p&gt;The remaining two cases are the simplest ones: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;reload&quot;&lt;/code&gt; runs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;window.location.reload()&lt;/code&gt; to refresh the panel’s view, while &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;about&quot;&lt;/code&gt; calls the external function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;showAbout()&lt;/code&gt;, that is nothing but a bare wrapper for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;showAlert()&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;photoshop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;photoshop&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;showAbout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;photoshop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;showAlert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Hello everyone 🧢&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;This could also be a dialog...&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;See Episode #10&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the real world, this could be a fully fledged dialog (see &lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-10-Dialogs.html&quot;&gt;episode #10&lt;/a&gt;), or any command tapping directly into the host application Scripting API.&lt;/p&gt;

&lt;h2 id=&quot;recap&quot;&gt;Recap&lt;/h2&gt;

&lt;p&gt;Flyout menus are a quite convenient way to group commands and information, and it’s not really difficult to build them. Items are stored in a JSON structure: they’ve properties such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;label&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enabled&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;checked&lt;/code&gt;, and can be nested in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;submenu&lt;/code&gt;s. A single handler function deals with user interaction via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; of the clicked items. We’ve seen how to check/uncheck items, as well as enable/disable and change the labels too.&lt;/p&gt;

&lt;p&gt;Flyouts are set up in the UXP plugin’s Entrypoints, a special object that is used to define lifecycle hooks both on the plugin’s and panel’s level (most of which aren’t functional yet, but they will in the future), commands (in conjunction with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manifest.json&lt;/code&gt;), and the flyout itself.&lt;/p&gt;

&lt;p&gt;Thanks for following along! If you find this content useful, &lt;em&gt;please consider supporting me&lt;/em&gt;: you can either purchase my latest &lt;a href=&quot;https://www.ps-scripting.com/uxp-react.html&quot;&gt;UXP Course&lt;/a&gt; or &lt;a href=&quot;https://bit.ly/unDavide&quot;&gt;donate what you want&lt;/a&gt; as the following fine people have done—it’ll be much appreciated! 🙏🏻&lt;/p&gt;

&lt;p&gt;Thanks to: John Stevenson ⭐️, Adam Plouff, Dana Frenklach, Dmitry Egorov, Roberto Sabatini, Carlo Diamanti, Wending Dai, Pedro Marques, Anthony Kuyper, Gabriel Correia, Ben Wright, CtrlSoftware, Maiane Araujo, Mihály Dávid Paseczki.&lt;/p&gt;

&lt;form action=&quot;https://www.paypal.com/donate&quot; method=&quot;post&quot; target=&quot;_top&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;hosted_button_id&quot; value=&quot;37N4GHTNJK8YE&quot; /&gt;
&lt;input type=&quot;image&quot; src=&quot;https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif&quot; border=&quot;0&quot; name=&quot;submit&quot; title=&quot;PayPal - The safer, easier way to pay online!&quot; alt=&quot;Donate with PayPal button&quot; /&gt;
&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;https://www.paypal.com/en_IT/i/scr/pixel.gif&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;
&lt;/form&gt;

&lt;p&gt;Stay safe, get the vaccine shot if/when you can – bye!&lt;/p&gt;

&lt;h2 id=&quot;the-whole-series-so-far&quot;&gt;The whole series so far&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know.html&quot;&gt;#01 – Rundown on the UXP announcement @ the Adobe MAX 2020&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-2-documentation.html&quot;&gt;#02 - Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-3-UXP-developer-tool.html&quot;&gt;#03 - UXP Developer Tool&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-4-commands-panels-manifest.html&quot;&gt;#04 - Commands vs. Panels and the manifest.json&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-5-async-vs-sync-in-photoshop-dom-scripting.html&quot;&gt;#05 - Sync vs. Async code in Photoshop DOM Scripting&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-6-BatchPlay-part-1-ActionManager-roots.html&quot;&gt;#06 - BatchPlay (part 1): the ActionManager roots&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-7-BatchPlay-part-2-Alchemist-plugin-listener.html&quot;&gt;#07 - BatchPlay (part 2): Alchemist as a UXP Script Listener&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-8-BatchPlay-part-3-Alchemist-plugin-inspector.html&quot;&gt;#08 - BatchPlay (part 3): Alchemist as a UXP Inspector&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-9-Adobe-Spectrum-UXP.html&quot;&gt;#09 - Adobe Spectrum UXP&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-10-Dialogs.html&quot;&gt;#10 - Modal Dialogs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-11-Flyout-menus.html&quot;&gt;#11 - Flyout Menus and Entrypoints&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-12-React-JS.html&quot;&gt;#12 - React JS and the UXP plugins Course&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:command&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;If you need a reminder, a Command is a GUI-less script that belongs to the plugin’s “Plugins” menu and is set via the Manifest. Look back to &lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-4-commands-panels-manifest.html&quot;&gt;Episode #04 - Commands vs. Panels and the manifest.json&lt;/a&gt;. &lt;a href=&quot;#fnref:command&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 17 Apr 2021 00:00:00 +0200</pubDate>
        <link>http://localhost:4000/development/Adobe-UXP-things-you-need-to-know-11-Flyout-menus.html</link>
        <guid isPermaLink="true">http://localhost:4000/development/Adobe-UXP-things-you-need-to-know-11-Flyout-menus.html</guid>
        
        <category>UXP</category>
        
        
        <category>Development</category>
        
      </item>
    
      <item>
        <title>Frequency Separation 2021</title>
        <description>&lt;script type=&quot;application/ld+json&quot;&gt;
{
  &quot;@context&quot;: &quot;http://schema.org&quot;,
  &quot;@type&quot;: &quot;Article&quot;,
  &quot;mainEntityOfPage&quot;: {
    &quot;@type&quot;: &quot;WebPage&quot;,
    &quot;@id&quot;: &quot;https://www.davidebarranca.com/retouching/frequency-separation-2021&quot;
  },
  &quot;headline&quot;: &quot;Frequency Separation 2021&quot;,
	&quot;keywords&quot;: &quot;frequency separation, photoshop&quot;,
  &quot;image&quot;: [
    &quot;https://www.davidebarranca.com/wp-content/uploads/2021/03/fs/MediaCard.jpg&quot;,
    &quot;https://www.davidebarranca.com/wp-content/uploads/2021/03/fs/GaussianPyramid2.jpg&quot;,
    &quot;https://www.davidebarranca.com/wp-content/uploads/2021/03/fs/GaussianPyramid3.jpg&quot;
   ],
  &quot;dateCreated&quot;: &quot;2021-03-10&quot;,
  &quot;datePublished&quot;: &quot;2021-03-13&quot;,
  &quot;dateModified&quot;: &quot;2021-03-13&quot;,
  &quot;author&quot;: {
    &quot;@type&quot;: &quot;Person&quot;,
    &quot;name&quot;: &quot;Davide Barranca&quot;
  },
	&quot;publisher&quot;: {
    &quot;@type&quot;: &quot;Person&quot;,
    &quot;name&quot;: &quot;Davide Barranca&quot;
  },
  &quot;description&quot;: &quot;A detailed overview of a variety of Frequency Separation techniques in Photoshop, updated to the year 2021&quot;
}
&lt;/script&gt;

&lt;p&gt;A long (long) time ago I wrote an essay on Frequency Separation, even if the main subject was disguised in the more approachable title “Notes on Sharpening”. That was early 2009, way before Frequency Separation was cool, then popularized/mainstream, then possibly cool again. I’ve thought to revisit the original article to give the subject a new coat of 2021 paint, plus all sorts of new detours.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spoiler alert&lt;/strong&gt;: I’m interested in Frequency Separation as a tool for a broader set of manipulations not limited to, nor particularly focused on, beauty/skin retouch.&lt;/p&gt;

&lt;h2 id=&quot;1-frequencies&quot;&gt;1. Frequencies&lt;/h2&gt;

&lt;p&gt;I assume that you already know what we’re talking about, TL;DR any signal, e.g. a sound wave no matter how complex can be built composing &lt;em&gt;“pure”&lt;/em&gt; frequencies.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/fs/freq.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Low frequencies are at the bottom, high on top, black is the result. If you want to understand the concept better, &lt;a href=&quot;https://www.jezzamon.com/fourier/index.html&quot;&gt;this article&lt;/a&gt; goes in much more detail and will blow your mind too.&lt;/p&gt;

&lt;p&gt;In the more familiar realm of images, you can think of high frequencies as describing thin detail (given a defined area, &lt;em&gt;a lot of stuff happens there&lt;/em&gt;), while low frequencies are in charge of spatially &lt;em&gt;slower changes&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/fs/freq-img.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-basic-frequency-separation&quot;&gt;2. Basic frequency separation&lt;/h2&gt;

&lt;p&gt;As opposed to the signal wave example, with images we usually deal with &lt;em&gt;frequency ranges&lt;/em&gt;. When you filter with Gaussian Blur (Filter &amp;gt; Blur &amp;gt; Gaussian Blur, GB from now on) e.g. radius 10px, you’re getting rid of all the high frequencies (i.e. detail) that &lt;em&gt;belong to&lt;/em&gt; the smaller-than-10px range. Whereas if you High-Pass (Filter &amp;gt; Others &amp;gt; High Pass, HP from now on) with the same radius you’re doing the opposite: you’re left with everything that belongs to the smaller-than-10px range (only the high frequencies are allowed to pass – hence the filter name).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/fs/GBlurHP.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ve picked &lt;a href=&quot;https://www.si.edu/object/angel%253Asaam_1929.6.112&quot;&gt;this image&lt;/a&gt; for most of the examples – it’s a 1887 painting by Abbott Handerson Thayer, a portrait of his daughter from the Smithsonian Institute collection.&lt;/p&gt;

&lt;p&gt;In the early days we used to combine the GB and HP layers (the latter in Linear Light blending mode, 50% opacity) but that’s not really precise enough for our purposes here. There are two ways to deal with a proper frequency decomposition, depending on whether the file is 16bit or 8bit.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Duplicate the original (O) twice, and call the two new layers L (low) and H (high).&lt;/li&gt;
  &lt;li&gt;Place H above L, hide H and select L.&lt;/li&gt;
  &lt;li&gt;Apply GB to L, with a radius large enough so that the detail that you want to migrate to the other layer disappears.&lt;/li&gt;
  &lt;li&gt;Select H, then Image &amp;gt; Apply Image with the following settings&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/fs/8-16bits.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Change the H blending mode to Linear Light (LL from now on)&lt;/li&gt;
  &lt;li&gt;Optionally, clip H to the L layer (Alt or Option click the line in between the L and H layers in the Layers palette)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You should end up with this simple setup:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/fs/final-2-layers-decomposition.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That is to say: the original layer, and the same built with a Low + High frequency decomposition. They are 100% identical, but why? And also, why different Apply Image settings for 8/16bit? That’s not been discussed very much (if at all): to properly understand we need to get into blending modes maths.&lt;/p&gt;

&lt;h2 id=&quot;3-blending-modes-maths&quot;&gt;3. Blending Modes maths&lt;/h2&gt;

&lt;p&gt;Blending modes are arbitrary ways to mix two layers – say a Base (B) below and an Active (A) above – according to a formula.&lt;/p&gt;

&lt;p&gt;Some blends are &lt;em&gt;easier to understand&lt;/em&gt; if applied on normalized values, i.e. in the range (0,1). As an example, Multiply is a well known darkening blending mode, but not if the multiplication is calculated with pixel values in the (0,255) range. Let’s pretend that we have the following values&lt;sup id=&quot;fnref:onechannel&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:onechannel&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

\[\require{cancel} A = 51 \\
B = 153 \\
A * B = 51 * 153 = 7.803\]

&lt;p&gt;A brightened result, that must be normalized with a 255 factor to be meaningful and appear darkened:&lt;/p&gt;

\[\frac{51 * 153}{255} = 30.6\]

&lt;p&gt;If you normalize them first it’s just the same&lt;/p&gt;

\[A = \frac{51}{255} = 0.2 \\
B = \frac{153}{255} = 0.6 \\
A * B = 0.2 * 0.6 = 0.12 \\
0.12 * 255 = 30.6\]

&lt;p&gt;When the result is out of scale it’s clipped to 0 or 255, unless further blends are to be calculated.&lt;/p&gt;

&lt;p&gt;Various online sources state that Linear Light is a mix of Linear Dodge (Add) and Linear Burn. Is it really? (Spoiler alert: nope) Let’s test it. With &lt;strong&gt;Linear Dodge (Add)&lt;/strong&gt;, the formula for the blend is &lt;strong&gt;(A + B)&lt;/strong&gt;. Being a simple addition, you can use both the normalized (0,1) or the (0,255) range: it makes no difference. Using the same values for A, B from the previous example:&lt;/p&gt;

\[A + B = 0.2 + 0.6 = 0.8 \\
0.8 * 255 = 204 \\
A + B = 51 + 153 = 204\]

&lt;p&gt;The &lt;strong&gt;Linear Burn&lt;/strong&gt; formula is &lt;strong&gt;A + B - 1&lt;/strong&gt;: an addition follwed by an inversion (white is subtracted).&lt;/p&gt;

\[A + B - 1 = 0.2 + 0.6 - 1 = -0.2 \\
A + B - 1 = 51 + 153 - 255 = -51\]

&lt;p&gt;Negative values are clipped to zero. Let me stress that “inversion” here means “subtraction with white”, which is 1 in the normalized range, and &lt;em&gt;should be&lt;/em&gt; 255 for 8bit documents (more on that later).&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Linear Light&lt;/strong&gt; formula is instead &lt;strong&gt;2A + B - 1&lt;/strong&gt;, so twice the impact for the top layer. If you draw a gradient from Black to White on a new document, duplicate the layer and change its blend mode, these are the result for Linear Dodge/Burn/Light:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/wp-content/uploads/2021/03/fs/blendingPlots.png&quot;&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/fs/blendingPlots_.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So I’m afraid no, LinearLight &lt;strong&gt;is not&lt;/strong&gt; “a combination of Linear Dodge and Linear Burn” because the slope of the curve is different. It’s not a shift of either formulas (resulting in A + B - 0.5), which would have in fact pivoted the line around (0.5, 0.5). With Linear Light the slope is steeper – and in fact the formula is 2A + B -1.&lt;/p&gt;

&lt;p&gt;Now that we’ve got this, let’s try to understand why Linear Light works with the kind of Apply Image that we’ve used. There’s nothing inherently “frequency separation-y” with Linear Light, it just happens to combine perfectly with the sort of Image Calculations we’ve performed. We’ll start with the 8bit version, and move to the 16bit next.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/wp-content/uploads/2021/03/fs/formula-8bit.png&quot;&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/fs/formula-8bit_.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Apply Image step was the Original minus the Blurred (hence the Subtract mode) with Scale 2 (meaning divided by 2) and Offset (i.e. plus) 128 that is normalized to 0.5. All this is equal to the grayish detail layer, which is then set to Linear Light blending mode: being on top, let’s call it A. The layer below (B) is the Original, and the blend formula for Linear Light is 2A + B - 1. Let’s substitute A with (Original - Blur)/2 + 0.5 in the formula and you see that everything simplifies to Original, QED.&lt;/p&gt;

&lt;p&gt;In other words, we’ve demonstrated why this particular Subtraction (with Scale 2, Offset 128) perfectly combines with the Linear Light blending mode to return an identical copy of the original. Cool!&lt;/p&gt;

&lt;p&gt;Let’s see how the theory works with 16 bit files and its different Apply Image.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/wp-content/uploads/2021/03/fs/formula-16bit.png&quot;&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/fs/formula-16bit_.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we’re Adding to the Original the inverted Blurred (hence 1 minus Blurred, this is how you invert pixels), scaling 2 (i.e. divided by 2). This is again the detail layer then set to Linear Light mode: we call this A, and B is the Original. Applying the same blending formula 2A + B - 1 we can substitute A in it and everything simplifies to the Original. Great!&lt;/p&gt;

&lt;p&gt;So it’s not that Linear Light is a magic blend mode, nor that it fits Frequency Separation. The Apply Image settings happen to work with Linear Light in returning the original values.&lt;/p&gt;

&lt;p&gt;Then… why two different methods with 8bit/16bit documents? You’re ready for some bit depth Maths.&lt;/p&gt;

&lt;h2 id=&quot;4-8bit-vs-16bit-maths&quot;&gt;4. 8bit vs. 16bit Maths&lt;/h2&gt;

&lt;p&gt;For 8bit images, pixel values are in 2^8 = 256 range, i.e. &lt;strong&gt;(0,255)&lt;/strong&gt;. Black is zero, White is two-hundred-fifty-five. You might be tempted to assume that 16bit works the same, but it turns out that Adobe Photoshop’s 16bit is in fact &lt;strong&gt;15bit + 1&lt;/strong&gt;, meaning 2^15 + 1 = 32768 + 1 = 32769, expressed in the range &lt;strong&gt;(0,32768)&lt;/strong&gt;. Why? The accepted answer is that &lt;em&gt;“this gives a midpoint to the range (very useful for blending), and allows for faster math because we can use bit shifts instead of divides”&lt;/em&gt; (&lt;a href=&quot;https://web.archive.org/web/20181204083457if_/https://forums.adobe.com/thread/792212&quot;&gt;source&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&quot;41-8bit-special-inversion&quot;&gt;4.1 8bit special inversion&lt;/h3&gt;

&lt;p&gt;I’ve tried to reverse engineer the way Photoshop handles pixel calculations, and there is something interesting going on here. Let’s create a dummy test document, 8bit.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/fs/PS_LL1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you see I’ve created two layers, solid 102,102,102. When the topmost is in Linear Light I would expect the blend to be 2A + B - 1, where 1 is the highest value possible in the (0,255) 8bit range, that is to say White: 255. Hence the formula would give:&lt;/p&gt;

\[LL = 2A + B - 1 = 2 * 102 + 102 - 255 = 51\]

&lt;p&gt;Alas, &lt;a href=&quot;https://youtu.be/0n_Ty_72Qds&quot;&gt;“computer says no”&lt;/a&gt;, and PS calculates &lt;strong&gt;50&lt;/strong&gt;. There are no divisions here, so I wouldn’t expect rounding errors of any sort, it’s quite straightforward. I’ve tested it with a bunch of different pixel values for the top and bottom layers, and the result is &lt;em&gt;always off by 1&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Out of curiosity I’ve tested &lt;strong&gt;Affinity Photo&lt;/strong&gt; and it works as I’d expect:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/fs/AP_LL1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The only explanation is that Photoshop &lt;strong&gt;subtracts 256 instead of 255&lt;/strong&gt;. This is in fact the case, and the &lt;a href=&quot;https://feedback.photoshop.com/conversations/photoshop/linear-light-8bit-math-off-by-1/6017e8a5b03192438cda1120&quot;&gt;reason&lt;/a&gt; is that otherwise there would be no neutral color in Linear Light with 8bit documents.&lt;/p&gt;

\[LL = 2A + B - 1\]

&lt;p&gt;A is the layer above, the one which middle gray is meant to be “neutral” (have no effect) in the blend. Let’s rewrite it as:&lt;/p&gt;

\[LL = B + (2A - 1) \\
LL = B + \Delta A\]

&lt;p&gt;Where:&lt;/p&gt;

\[\Delta A = 2A - 1\]

&lt;p&gt;There must be a value of A (the neutral, mid-gray) such that deltaA is equal to zero. But using 255 as the white, zero is nowhere to be found.&lt;/p&gt;

\[A = 128 \\
\Delta A = 2 * 128 - 255 = 1\]

\[A = 127 \\
\Delta A = 2 * 127 - 255 = -1\]

&lt;p&gt;Instead, if you subtract 256 the neutral value happens to be 128, which is in fact the proper mid-gray value in use:&lt;/p&gt;

\[A = 128 \\
\Delta A = 2 * 128 - 256 = 0\]

&lt;p&gt;&lt;strong&gt;This is true for 8bit documents only&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For 16bit documents, given their particular nature of 15bit + 1, there are 32769 values in the (0, 32768) range, hence no need to tweak the white subtraction. In fact, the used value is the proper 32768.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/fs/PS_LL2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

\[LL = 2A + B - 1 = 2 * 13107 + 13107 - 32768 = 6553\]

&lt;h3 id=&quot;42-image-calculations-8bit&quot;&gt;4.2 Image Calculations: 8bit&lt;/h3&gt;

&lt;p&gt;I’ve created an edge and noted the pixel values for the Original layer that you can see either in the Info palette for the two color samplers and in the layer name as well. I’ve also added a Blurred (2px radius) layer – trust me the color sampler values are ones in the Layers palette.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/fs/8bitMath1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s crank some numbers and see if we’re able to calculate the Apply Image value.&lt;/p&gt;

&lt;p&gt;Please note this is an 8bit file, so let’s start with the recommended calculation, a &lt;strong&gt;Subtraction with Scale 2 and Offset 128&lt;/strong&gt;.&lt;/p&gt;

\[O = 153 \\
GB = 112\]

\[Apply Image = \frac{O - GB}{2} + 128 =  \frac{153 - 112}{2} + 128 =  \frac{41}{2} + 128\]

&lt;p&gt;Let me pause for a moment: 41/2 here is equal to 20, for there’s no such a thing as 20.5 in the integers (0,255) range – more on rounding in a minute.&lt;/p&gt;

\[Apply Image = 20 + 128 = 148\]

&lt;p&gt;Which is exactly the correct value that Photoshop comes up with:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/fs/8bitMath2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A quick check for the darker values too:&lt;/p&gt;

\[O = 51 \\
GB = 92\]

\[Apply Image = \frac{51 - 92}{2} + 128 = \frac{-41}{2} + 128 = -20 + 128 = 108\]

&lt;p&gt;Which is exactly what you can see in the Info palette above. We’ve confirmed the Apply Image result.&lt;/p&gt;

&lt;p&gt;Now it’s kinda easy, we need to apply the Linear Light formula (2A + B - 1), where A is the value we’ve calculated, B is the Blurred, and 1 is the “special” white that Adobe uses for 8bit Linear Light, i.e. 256.&lt;/p&gt;

&lt;p&gt;Lighter values on the left:&lt;/p&gt;

\[LL = 2 * 148 + 112 - 256 = 152\]

&lt;p&gt;Darker values on the right:&lt;/p&gt;

\[LL = 2 * 108 + 92 - 256 = 52\]

&lt;p&gt;Photoshop confirms:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/fs/8bitMath3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So we’re off one point in both dark and light side. I’ve noted all the values along the 10 pixels the image is wide:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/fs/8bitSubtraction.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Why two different tables? Because Photoshop &lt;strong&gt;rounds values to the integer in an inconsistent way&lt;/strong&gt; – or at least in a way for which I haven’t been able to find the rule. The table above shows the &lt;em&gt;“theoretical values”&lt;/em&gt; (floats, which would lead to zero errors everywhere), while the bottom one is filled with the actual readings. I say PS rounds &lt;em&gt;inconsistently&lt;/em&gt; because for reasons unknown to me the first five values in the Subtraction row are rounded down (130.5 $ \to $ 130, the floor), while the last five values are rounded up (125.5 $ \to $ 126, the ceiling). Go figure.&lt;/p&gt;

&lt;p&gt;All in all, for 10 pixels we’ve got 4 off by 1 (in absolute value), so a &lt;strong&gt;total error of 4&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let’s try with the same 8bit document, but with the  16bit Calculations instead (the &lt;strong&gt;Addition of the inverted, Scaled 2&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/fs/8bitAddition.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The results are much worse. On the one hand there are the same weird behaviour mixing ceiling and floor rounding. On the other hand, the theoretical error is more than twice the real error for the Subtraction calculation, and 4 times that in the actual document!&lt;/p&gt;

&lt;p&gt;Even when rounding is not needed (e.g. for pixels 3, 4, 7, 8, 10) the theoretical value is always off by 1. My understanding is that the special white value (256 instead of 255) used in the LL blend is compensated with the 128 offset in the Subtraction method only. Why some values are even worse in the actual readings (same pixels 3, 4, 7, 8, 10) I have no explanation for. But the experimental result is that Addition in an 8bit file results in a greater error, 4 times the Subtraction’s.&lt;/p&gt;

&lt;h3 id=&quot;43-image-calculations-16bit&quot;&gt;4.3 Image Calculations: 16bit&lt;/h3&gt;

&lt;p&gt;I’ve set up a similar document, but 16bit (with the sampler set to read 16bit values):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/fs/16bitPhotoshop.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let me show you the spreadsheets for the recommended 16bit calculation, &lt;strong&gt;Addition of the inverse, Scaled 2&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/fs/16bitAddition.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here the theoretical error is always zero, whereas the actual document shows minimal deviation. Different story if you try the recommended Apply Image settings for 8bit, the &lt;strong&gt;Subtraction with Scale 2 and 128 Offset&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/fs/16bitSubtraction.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here the error is much greater: I’d say due to the fact that 128 translates (in 16bit) to 16448. Try adding a 128 solid color layer and measure it in Photoshop with the color sampler set to 16bit, this is the value you’re going to get. My interpretation of the experimental results is that the difference is due to the mismatch between the theoretical middle-gray offset for 16bit documents (16384) and the one used in Apply Image (16448) – where you have to enter an 8bit number even if the document is 16bit.&lt;/p&gt;

&lt;p&gt;Mind you: 1280 seems to be a much bigger error than the 16 points of the 8bit Addition case, but it’s actually lower: it’s a 4% error, compared to 6% of the 8bit.&lt;/p&gt;

&lt;p&gt;Fun fact: in 16bit documents, it seems that rounding is always floor in the Addition, ceiling in the Subtraction.&lt;/p&gt;

&lt;p&gt;There still are some points for which I haven’t a proper explanation:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Why there are differences between theoretical and actual readings even with non rounded values.&lt;/li&gt;
  &lt;li&gt;How can PS rounds using both floor or ceiling values for x.5 numbers.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All in all, the above experiment proves that no method hits the bull’s eye but the measured errors are smaller when using Subtraction with Scale 2 and 128 Offset on 8bit documents and Addition of the inverse with Scale 2 on 16bit documents.&lt;/p&gt;

&lt;h3 id=&quot;44-high-pass&quot;&gt;4.4 High Pass&lt;/h3&gt;

&lt;p&gt;Before going any further, let me point out that the &lt;strong&gt;High Pass&lt;/strong&gt; filter doesn’t output the same Detail layer as the decomposition we’ve performed.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/wp-content/uploads/2021/03/fs/HighPass.jpg&quot;&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/fs/HighPass_.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the left you see the Detail layer, center the High Pass with same radius as the Gaussian Blur (much stronger effect). Right, putting the HP layer half opacity on top of a mid-gray layer (Edit &amp;gt; Fill &amp;gt; 50% Gray). Apparently it’s now identical: if you put the HP on top of the Detail, Difference blending mode, the result is full black and both Mean and Std Deviation (from the Histogram palette) are equal to zero. This for a 16bit file, while an 8bit file shows 0.50. In both cases, an extreme contrasting curve shows noise, which in the 16bit case might be just rounding errors (not so sure about the 8bit one).&lt;/p&gt;

&lt;p&gt;All in all, I will keep using the Apply Image method, especially when decomposing the image for retouching purposes.&lt;/p&gt;

&lt;h2 id=&quot;5-single-kernels&quot;&gt;5. Single Kernels&lt;/h2&gt;

&lt;p&gt;In my experience, Photoshop people tend to think about Frequency Separation mainly as a retouching tool. Sure the image decomposition helps targeting the retouching process in ways and with such precision/ease that would be otherwise impossible, but I am personally also interested in contrast enhancements.&lt;/p&gt;

&lt;h3 id=&quot;51-gaussian-kernel&quot;&gt;5.1 Gaussian kernel&lt;/h3&gt;

&lt;p&gt;As soon as you’re able to separate frequency ranges into their own layers, they can be successfully used to enhance or dampen those features in the original image. Gaussian Sharpening is a classic example: without entering the details of the three parameters of the UnSharpMask filter here, conceptually it’s &lt;em&gt;just&lt;/em&gt; a matter of creating a Gaussian separation and &lt;em&gt;adding&lt;/em&gt; the frequencies back to the original – basically discarding the Blurred layer and using the Detail one only. Exaggerated radius (40px) demonstration as follows.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/wp-content/uploads/2021/03/fs/GaussianSharpening.jpg&quot;&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/fs/GaussianSharpening_.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Several things to point out ASAP.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First, a “Gaussian separation” means a Frequency Separation that uses the Gaussian Blur filter. As we’ll see in a short while, we’re not limited to that at all.&lt;/li&gt;
  &lt;li&gt;Second, “adding back” is a loose term that means putting the Detail layer (the one that’s the result of the Apply Image step) into Linear Light blending mode directly on top of the Original, discarding the Base (blurred) layer.&lt;/li&gt;
  &lt;li&gt;Third, as soon as we enter the realm of contrast enhancement we can leave the rigorous math we needed for the decomposition behind. In the image above I’ve used Linear Light at full opacity. You can experiment lowering the opacity or using different contrast blending modes&lt;sup id=&quot;fnref:hardlight&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:hardlight&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/wp-content/uploads/2021/03/fs/ContrastModes.png&quot;&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/fs/ContrastModes_.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fourth, due to the fact that Apply Image and the Linear Light blend work on a per channel basis, as a result the color is expected to be saturated and the hue sometimes shifted. The effect may be welcome or may be not. Without the need to bother with a Merge Layer on top switched then to Luminosity blending mode, you can force the Luminosity only by clipping the Detail layer to whatever blank/zeroed Adjustment Layer you want, provided that the latter (only) is set in Luminosity, while the Detail layer is whatever contrast blending mode you like.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/wp-content/uploads/2021/03/fs/Luminosity.jpg&quot;&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/fs/Luminosity_.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a little known technique that lets you mix blending modes in a very fast and cheap (in terms of filesize) way.&lt;/p&gt;

&lt;p&gt;Alternatively, you can slightly tweak the procedure. If after the Gaussian Blur you Edit &amp;gt; Fade Gaussian Blur… and set it to “Luminosity” you end up with a weird looking blurred thing.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/wp-content/uploads/2021/03/fs/LuminosityBlur.jpg&quot;&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/fs/LuminosityBlur_.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When using that one for the Image Apply step, then the resulting Detail layer is completely desaturated, hence the result when applying it back to the original has the same effect as retaining only the Luminosity part.&lt;/p&gt;

&lt;p&gt;It’s quite important that you understand how the above works. We’ve subtracted a Blurred version from the Original, in order to get the gray-blob that I’ve called the Detail layer.&lt;/p&gt;

\[D = O - GB\]

&lt;p&gt;Where D is Detail, O is Original, and GB stands for Gaussian Blur (the blurred layer). If the GB is blurred in the Luminosity only, then:&lt;/p&gt;

\[D_{lum} = O - GB_{lum}\]

&lt;p&gt;Finally, nothing prevents you to use the regular decomposition and retain the color only, in order to emphasize a more impressionistic effect – some sort of
&lt;em&gt;Michel Eugène Chevreul influenced simultaneous contrast boosted&lt;/em&gt; look.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/wp-content/uploads/2021/03/fs/Color.jpg&quot;&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/fs/Color_.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to mix different amounts of Color and Luminosity for greater control. Also note that if you invert the Detail layer you get the opposite effect: dampening that frequency range rather than enhancing them. It’s of little use with a &lt;em&gt;Gaussian kernel&lt;/em&gt; (a decomposition which is based on a Gaussian Blur filter) because it would just return a blurred version:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/wp-content/uploads/2021/03/fs/Blurred.jpg&quot;&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/fs/Blurred_.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But with other kernels (especially mixed ones) and varying the opacity it can lead to very interesting results.&lt;/p&gt;

&lt;h3 id=&quot;52-non-gaussian-kernels&quot;&gt;5.2 Non-Gaussian kernels&lt;/h3&gt;

&lt;p&gt;There’s nothing special in the Gaussian Blur filter when it comes to image decomposition as we’ve seen it so far. Provided that you subtract&lt;sup id=&quot;fnref:subtract&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:subtract&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; the Original with the &lt;em&gt;“processed”&lt;/em&gt; version and you put the result on top of the filtered in Linear Light, you’re going to get the Original back. You can try silly filters if you want:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/wp-content/uploads/2021/03/fs/Crystallize.jpg&quot;&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/fs/Crystallize_.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can even throw in something totally unrelated and it’ll work all the same.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/wp-content/uploads/2021/03/fs/Moss.jpg&quot;&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/fs/Moss_.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Think about the Apply Image step like noise cancelling headphones: you’re somehow factoring out the “interference” (the &lt;em&gt;altered image&lt;/em&gt;) and find a signal that, combined with it, returns the frequencies you want to hear.  All those weird filters have no use, but to help you get the point.&lt;/p&gt;

&lt;p&gt;At this point you should have built the intuition that what the &lt;em&gt;kind of detail&lt;/em&gt; that the kernel destroys, is the kind of stuff that migrates in the Detail layer and you’ll be able to enhance/retouch in the original image. One well-known kernel used in such decompositions is the &lt;strong&gt;Bilateral Filter&lt;/strong&gt;, a.k.a. the Surface Blur. Killing (in theory) everything but edges, you can expect that it’s going to enhance Textures and leave Edges more or less alone.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/wp-content/uploads/2021/03/fs/SurfaceBlur.jpg&quot;&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/fs/SurfaceBlur_.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The result is not meant to be pretty here: it illustrates the point, and it’s yet another item in your toolbox to grab when the right image comes along. Please remember that these two-layers decompositions can be used for retouching purposes with a Base (blurred) + Detail layer, so it can be interesting, depending on the image, to be able to target fine textures and leave edges alone.&lt;/p&gt;

&lt;p&gt;Another quite common kernel is the &lt;strong&gt;Median&lt;/strong&gt;, mostly because it suits retouchers when they need to address the Detail layer:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/wp-content/uploads/2021/03/fs/Median.jpg&quot;&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/fs/Median_.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But even weird kernels can lead to surprisingly interesting results. For instance &lt;strong&gt;Maximum&lt;/strong&gt; (dilation filter) that expands the maximum values of a round (or square) region of pixels; resulting in a visually lighter image, we know that the result of the Detail layer application is the opposite: darkened. As follows a 2px radius, with the Detail in Linear Light 50% opacity.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/wp-content/uploads/2021/03/fs/Maximum.jpg&quot;&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/fs/Maximum_.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Similarly, the &lt;strong&gt;Minimum&lt;/strong&gt; (erosion) darkens the intermediate hence it’ll lighten the composite:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/wp-content/uploads/2021/03/fs/Minimum.jpg&quot;&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/fs/Minimum_.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Speaking of Sharpening, you can get fancy with all sort of Blur kernels (e.g. the ones in the Filters’ Blur Gallery). In the following example I’ve created a new Channel with a gradient that it’s used to apply a Lens Blur filter nicely faded in around the eyes region only. The resulting Detail layer is able to apply a sharpening effect that fades in a way so natural that no layer mask would ever be able to replicate.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/wp-content/uploads/2021/03/fs/LensBlur.jpg&quot;&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/fs/LensBlur_.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;6-multiple-kernels&quot;&gt;6. Multiple Kernels&lt;/h2&gt;

&lt;h3 id=&quot;61-polyfiltered-detail-layers&quot;&gt;6.1 Polyfiltered Detail layers&lt;/h3&gt;

&lt;p&gt;Nothing prevents you from using more than one filter (applied on top of the previous one) to build the layer that will be used to extract the Detail. In the following example I’ve used the Oil Paint filter plus a Smart Blur round.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/wp-content/uploads/2021/03/fs/Oil.jpg&quot;&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/fs/Oil_.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That still makes a perfectly valid candidate for a two-layers frequency separation that can be used for both retouching or contrast enhancement. Possibilities are endless, provided that you’re able to invent ways to destroy the kind of detail that you want to migrate to a separate layer.&lt;/p&gt;

&lt;p&gt;Leaving for the moment the field of perfect decomposition stacks of one base, filtered layer plus the Apply Image on top, there are ways to build &lt;em&gt;interesting&lt;/em&gt; Detail layers for contrast enhancement purposes. Later on we’ll learn how to bring them back to decomposition stacks.&lt;/p&gt;

&lt;h3 id=&quot;62-difference-of-gaussians&quot;&gt;6.2 Difference of Gaussians&lt;/h3&gt;

&lt;p&gt;So far we’ve subtracted a Blurred version from the Original, in order to get the gray-blob that I’ve called the Detail layer. In the case of the Gaussian enhancement, we’ve added the Detail back to the Original (using your preferred blend mode/opacity).&lt;/p&gt;

\[D = O - GB\]

\[Enhanced = O + D\]

&lt;p&gt;The enhancement targets the frequency range from whatever is the Gaussian Blur radius used (in my case 40px) down: so the (0,40)px range&lt;sup id=&quot;fnref:down&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:down&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;. If you think about GB as a filter that wipes out the higher-than-the-radius frequencies:&lt;/p&gt;

\[GB_{(40)} = O_{(40\to\infty)}\]

&lt;p&gt;Then you can re-write the equation as:&lt;/p&gt;

\[O_{(0\to\infty)} - O_{(40\to\infty)} = D_{(0\to40)}\]

&lt;p&gt;That is to say, the Detail layer that contains the frequencies in the range (0,40)px is obtained subtracting an image with frequencies only in the $ (40\to\infty) $ pixels range from the original image that contains all the frequencies.&lt;/p&gt;

&lt;p&gt;We’re not limited to use the Original for the subtraction. What if for instance we use two differently blurred images?&lt;/p&gt;

\[GB_{(20)} = O_{(20\to\infty)} \\
GB_{(40)} = O_{(40\to\infty)}\]

\[O_{(20\to\infty)} - O_{(40\to\infty)} = D_{(20\to40)}\]

&lt;p&gt;The result is as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/wp-content/uploads/2021/03/fs/DoG1.jpg&quot;&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/fs/DoG1_.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s a technique known as &lt;strong&gt;Difference of Gaussians&lt;/strong&gt;, or DoG.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/wp-content/uploads/2021/03/fs/DoG2.jpg&quot;&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/fs/DoG2_.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At the moment we’re not yet equipped to use this Detail layer for retouching purposes as well, but I’ll get to that in a short while. Meanwhile, feel free to experiment with different DoG values.&lt;/p&gt;

&lt;h3 id=&quot;63-edges-layer&quot;&gt;6.3 Edges layer&lt;/h3&gt;

&lt;p&gt;In the DoG example above we’ve combined two identical (Gaussian) kernels with different parameters. We may now try to combine two different kernels – it’s entirely within the realm of possibilities.&lt;/p&gt;

&lt;p&gt;We’ve already met the candidates. Surface Blur (SB) is able to discern the image content, blurring “surfaces” and not “edges”; Gaussian Blur (GB), instead, wipes out everything that is within its frequency range. With a bold leap of faith you can consider the original image (O) to be &lt;em&gt;made of&lt;/em&gt; “edges” (E) and “texture” (T): wildly unorthodox math ensues.&lt;/p&gt;

\[O = O_T + O_E\]

\[SB = O - O_T\]

\[GB = O - (O_T + O_E)\]

\[SB - GB = (O - O_T) - (O - (O_T + O_E)) =  \cancel{O} - \cancel{O_T} - \cancel{O} + \cancel{O_T} + O_E = O_E\]

&lt;p&gt;In other words: if GB subtracts both texture plus edges, and SF subtracts texture only, then if you subtract SB from GB you get a Detail layer that contains Edges only without texture. An image might help demonstrating the concept.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/wp-content/uploads/2021/03/fs/Edges.jpg&quot;&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/fs/Edges_.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This Detail layer has been built with Surface Blur (Radius 12px, Threshold 15px) and Gaussian Blur (radius 10px). The intuition is always the same: how are the two operands different? That difference is what will be enhanced.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/wp-content/uploads/2021/03/fs/Edges3.jpg&quot;&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/fs/Edges3_.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here both textures are more or less blurred the same way: they aren’t different hence they’ll stay the same. Edges (the broad strokes that draw the main traits such as eyes, nose, mouth and hair) are instead dramatically different, hence they’ll get enhanced.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/wp-content/uploads/2021/03/fs/Edges2.jpg&quot;&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/fs/Edges2_.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;7-image-decomposition&quot;&gt;7. Image decomposition&lt;/h2&gt;

&lt;p&gt;So far we have either performed frequency separations to rebuild a clone of the original image split in two layers (a filtered one, e.g. blurred, plus a difference e.g. the detail in Linear Light blend mode) or we’ve create a variety of independent detail layers for contrast enhancing purposes. It’s time to join the two worlds.&lt;/p&gt;

&lt;h3 id=&quot;71-gaussian-pyramid&quot;&gt;7.1 Gaussian pyramid&lt;/h3&gt;

&lt;p&gt;Let’s start with the familiar Gaussian kernel. If you recall, with the DoG we’ve targeted very specific frequency ranges, eg. from 40px to 20px. It’s possible to build a &lt;em&gt;pyramid&lt;/em&gt; (i.e. a multi-frequency decomposition) splitting the image into more than two layers, e.g. four. These four layers will describe and represent the original image as a sum of four frequency ranges: from “infinity” to 40px; from 40px to 15px; from 15px to 5px; from 5px to zero.&lt;/p&gt;

&lt;p&gt;The math is quite straightforward. Let’s call O the Original picture as usual, $ GB_{(n)} $ the GB ﬁlter applied with radius $ n $. We need four layers:&lt;/p&gt;

\[O, GB_{(5)}, GB_{(15)}, GB_{(40)}\]

&lt;p&gt;Let’s define differences Dn as follows:&lt;/p&gt;

\[D_1 = O - GB_{(5)} \\
D_2 = GB_{(5)} – GB_{(15)} \\
D_3 = GB_{(15)} - GB_{(40)}\]

&lt;p&gt;So the image can be decomposed into:&lt;/p&gt;

\[O = GB_{(40)} + D_1 + D_2 + D_3\]

&lt;p&gt;In fact, substituting all the elements we get:&lt;/p&gt;

\[O = \cancel{GB_{(40)}} + O - \cancel{GB_{(5)}} + \cancel{GB_{(5)}} - \cancel{GB_{(15)}} + \cancel{GB_{(15)}} - \cancel{GB_{(40)}} = O\]

&lt;p&gt;Everything simplifies and we’re left with the same original image. Let’s switch to Photoshop and try to build this pyramid: first thing, we need the original plus three progressively more blurred layers.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/wp-content/uploads/2021/03/fs/GaussianPyramid.jpg&quot;&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/fs/GaussianPyramid_.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Second, we need the $ GB_{(40)} $ and $ D_1, D_2, D_3 $. These are just Difference of Gaussians, the same DoG we’ve already encountered.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/wp-content/uploads/2021/03/fs/GaussianPyramid2.jpg&quot;&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/fs/GaussianPyramid2_.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you have all the ingredients, you can add them together via Linear Light blending.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/wp-content/uploads/2021/03/fs/GaussianPyramid3.jpg&quot;&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/fs/GaussianPyramid3_.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The result is a pixel perfect copy of the original with all the three Detail ranges exposed: $ (40\to15), (15\to5), (5\to0) $ pixels.&lt;/p&gt;

&lt;p&gt;You can now either exploit this frequency separation for retouching purposes, or add each Detail layer back to the original (with various blending modes and/or opacities) for a frequency range targeted contrast boost.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/wp-content/uploads/2021/03/fs/GaussianPyramid4.jpg&quot;&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/fs/GaussianPyramid4_.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Keep in mind that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If instead of boost, you need to decrease the impact of a particular frequency range, do invert the Detail layer.&lt;/li&gt;
  &lt;li&gt;The order of the Detail layers in the stack doesn’t really matter, you can freely mix them.&lt;/li&gt;
  &lt;li&gt;There’s no limit to the amount of Detail layers you want to create.&lt;/li&gt;
  &lt;li&gt;You can always clip a Curves adjustment if you want to perform some peculiar edit to a Detail layer.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;72-mixed-pyramids&quot;&gt;7.2 Mixed pyramids&lt;/h3&gt;

&lt;p&gt;To properly conclude, there’s still one technique that needs to be revisited and incorporated into multi-layer frequency decompositions. If you remember, not long ago we’ve mixed Gaussian and Surface Blur to obtain an “Edges” Detail layer. It may surprise you (or it may not, at this point) to know that you’re not at all forced to use the same kernel in a decomposition: you’re free to use any kernel that make sense. Let’s try to build a GB/SB pyramid!&lt;/p&gt;

&lt;p&gt;We need three layers:&lt;/p&gt;

\[O, SB_{(12,15)}, GB_{(10)}\]

&lt;p&gt;&lt;a href=&quot;/wp-content/uploads/2021/03/fs/EdgesPyramid.jpg&quot;&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/fs/EdgesPyramid.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s define differences Dn as follows:&lt;/p&gt;

\[D_1 = O - SB_{(12,15)}\]

\[D_2 = SB_{(12,15)} – GB_{(10)}\]

&lt;p&gt;So the image can be decomposed into:&lt;/p&gt;

\[O = GB_{(10)} + D_1 + D_2\]

&lt;p&gt;In fact, substituting all the elements we get:&lt;/p&gt;

\[O = \cancel{GB_{(10)}} + O - \cancel{SB_{(12,15)}} + \cancel{SB_{(12,15)}} – \cancel{GB_{(10)}} = O\]

&lt;p&gt;&lt;a href=&quot;/wp-content/uploads/2021/03/fs/EdgesPyramid2.jpg&quot;&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/fs/EdgesPyramid2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The image can be then recomposed as usual.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/wp-content/uploads/2021/03/fs/EdgesPyramid3.jpg&quot;&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/fs/EdgesPyramid3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Detail layers can be used for either retouching purposed or contrast enhancement.&lt;/p&gt;

&lt;p&gt;The general equations for the decomposition are:&lt;/p&gt;

\[U_0 = O \\
U_1 = Filter_1(O) \\
U_2 = Filter_2(O) \\
\cdots \\
U_{n-1} = Filter_{n-1}(O) \\
U_n = Filter_n(O)\]

\[D_1 = U_0 – U_1 \\
D_2 = U_1 – U_2 \\
\cdots \\
D_{n-1} = U_{n-2} – U_{n-1} \\
D_n = U_{n-1} – U_n\]

\[O = U_n + D_1 + D_2 + \cdots + D_{n-1} + D_n\]

&lt;p&gt;At this point it’s up to you to decide which kernels to mix, and for which goal. Always remember to look for filters and filter combinations/subtractions that affects the feature you’re interested into – imagination can fly high!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/fs/ORIG.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Abbott Handerson Thayer, a portrait of his daughter from the &lt;a href=&quot;https://www.si.edu/object/angel%253Asaam_1929.6.112&quot;&gt;Smithsonian Institute collection&lt;/a&gt;, 1887.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://fstoppers.com/post-production/ultimate-guide-frequency-separation-technique-8699&quot;&gt;The Ultimate Guide To The Frequency Separation Technique&lt;/a&gt; by Julia Kuzmenko McKim is a nice introductory guide to simple 2-layers decompositions.&lt;/li&gt;
  &lt;li&gt;Former Adobe’s Imaging Senior Engineer &lt;a href=&quot;https://web.archive.org/web/20181204083457if_/https://forums.adobe.com/thread/792212&quot;&gt;Chris Cox&lt;/a&gt; about the decision to use 15bit + 1.&lt;/li&gt;
  &lt;li&gt;As for why Linear Light Blend uses 256 as a white point, see &lt;a href=&quot;https://feedback.photoshop.com/conversations/photoshop/linear-light-8bit-math-off-by-1/6017e8a5b03192438cda1120&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Blend modes info are found everywhere but with various degree of precision. I’ve used&lt;br /&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Blend_modes&quot;&gt;Wikipedia&lt;/a&gt; of course, &lt;a href=&quot;https://photoblogstop.com/photoshop/photoshop-blend-modes-explained&quot;&gt;PhotoBlogStop&lt;/a&gt;, but the most interesting have been &lt;a href=&quot;http://www.murphychen.com/Talks/talks.html&quot;&gt;Murphy Chen&lt;/a&gt; (Chinese language) and &lt;a href=&quot;http://www.pegtop.net/delphi/articles/blendmodes/hardlight.htm&quot;&gt;Pegtop&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;If you’re curious, my 2009 original article can still be found &lt;a href=&quot;https://www.knowhowtransfer.com/notes-on-sharpening/&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;All illustrations are mine. Blend mode graphs are plotted with p5.js.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:onechannel&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;I take in consideration one channel only for simplicity’s sake. &lt;a href=&quot;#fnref:onechannel&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:hardlight&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;HardLight has the same formula than Overlay, but it uses the upper layer to determine which formula to apply (Overlay uses the layer below instead). &lt;a href=&quot;#fnref:hardlight&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:subtract&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;I keep using “subtract” as a verb, but you should use the more appropriate Apply Image to the document’s bit depth. &lt;a href=&quot;#fnref:subtract&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:down&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;It’s a bit counter-intuitive at first, because “down” in this case means to &lt;em&gt;higher&lt;/em&gt; frequencies. &lt;a href=&quot;#fnref:down&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 13 Mar 2021 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/retouching/Frequency-Separation-2021.html</link>
        <guid isPermaLink="true">http://localhost:4000/retouching/Frequency-Separation-2021.html</guid>
        
        <category>Frequency Separation</category>
        
        
        <category>Retouching</category>
        
      </item>
    
      <item>
        <title>Adobe UXP: Things you need to know! #10 Modal Dialogs</title>
        <description>&lt;p&gt;In this episode we’ll learn how to build Modal Dialogs for UXP plugins. Feel free to watch the video or read the article, they cover the same ground.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/wwuevOgv72g&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;extendscript-history&quot;&gt;ExtendScript history&lt;/h2&gt;

&lt;p&gt;ExtendScript was the language that we’ve been using to script Adobe applications literally forever. It was based on the ECMAScript spec version 3 (a.k.a. ES3), that was cutting edge in the decade 1999-2009. Trivia moment: ECMA stands for &lt;em&gt;European Computer Manufacturers Association&lt;/em&gt;, and it’s the organization that standardized the JavaScript language under the name ECMAScript. There’s a &lt;a href=&quot;https://www.youtube.com/watch?v=krB0enBeSiE&quot;&gt;terrific interview&lt;/a&gt; with Brendan Eich (who famously created JavaScript in a hurry in just 10 days) in Lex Fridman’s channel, check that out – trust me, the man is quite something.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/BrendanEich.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So in a way JavaScript and ExtendScript share a “common ancestor”, ES3, but their evolution diverged. Adobe &lt;em&gt;extended&lt;/em&gt; (hence the name) the ES3 spec with extra features e.g. the E4X library for XML literals support; while JavaScript went on with ES5 (JSON support, Array methods…), ES6 (new syntax…), etc.&lt;/p&gt;

&lt;p&gt;Fast forward to the Adobe MAX 2020 conference and the adoption of a new, unified UI/Scripting engine in UXP. All the ExtendScript extras that we were familiar with are now &lt;em&gt;gone&lt;/em&gt;: disappeared, no more. This is the price we’ve got to pay to have a modern JavaScript engine – fair enough. Some fellow developers might not have realized this because there was a lot to sink in, but probably the most conspicuous feature that’s gone missing is the entire &lt;strong&gt;ScriptUI&lt;/strong&gt; class, that has always been the principal tool to build script-driven Windows both in the CEP era and also way before when the Cloud was not around and all we had was a Creative Suite.&lt;/p&gt;

&lt;p&gt;Let’s be clear about terminology before going any further, so that no matter what your background is we’re all on the same page:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Dialog&lt;/strong&gt;: an independent window that pops up and can be:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Modal&lt;/strong&gt;: it steals the focus, you can’t interact with any other UI element but the dialog itself.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Modeless&lt;/strong&gt;: the dialog stays around and you’re allowed to deal with the rest of the Photoshop interface.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The concept of Modal vs. Modeless UIs is present all over in the Photoshop interface, e.g. Adjustments: on the left a Modal dialog, on the right a Modeless panel.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/ColorBalance.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We used to build modals with ScriptUI Windows of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'dialog'&lt;/code&gt;, and in theory modeless with ScriptUI Windows of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'palette'&lt;/code&gt;, but those weren’t really supported in Photoshop – they acted weird and we’ve been officially advised against their use. Before CEP came about, ScriptUI was enough to build rich UIs:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/ScriptUI.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But as soon as Flash first, then CEP panels landed in Photoshop, ScriptUI was relegated to simpler dialogs or for backward compatibility only. You may not know it, but also those super-handy &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alert()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prompt()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;confirm()&lt;/code&gt; dialogs were part of ScriptUI.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Old ExtendScript code&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;prompt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;What's the meaning of life?&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Feel free to think as long as you need to...&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/prompt.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;They’re all gone too, with the exception of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alert()&lt;/code&gt; that’s been re-implemented in the Photoshop API as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;showAlert()&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Photoshop API&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;photoshop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;photoshop&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;photoshop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;showAlert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Get ready!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Right on&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/showAlert.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Even though it doesn’t differentiate between title vs. text yet (they’re both bold, only the title should be) – a minor cosmetic glitch.&lt;/p&gt;

&lt;p&gt;Anyway, whatever code we used to write in the recent past to create dialogs, that’s gone now – thanks for all the fish. UXP provides alternatives for both modeless windows (as UXP panels, that I’ve extensively covered) and modal dialogs, which I’m going to show you in a moment.&lt;/p&gt;

&lt;h2 id=&quot;️-disclaimer&quot;&gt;⚠️ Disclaimer&lt;/h2&gt;

&lt;p&gt;UXP is a technology under very active development, so the code that I’m showing you may be subject to change in the future: this is the premise of all my work here, given nature of the topic – rest assured that I’ll post updates if/when needed.&lt;/p&gt;

&lt;p&gt;That said, there are features that might be &lt;em&gt;already available&lt;/em&gt; for you to use, but not really (either partially or fully) documented yet. Incidentally this happens to be the case of some Dialogs, so I was dubious whether to include them here or not. I’ve decided that I will mention them anyway because IMHO it’s crucial for you to plan ahead and be informed about the actual realm of possibilities, so to speak. Although I would suggest not to use those features yet, for the risk that the API will change is even greater – be warned.&lt;/p&gt;

&lt;p&gt;As a general rule, you won’t hear a word from me about anything that belongs to the prerelease, or that works in beta versions only – besides breaking all sort of NDAs, it would be pointless. Instead, if the feature is implemented in Photoshop-release I might mention/show it, essentially to inform you but deferring for the actual use to some time in the future when the official documentation covers it fully.&lt;/p&gt;

&lt;p&gt;I’ve prepared two different UXP plugins to show you a few of the possible ways to use Dialogs – one using vanilla JS and the other based on React.js. I haven’t covered React here yet, but it felt wrong to leave that out. You can find both of the examples in my &lt;a href=&quot;https://github.com/undavide/Adobe-UXP/tree/main/Things-You-Need-To-Know/10-Dialogs&quot;&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;vanilla-js-uxp-dialogs&quot;&gt;Vanilla JS UXP dialogs&lt;/h2&gt;

&lt;p&gt;This vanilla JS example comes directly from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ps-starter&lt;/code&gt; template that is available from the UXP Developer Tool (see &lt;a href=&quot;https://www.davidebarranca.com/development/adobe-uxp-things-you-need-to-know-3-uxp-developer-tool&quot;&gt;here&lt;/a&gt; if you still need pointers).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/dialog.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The base structure is very bare, just some Spectrum UXP components:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-heading&amp;gt;&lt;/span&gt;Dialog examples&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sp-heading&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-divider&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;size=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;large&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;margin-bottom:10px&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/sp-divider&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-body&amp;gt;&lt;/span&gt;
  Two different ways to create modal dialogs.&lt;span class=&quot;nt&quot;&gt;&amp;lt;br&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  Please note that Spectrum Dialogs API is still a work in progress.
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sp-body&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;row&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;margin: 20px; justify-content: space-around;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onclick=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;openDialog()&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;dialog&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sp-button&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onclick=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;openSpectrumDialog()&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;sp-dialog&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sp-button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Version Info, to be filled by JS --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-detail&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;size=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;L&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;info&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/sp-detail&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s cover what is &lt;em&gt;officially documented&lt;/em&gt; first, which is the result of the first “dialog” button. In order to create a modal dialog, you need to have an actual &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;dialog&amp;gt;&lt;/code&gt; element in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; first:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Standard Dialog --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dialog&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dialog&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-heading&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;size=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;L&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;margin: 0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;👋🏻 Hello there!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sp-heading&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-divider&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;size=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;large&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;margin:10px 0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/sp-divider&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-body&amp;gt;&lt;/span&gt;This is a rich modal dialog where you can use all
  the available UI elements in UXP.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sp-body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;img/UXP.png&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;400&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;row&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;justify-content: flex-end; margin-top:30px&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;variant=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;secondary&quot;&lt;/span&gt;
               &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;margin-right:10px&quot;&lt;/span&gt;
               &lt;span class=&quot;na&quot;&gt;onclick=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;document.querySelector('#dialog').close('NOPE')&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      Cancel
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/sp-button&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;variant=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;primary&quot;&lt;/span&gt;
               &lt;span class=&quot;na&quot;&gt;onclick=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;document.querySelector('#dialog').close('OK')&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      Ok
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/sp-button&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- ESC will return &quot;reasonCanceled&quot; --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dialog&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;dialog&amp;gt;&lt;/code&gt; element itself is nothing special, I’ve used Spectrum elements that we’ve seen in the past episode like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;sp-heading&amp;gt;&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;sp-divider&amp;gt;&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;sp-body&amp;gt;&lt;/code&gt;. Please note that, as I’ve also mentioned in the &lt;a href=&quot;https://www.davidebarranca.com/development/adobe-uxp-things-you-need-to-know-9-adobe-spectrum-uxp&quot;&gt;Spectrum episode&lt;/a&gt;, a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class&lt;/code&gt; of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;row&quot;&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;column&quot;&lt;/code&gt; triggers the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;display&lt;/code&gt; equals to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flex&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; so it’s possible to use FlexBox-specific styles such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;justify-content&lt;/code&gt; etc.&lt;/p&gt;

&lt;p&gt;The two &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;sp-button&amp;gt;&lt;/code&gt; elements &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onclick&lt;/code&gt; handlers both use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;close()&lt;/code&gt; method of the dialog, that in turn is retrieved with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;document.querySelector()&lt;/code&gt; passing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt;, which is in fact &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;dialog&quot;&lt;/code&gt; (I hope this is not confusing).&lt;/p&gt;

&lt;p&gt;Please note that even if the markup code is there, the dialog doesn’t pop up by default. In order to open it let’s have a look at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;openDialog()&lt;/code&gt; function that is triggered by the plugin’s “dialog” button.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;openDialog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;#dialog&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;uxpShowModal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;About&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;resize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;both&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;464&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;380&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`The dialog closed with: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, the dialog is retrieved with the same &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;querySelector()&lt;/code&gt; but to open it we run the UXP-specific &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uxpShowModal()&lt;/code&gt; method. That accepts an options object with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;title&lt;/code&gt; property (the dialog’s title bar); a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resize&lt;/code&gt; prop, that controls whether the dialog is resizeable (either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;horizontal&quot;&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;vertical&quot;&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;both&quot;&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;none&quot;&lt;/code&gt; – might still be a bit buggy, it was in the past); and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;size&lt;/code&gt;, an object with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;width&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;height&lt;/code&gt; properties (quite self explanatory).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To sum up&lt;/strong&gt;: you add to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; one or more &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;dialog&amp;gt;&lt;/code&gt; elements (that you can get by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt;) filled with whatever elements you need. You open the modal dialog with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uxpShowModal()&lt;/code&gt; passing an options object, and you can close the dialog with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;close()&lt;/code&gt; method optionally passing a return value (in the example I’ve got &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;close('NOPE')&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;close('OK')&lt;/code&gt;). Also note that opening a dialog is an asynchronous process (hence &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;openDialog&lt;/code&gt; is an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async&lt;/code&gt; callback, and it &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;await&lt;/code&gt;s for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uxpShowModal()&lt;/code&gt;) that allows the result &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;res&lt;/code&gt; to be stored/logged afterwards. If the user cancels, a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;reasonCanceled&quot;&lt;/code&gt; string is returned.&lt;/p&gt;

&lt;h3 id=&quot;spectrum-dialog&quot;&gt;Spectrum dialog&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: this is, as I said earlier, still undocumented so please wait for the official documentation and/or use with caution.&lt;/p&gt;

&lt;p&gt;Instead of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;dialog&amp;gt;&lt;/code&gt; element, there’s the possibility to use a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;sp-dialog&amp;gt;&lt;/code&gt; that allows some pre-defined styling as &lt;em&gt;slots&lt;/em&gt;. You still place it in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; markup:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-dialog&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sp-dialog&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-heading&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;slot=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;margin: 0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Use with caution!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sp-heading&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-icon&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;slot=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;icon&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;color: #ec5b62&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;size=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;m&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ui:AlertSmall&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/sp-icon&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-body&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;slot=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    Spectrum Dialogs are still undocumented, yet available in PS-release.
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;br&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    Be aware that this possibility exists and keep an eye on the Doc.
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/sp-body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-button-group&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;slot=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;buttongroup&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;variant=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;primary&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;onclick=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;document.querySelector('#sp-dialog').removeAttribute('open')&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    Ok
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/sp-button&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/sp-button-group&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sp-dialog&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But the result is strikingly different:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/sp-dialog.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The modal dialog is blocked in the screen’s center (you can’t move it) and the panel gets darkened. There are several slots such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;title&quot;&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;icon&quot;&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;description&quot;&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;buttongroup&quot;&lt;/code&gt;. I won’t go too much into any of those because, as I’ve mentioned, it’s better for us to wait for the official documentation. One major difference is that you don’t use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uxpShowModal()&lt;/code&gt; anymore:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;openSpectrumDialog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;#sp-dialog&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Instead you set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;open&quot;&lt;/code&gt; attribute of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;sp-dialog&amp;gt;&lt;/code&gt; element. Similarly, as you can see in the dialog “Ok” button’s click handler, to close the dialog you just remove &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;open&quot;&lt;/code&gt; via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;removeAttribute()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now you know that this is possible and it’ll be soon documented – you can play with it in Photoshop 22.2. Speaking of versions, if you’re wondering how the Photoshop/UXP line fills:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// fills the versions sp-detail&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uxp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;uxp&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`Photoshop &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;uxp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;uxp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;versions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;uxp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;reactjs-uxp-dialog&quot;&gt;React.js UXP dialog&lt;/h2&gt;

&lt;p&gt;As I said I’ve not introduced React.js in this series yet – it’s planned – but I want to include an example anyway. This comes straight from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ps-react-starter&lt;/code&gt; template, cleaned of almost everything; I might assume that you know how to orient yourself in a React project, but If you don’t and want to follow/play with it, please download the React example from &lt;a href=&quot;https://github.com/undavide/Adobe-UXP/tree/main/Things-You-Need-To-Know/10-Dialogs/react&quot;&gt;this repository&lt;/a&gt;, then:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yarn &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Do not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm install&lt;/code&gt; because it won’t deploy all the needed components. Then point the UXP Developer Tool to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manifest.json&lt;/code&gt; that sits in the project’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dist&lt;/code&gt; folder – the distribution files come pre-compiled. If you want to modify the code, then you need to:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm run watch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will watch the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src&lt;/code&gt; folder and bundle with Webpack on each save to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dist&lt;/code&gt;: if you’re not familiar with React, usually you code separate components that a bundler (such as WebPack) merges alongside with the required dependencies in one or a few JavaScript files in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dist&lt;/code&gt;. Additionally, you need to watch the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dist&lt;/code&gt; folder in the UXP Developer Tool so that it knows when to reload the plugin.&lt;/p&gt;

&lt;p&gt;The whole example is very simplified, it’s a dummy Preferences dialog that doesn’t really saves any preference, but is able to hand it to the UXP panel (I will suggest later on ways to improve it).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/react.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s concentrate on the only two files that matter here, both in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src&lt;/code&gt; folder: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/panels/Dialogs.jsx&lt;/code&gt;, the outer container in the UXP plugin panel; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/components/Preferences.jsx&lt;/code&gt;, the content of the dialog that pops up.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/03/VSCode.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dialogs.jsx&lt;/code&gt; file is not very fancy but there are two or three things I’d like to point out.&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;react&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ReactDOM&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;react-dom&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Preferences&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;../components/Preferences&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uxp&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;uxp&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Dialogs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;preferencesDialog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;openPreferences&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Make it better, e.g. loading data from localStorage passing it to the&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// dialog, and saving it thereafter&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preferencesDialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;preferencesDialog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;dialog&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;ReactDOM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Preferences&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;dialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preferencesDialog&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;preferencesDialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preferencesDialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;preferencesDialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;uxpShowModal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Preferences&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;resize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;both&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;250&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Do whatever you need with the {smartObject, vectorContent} result&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;preferencesDialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;heading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Dialog example in React&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;heading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;divider&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;large&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;marginBottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;divider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        Two different ways to create modal dialogs.&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;br&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
        Please note that Spectrum Dialogs API is still a work in progress.
      &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;

      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;row&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;justifyContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;space-around&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;openPreferences&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;160&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;slot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;icon&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;svg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!--&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;SVG&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;things&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;going&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;here&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;svg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        Open Preferences&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;

      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;detail&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;L&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Photoshop &lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;uxp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;, &lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;uxp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;versions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;uxp&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  );
}

export default Dialogs;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;openPreferences()&lt;/code&gt; function is in charge of opening the dialog: interestingly, it uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReactDOM.render()&lt;/code&gt; to render the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;Preferences&amp;gt;&lt;/code&gt; component, but first it needs to create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;dialog&amp;gt;&lt;/code&gt; element (via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;createElement()&lt;/code&gt;) stored in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;preferencesDialog&lt;/code&gt; variable, and then append it to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt;. Only then you’re allowed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uxpShowModal()&lt;/code&gt;. Also note that when the modal is closed there’s no need to keep the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;dialog&amp;gt;&lt;/code&gt; around anymore and you can &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;remove()&lt;/code&gt; it.&lt;/p&gt;

&lt;p&gt;Nothing relevant to mention in the HTML part, just a very simple Spectrum Component structure with a bit of extra styles to keep things properly spaced.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Preferences.jsx&lt;/code&gt; is as follows:&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useState&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;react&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Preferences&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dialog&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;smartObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setSmartObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vectorContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setVectorContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;column&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;heading&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;S&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;marginBottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        Set Defaults
      &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;heading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;column&quot;&lt;/span&gt;
      	&lt;span class=&quot;na&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;solid 1px #888&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                 &lt;span class=&quot;na&quot;&gt;borderRadius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;4px&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                 &lt;span class=&quot;na&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                 &lt;span class=&quot;na&quot;&gt;marginBottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;30px&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;checkbox&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;checked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;smartObject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;onInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;evt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setSmartObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;evt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;checked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
          Smart Objects
        &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;checkbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;checkbox&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;checked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vectorContent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;onInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;evt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setVectorContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;evt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;checked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
          Vector Content
        &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;checkbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;row&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;justifyContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;flex-end&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;variant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;secondary&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;reasonCanceled&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
          Cancel
        &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;variant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;primary&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;marginLeft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;smartObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vectorContent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
          Ok
        &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Preferences&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s a stateless function component where I’ve used the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state&lt;/code&gt; hook to keep track of the two bits of information (the fictitious &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;smartObject&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vectorContent&lt;/code&gt;) that I want to pass along to the panel on close – see the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onClick()&lt;/code&gt; handler for the “Ok” button, whereas the “Cancel” returns the same &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;reasonCanceled&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As I’ve mentioned in the previous video about Spectrum components, you always must use the ternary operator for checkboxes (and set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; when needed) otherwise they won’t work properly. Please note that I’m using inline handler functions for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onInput&lt;/code&gt; event just for convenience. Also note that, and this is peculiar to React.js, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;style&lt;/code&gt; must be an object – hence the double curly braces: one set to indicate inline JavaScript, one set for the object notation, with camelCase properties. And finally &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;className&lt;/code&gt; in lieu of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class&lt;/code&gt;: but remember, only in standard elements, not Spectrum components that accept the usual &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is just an example; in the real world you may want to, say, always store the values (e.g. in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localStorage&lt;/code&gt;) and pass them to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;Preferences&amp;gt;&lt;/code&gt; component to populate the modal when it’s shown – but the goal here is to focus on dialog creation.&lt;/p&gt;

&lt;h2 id=&quot;recap&quot;&gt;Recap&lt;/h2&gt;

&lt;p&gt;Dialogs as we knew them (as ScriptUI Windows, or various simple pop-ups like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prompt()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;confirm()&lt;/code&gt;) are banned in UXP-land. UXP plugins deal with modeless panels natively, and can display modal dialogs as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;dialog&amp;gt;&lt;/code&gt; elements via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uxpShowModal()&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;sp-dialogs&amp;gt;&lt;/code&gt; (that are slightly different) are coming in the near future so keep an eye at the official documentation. All in all UXP can manage dialogs quite nicely so the transition to the new system shouldn’t be too big of a deal!&lt;/p&gt;

&lt;p&gt;Thanks for following along! If you find this content useful, &lt;em&gt;please consider supporting me&lt;/em&gt;: you can either purchase my latest &lt;a href=&quot;https://www.ps-scripting.com/uxp-react.html&quot;&gt;UXP Course&lt;/a&gt; or &lt;a href=&quot;https://bit.ly/unDavide&quot;&gt;donate what you want&lt;/a&gt; as the following fine people have done—it’ll be much appreciated! 🙏🏻&lt;/p&gt;

&lt;p&gt;Thanks to: John Stevenson ⭐️, Adam Plouff, Dana Frenklach, Dmitry Egorov, Roberto Sabatini, Carlo Diamanti, Wending Dai, Pedro Marques, Anthony Kuyper, Gabriel Correia, Ben Wright, CtrlSoftware, Maiane Araujo, Mihály Dávid Paseczki.&lt;/p&gt;

&lt;form action=&quot;https://www.paypal.com/donate&quot; method=&quot;post&quot; target=&quot;_top&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;hosted_button_id&quot; value=&quot;37N4GHTNJK8YE&quot; /&gt;
&lt;input type=&quot;image&quot; src=&quot;https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif&quot; border=&quot;0&quot; name=&quot;submit&quot; title=&quot;PayPal - The safer, easier way to pay online!&quot; alt=&quot;Donate with PayPal button&quot; /&gt;
&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;https://www.paypal.com/en_IT/i/scr/pixel.gif&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;
&lt;/form&gt;

&lt;p&gt;Stay safe, get the vaccine shot if/when you can – bye!&lt;/p&gt;

&lt;h2 id=&quot;the-whole-series-so-far&quot;&gt;The whole series so far&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know.html&quot;&gt;#01 – Rundown on the UXP announcement @ the Adobe MAX 2020&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-2-documentation.html&quot;&gt;#02 - Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-3-UXP-developer-tool.html&quot;&gt;#03 - UXP Developer Tool&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-4-commands-panels-manifest.html&quot;&gt;#04 - Commands vs. Panels and the manifest.json&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-5-async-vs-sync-in-photoshop-dom-scripting.html&quot;&gt;#05 - Sync vs. Async code in Photoshop DOM Scripting&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-6-BatchPlay-part-1-ActionManager-roots.html&quot;&gt;#06 - BatchPlay (part 1): the ActionManager roots&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-7-BatchPlay-part-2-Alchemist-plugin-listener.html&quot;&gt;#07 - BatchPlay (part 2): Alchemist as a UXP Script Listener&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-8-BatchPlay-part-3-Alchemist-plugin-inspector.html&quot;&gt;#08 - BatchPlay (part 3): Alchemist as a UXP Inspector&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-9-Adobe-Spectrum-UXP.html&quot;&gt;#09 - Adobe Spectrum UXP&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-10-Dialogs.html&quot;&gt;#10 - Modal Dialogs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-11-Flyout-menus.html&quot;&gt;#11 - Flyout Menus and Entrypoints&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-12-React-JS.html&quot;&gt;#12 - React JS and the UXP plugins Course&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 01 Mar 2021 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/development/Adobe-UXP-things-you-need-to-know-10-Dialogs.html</link>
        <guid isPermaLink="true">http://localhost:4000/development/Adobe-UXP-things-you-need-to-know-10-Dialogs.html</guid>
        
        <category>UXP</category>
        
        
        <category>Development</category>
        
      </item>
    
      <item>
        <title>Adobe UXP: Things you need to know! #9 Adobe Spectrum</title>
        <description>&lt;p&gt;In this episode I’ll talk about UI making and Adobe Spectrum Components. Also a quick and hopefully welcome announcement: from now on I’ll publish a written article alongside with the YouTube video, so that you can choose the medium you prefer.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/j58FvGYNPnE&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;native-uis&quot;&gt;Native UIs&lt;/h2&gt;

&lt;p&gt;Let me bring up the slide that I’ve shown in the first episode, that comes directly from Adobe:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/02/slide.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you focus on the center/left part, you see that the &lt;strong&gt;Layout Engine&lt;/strong&gt; let’s you write – as we already know very well at this point – HTML and CSS, but those aren’t &lt;em&gt;just displayed&lt;/em&gt; in some sort of a Browser context, as CEP would do. Instead, UXP maps the DOM representation to a native UI hierarchy at runtime, so the UI is expressed with &lt;strong&gt;Native Host Controls&lt;/strong&gt; (hence it’s faster, as it doesn’t require anything as heavy as CEF – the Chromium Embedded Framework – to step in).&lt;/p&gt;

&lt;p&gt;This also means – as it’s been mentioned in this series a lot, but it’s still worth stressing – that you shouldn’t expect UXP to support everything that a Browser would, by default. CSS properties, Browser API or HTML elements must be willingly implemented by the UXP team, and – as it’s fair to assume – priorities must be given.&lt;/p&gt;

&lt;p&gt;So for instance we’ve got CSS FlexBox, but not CSS Grids yet – these will come down the line I’m told. Or, as I usually mention because I know that several developers are making use of its 2D context to draw particularly complex and awesome UIs, there’s no &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; element &lt;em&gt;yet&lt;/em&gt;. So if you feel like there’s something in UXP that is missing and you absolutely need it, feel free send a feature request to the team, I’m sure they’ll note that down – there’s a &lt;a href=&quot;https://forums.creativeclouddeveloper.com/&quot;&gt;Forum&lt;/a&gt; that you can use.&lt;/p&gt;

&lt;p&gt;Although, say, animations are cool, maybe it’s better to have grids first, as they’re more valuable for a larger population of developers, and a robust, non-experimental feature. The good part is that we’re in a very active development phase hence we’re still in the position to chime in and try influence the course of action – the UXP team is listening.&lt;/p&gt;

&lt;h2 id=&quot;spectrum-uxp&quot;&gt;Spectrum UXP&lt;/h2&gt;

&lt;p&gt;At the moment we’re free to use HTML native &lt;em&gt;“form”&lt;/em&gt; elements so to speak, e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;select&amp;gt;&lt;/code&gt;, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;input&amp;gt;&lt;/code&gt; etc. They’re decently styled (not overly cool), you can see them in action in the &lt;a href=&quot;https://github.com/AdobeDocs/uxp-photoshop-plugin-samples/tree/main/ui-kitchen-sink&quot;&gt;Kitchen Sink plugin&lt;/a&gt;, Native tab:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/02/kitchen-sink.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But, be aware that in the long run those HTML native elements will be deprecated in favor of their Spectrum UXP widgets counterparts.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/02/kitchen-sink-spectrum.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Please note that I’m talking about what I’ve deemed as “form” elements or UI elements &lt;em&gt;only&lt;/em&gt;: layout or basic elements such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;span&amp;gt;&lt;/code&gt; and the like will still be available. My suggestion is, when possible, to use Spectrum.&lt;/p&gt;

&lt;p&gt;Time to look in more depth to what Adobe Spectrum is, and how implement it in your projects.&lt;/p&gt;

&lt;h3 id=&quot;adobe-spectrum&quot;&gt;Adobe Spectrum&lt;/h3&gt;

&lt;p&gt;In the beginning there was the &lt;a href=&quot;https://spectrum.adobe.com/&quot;&gt;Adobe Spectrum Design system&lt;/a&gt;: this is the set of &lt;em&gt;specifications&lt;/em&gt; that define the Adobe Spectrum Design – the design tokens, color palettes, typography, how to lay out content, etc. all the informed choices that Adobe UI/UX designers made while creating Spectrum.&lt;/p&gt;

&lt;p&gt;These are just the specs – you could read them and design, say, a Spectrum-compliant game console or, whatever. In order to implement the Spectrum Design system in the context we care about, then we need something else.&lt;/p&gt;

&lt;h3 id=&quot;spectrum-css&quot;&gt;Spectrum CSS&lt;/h3&gt;

&lt;p&gt;If you google Adobe Spectrum, chances are that the first thing you’re going to run into is the &lt;a href=&quot;https://opensource.adobe.com/spectrum-css/&quot;&gt;Spectrum CSS&lt;/a&gt;, the StyleSheet implementation of the Spectrum Design system. You shouldn’t directly use it though, because this is more about laying down the design of Spectrum elements rather than thoroughly implement their behaviour. Take the &lt;a href=&quot;https://opensource.adobe.com/spectrum-css/stepper.html&quot;&gt;stepper&lt;/a&gt; for instance:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/02/stepper.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Besides the amount of markup code required it looks OK, but the arrow buttons aren’t wired up, so when you click them nothing happens to the input value. The Spectrum CSS is meant to be used within/to build components that expose a simpler interface, for instance something like a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;stepper /&amp;gt;&lt;/code&gt; element, which finally brings us to…&lt;/p&gt;

&lt;h3 id=&quot;spectrum-web-components&quot;&gt;Spectrum Web Components&lt;/h3&gt;

&lt;p&gt;Spectrum Web Components are &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components&quot;&gt;Web Components&lt;/a&gt; that follow the Spectrum specs, obviously enough. Generally speaking, a &lt;em&gt;web component&lt;/em&gt; is a reusable custom HTML element that encapsulates a Shadow DOM (a hidden DOM tree that is rendered separately from the Document’s DOM tree) with its own set of styles and behaviour.&lt;/p&gt;

&lt;p&gt;There are two different Spectrum web components projects maintained by Adobe: &lt;a href=&quot;https://opensource.adobe.com/coral-spectrum/documentation/&quot;&gt;Coral Spectrum&lt;/a&gt;, and &lt;em&gt;the&lt;/em&gt; &lt;a href=&quot;https://opensource.adobe.com/spectrum-web-components/&quot;&gt;Spectrum Web Components&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/02/spectrum-web-components.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I have no idea why there are two of them, but I like the abundance – I guess that Coral Spectrum pre-dates in a way &lt;em&gt;the&lt;/em&gt; Spectrum Web Components, but all in all it’s &lt;em&gt;the&lt;/em&gt; Spectrum Web Components the kind of Spectrum web components that are the foundation for the ones in use within UXP that are referred to as &lt;em&gt;“Spectrum UXP”&lt;/em&gt; in the documentation.&lt;/p&gt;

&lt;h3 id=&quot;react-spectrum&quot;&gt;React Spectrum&lt;/h3&gt;

&lt;p&gt;Lastly, since Adobe uses React.js as its framework of choice, a different set of React Components have been developed and this is the &lt;a href=&quot;https://react-spectrum.adobe.com/react-spectrum/index.html&quot;&gt;React Spectrum&lt;/a&gt; project.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/02/react-spectrum.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At the moment React Spectrum components are slighly behind in terms of Spectrum coverage but they’re catching up, and in the future – not now – they’re going to be available in UXP projects as well.&lt;/p&gt;

&lt;h2 id=&quot;using-spectrum-uxp&quot;&gt;Using Spectrum UXP&lt;/h2&gt;

&lt;p&gt;Speaking of availablility, you don’t need to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import&lt;/code&gt; or load anything in your projects in order to use Spectrum UXP components: they are available straight away, just use them in your HTML. Please note that at the moment you can use just a subset of components compared to the ones listed in &lt;em&gt;the&lt;/em&gt; Spectrum Web Components &lt;a href=&quot;https://www.adobe.io/photoshop/uxp/uxp/reference-spectrum/&quot;&gt;documentation&lt;/a&gt;. As of early February 2021 this is what we have for the Typography:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.adobe.io/photoshop/uxp/uxp/reference-spectrum/Typography/sp-body/&quot;&gt;sp-body&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.adobe.io/photoshop/uxp/uxp/reference-spectrum/Typography/sp-detail/&quot;&gt;sp-detail&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.adobe.io/photoshop/uxp/uxp/reference-spectrum/Typography/sp-heading/&quot;&gt;sp-heading&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.adobe.io/photoshop/uxp/uxp/reference-spectrum/Typography/sp-label/&quot;&gt;sp-label&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And for User Interface elements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.adobe.io/photoshop/uxp/uxp/reference-spectrum/User Interface/sp-action-button/&quot;&gt;sp-action-button&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.adobe.io/photoshop/uxp/uxp/reference-spectrum/User Interface/sp-button/&quot;&gt;sp-button&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.adobe.io/photoshop/uxp/uxp/reference-spectrum/User Interface/sp-checkbox/&quot;&gt;sp-checkbox&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.adobe.io/photoshop/uxp/uxp/reference-spectrum/User Interface/sp-divider/&quot;&gt;sp-divider&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.adobe.io/photoshop/uxp/uxp/reference-spectrum/User Interface/sp-dropdown/&quot;&gt;sp-dropdown&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.adobe.io/photoshop/uxp/uxp/reference-spectrum/User Interface/sp-icon/&quot;&gt;sp-icon&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.adobe.io/photoshop/uxp/uxp/reference-spectrum/User Interface/sp-link/&quot;&gt;sp-link&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.adobe.io/photoshop/uxp/uxp/reference-spectrum/User Interface/sp-menu/&quot;&gt;sp-menu&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.adobe.io/photoshop/uxp/uxp/reference-spectrum/User Interface/sp-menu-item/&quot;&gt;sp-menu-item&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.adobe.io/photoshop/uxp/uxp/reference-spectrum/User Interface/sp-progressbar/&quot;&gt;sp-progressbar&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.adobe.io/photoshop/uxp/uxp/reference-spectrum/User Interface/sp-radio/&quot;&gt;sp-radio&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.adobe.io/photoshop/uxp/uxp/reference-spectrum/User Interface/sp-radio-group/&quot;&gt;sp-radio-group&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.adobe.io/photoshop/uxp/uxp/reference-spectrum/User Interface/sp-slider/&quot;&gt;sp-slider&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.adobe.io/photoshop/uxp/uxp/reference-spectrum/User Interface/sp-textfield/&quot;&gt;sp-textfield&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.adobe.io/photoshop/uxp/uxp/reference-spectrum/User Interface/sp-textarea/&quot;&gt;sp-textarea&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The team is implementing more Spectrum UXP components so keep an eye on the UXP doc pages. Also please note that:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Spectrum UXP component API for UXP 4.1 is not perfectly compatible with the published version of the Spectrum Web Components API. Future versions of UXP will have a way to specify the version you need to use, but this is not yet available in UXP 4.1.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Meaning that you’ve got to play cool if the API in &lt;em&gt;the&lt;/em&gt; Spectrum Web Components is not entirely funtional in UXP – rough edges will be ironed down as time goes by. Since it’s a bit small and you can easily miss it, the API section of each element is a tab right below the component’s title:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/02/API.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There you’ll find both Properties and Events. Again: be aware that Spectrum UXP isn’t a 1:1 match with &lt;em&gt;the&lt;/em&gt; Spectrum Web Components.&lt;/p&gt;

&lt;h3 id=&quot;typography&quot;&gt;Typography&lt;/h3&gt;

&lt;p&gt;I recommend you to always use of Spectrum Typography elements, e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;sp-body&amp;gt;&lt;/code&gt; (please note the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sp-&lt;/code&gt; prefix common to all Spectrum components) in place of the standard &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;p&amp;gt;&lt;/code&gt;. If anything, because they ensure that the text color follows along automatically when the Photoshop theme changes (to either darker, dark, light, lighter),   – this is true for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;sp-body&amp;gt;&lt;/code&gt;,   &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;sp-heading&amp;gt;&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;sp-detail&amp;gt;&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;sp-label&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/02/sp-body.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There’s the possibility to use so-called &lt;em&gt;T-Shirt sizes&lt;/em&gt; with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;size&lt;/code&gt; attribute, e.g.:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-heading&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;size=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;XXXL&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Heading XXXL&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sp-heading&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-heading&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;size=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;XXL&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Heading XXL&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sp-heading&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-heading&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;size=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;XL&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Heading XL&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sp-heading&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-heading&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;size=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;L&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Heading L&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sp-heading&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-heading&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;size=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;M&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Heading M&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sp-heading&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-heading&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;size=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;S&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Heading S&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sp-heading&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-heading&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;size=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;XS&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Heading XS&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sp-heading&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-heading&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;size=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;XXS&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Heading XXS&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sp-heading&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sizes from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XXXL&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XS&lt;/code&gt; will work for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;sp-body&amp;gt;&lt;/code&gt; too, in case you need them. Be aware that not all the Spectrum widgets support T-Shirts though, like the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;sp-divider&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-divider&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;size=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;small&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-divider&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;size=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;medium&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-divider&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;size=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;large&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;ui-elements&quot;&gt;UI elements&lt;/h3&gt;

&lt;p&gt;Most of the times this is what your plugin will primarily be made of sliders, buttons, checkboxes, text inputs, icons, etc. The supported Spectrum UXP components are documented both in the &lt;a href=&quot;https://www.adobe.io/photoshop/uxp/uxp/reference-spectrum/User%20Interface/&quot;&gt;UXP minisite&lt;/a&gt; and more extensively in &lt;em&gt;the&lt;/em&gt; &lt;a href=&quot;https://opensource.adobe.com/spectrum-web-components/&quot;&gt;Spectrum Web Components doc&lt;/a&gt; (that remember, contains a larger set than the one available in UXP).&lt;/p&gt;

&lt;p&gt;Please also note that there might be differences between the two sets, for instance if you copy and paste from the Spectrum Web Components the following code…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/02/action-button.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;… It won’t work, because of a slight difference in the way UXP handles icons. The proper code (from the UXP doc) will be something like:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-action-button&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-icon&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ui:Star&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;size=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;xs&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/sp-icon&amp;gt;&lt;/span&gt;
  Star this project!
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sp-action-button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since I’ve mentioned icons let me show you that you can either use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ui&lt;/code&gt; set directly as in the example above (only 36 are available, check &lt;a href=&quot;As the [UXP icons page](https://www.adobe.io/photoshop/uxp/uxp/reference-spectrum/User%20Interface/sp-icon/) will tell you.&quot;&gt;this page&lt;/a&gt; for the list), or you can pick any Spectrum Icon from this 897 strong &lt;a href=&quot;https://spectrum.adobe.com/page/icons/&quot;&gt;collection&lt;/a&gt; copying the code to the clipboard:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/02/icons.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And pasting the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; (sanitized of styles and classes) directly into a normal &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; (mind you, not an&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;sp-icon&amp;gt;&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-action-button&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;slot=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;icon&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fill: currentColor&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;svg&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/2000/svg&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;18&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;viewBox=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0 0 18 18&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;18&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;rect&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Canvas&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;fill=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#ff13dc&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;opacity=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;18&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;18&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;path&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;d=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;M12.7675,10.669l-1.604,1.6055,4.3925,4.392a.6815.6815,0,0,0,.96379.00071l.00071-.00071.64-.64a.6815.6815,0,0,0,.00071-.96379L17.1605,15.062Z&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;path&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;d=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;M3.329,9.7655l.726-.726c.2665-.2665-.011-.644-.011-.644l.746-.719A.68149.68149,0,0,0,5.75,7.67l.4055-.4055.781.7805L8.541,6.4405,7.7585,5.66l.264-.2645a.6815.6815,0,0,0,.00071-.96379L8.0225,4.431l-.32-.32s.9425-1.058,1.14-1.256c.8325-.832,2.6755-.2955,2.7605-.7215S7.5115.1275,5.2245,2.414L2.845,4.794a.6815.6815,0,0,0-.00222.96378L2.845,5.76l.161.155L2.3,6.65a.4535.4535,0,0,0-.64081-.02621L1.65,6.6325l-.728.726a.341.341,0,0,0,0,.482l1.9245,1.925a.3405.3405,0,0,0,.48154.001Z&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;path&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;d=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;M5.5205,15.2615c-.787.283-1.7705.6385-2.45.8815l.877-2.45Zm9.1-13.183-11.19,11.19a.56358.56358,0,0,0-.132.2065l-1.062,2.932a.42.42,0,0,0,.55.5545l2.947-1.05a.56353.56353,0,0,0,.21-.1335L17.131,4.578a.4785.4785,0,0,0,.0435-.673l-1.882-1.872A.4785.4785,0,0,0,14.6205,2.0785Z&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  Do the thing
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sp-action-button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Please note the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;style=&quot;fill: currentColor&quot;&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; that keeps the icon’s color in sync with the theme.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/02/custom-icon.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This way, if/when needed, you can use also your own custom-designed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;svg&lt;/code&gt; icons in place of Spectrum’s.&lt;/p&gt;

&lt;h2 id=&quot;sample-code&quot;&gt;Sample code&lt;/h2&gt;

&lt;p&gt;Let’s put together a very simple example. Please note that code for this plugins can be found at this brand new &lt;a href=&quot;https://github.com/undavide/Adobe-UXP&quot;&gt;GitHub repository&lt;/a&gt;. I’ve created a new Photoshop plugin using the UXP Developer Tool’s Starter Panel template (see &lt;a href=&quot;https://youtu.be/jj9ZzT1iwRU&quot;&gt;this video&lt;/a&gt; if you need a reminder). The HTML is as follows:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;index.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100vh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.row&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;15px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;justify-content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space-between&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.border&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;15px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#888&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefers-color-scheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefers-color-scheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;darkest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;.money&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rgb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;51&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;171&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;132&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefers-color-scheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;light&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefers-color-scheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lightest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;.money&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rgb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;92&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;column&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-heading&amp;gt;&lt;/span&gt;Sample Spectrum plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sp-heading&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-divider&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;size=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;large&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/sp-divider&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;column&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-body&amp;gt;&lt;/span&gt;Just an example of the Spectrum widgets that you're allowed to use in your own plugins...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sp-body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;column border&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-detail&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;slot=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;label&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;MAKE SOME CHOICES&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sp-detail&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-slider&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;variant=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;filled&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;min=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;max=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;10&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;order&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;slot=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;label&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;How many T-Shirts do you want?&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sp-label&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/sp-slider&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-radio-group&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;slot=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;label&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Pick your size:&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sp-label&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-radio&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;XL&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;XL&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sp-radio&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-radio&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;L&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;checked&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;L&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sp-radio&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-radio&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;M&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;M&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sp-radio&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-radio&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;S&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;S&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sp-radio&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-radio&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;XS&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;XS&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sp-radio&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/sp-radio-group&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-dropdown&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;placeholder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Select the color&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;color&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-menu&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;slot=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;options&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-menu-item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Blue&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sp-menu-item&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-menu-item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;teal&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Teal&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sp-menu-item&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-menu-item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;green&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Green&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sp-menu-item&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-menu-item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;purple&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;disabled&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Purple (out of stock)&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sp-menu-item&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/sp-menu&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/sp-dropdown&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;img/default.jpg&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;200&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;margin: 10px auto; border-radius: 4px&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;shirt-img&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-textfield&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;placeholder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UXP 🚀&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;width: 100%&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;slot=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;label&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Shirt personalized text (optional)&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sp-label&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/sp-textfield&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;row&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-action-button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;disabled&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Give back&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sp-action-button&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-action-button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;disabled&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Complain&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sp-action-button&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-action-button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;buy&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;slot=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;icon&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;money&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;margin-left:8px&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;svg&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/2000/svg&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;18&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;viewBox=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0 0 18 18&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;18&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;rect&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Canvas&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;fill=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#ff13dc&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;opacity=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;18&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;18&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;circle&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cx=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;11&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cy=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;7&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;r=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;path&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;d=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;M4,10.5v-7A.5.5,0,0,1,4.5,3h13a.5.5,0,0,1,.5.5v7a.5.5,0,0,1-.5.5H4.5A.5.5,0,0,1,4,10.5ZM17,5.8285A3.008,3.008,0,0,1,15.1715,4H6.8285A3.00753,3.00753,0,0,1,5,5.8285v2.343A3.008,3.008,0,0,1,6.8285,10h8.343A3.00753,3.00753,0,0,1,17,8.1715Z&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;path&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;d=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;M16.5,13H2.5a.5.5,0,0,1-.5-.5v-8A.5.5,0,0,1,2.5,4H3v8H17v.5A.5.5,0,0,1,16.5,13Z&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;path&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;d=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;M14.5,15H.5a.5.5,0,0,1-.5-.5v-8A.5.5,0,0,1,.5,6H1v8H15v.5A.5.5,0,0,1,14.5,15Z&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  Purchase
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/sp-action-button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And this is the result:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/02/sample.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You see that I’m using a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;sp-heading&amp;gt;&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;sp-divider&amp;gt;&lt;/code&gt; as previously demonstrated – &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;sp-detail&amp;gt;&lt;/code&gt; provides some emphasis. Please note that a class named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;row&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;column&lt;/code&gt; automatically triggers the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;display: flex&lt;/code&gt; and sets the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;orientation&lt;/code&gt; accordingly, which is nice to have.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;sp-slider&amp;gt;&lt;/code&gt; contains an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;sp-label&amp;gt;&lt;/code&gt;, and is of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;variant=&quot;fill&quot;&lt;/code&gt;, meaning that the left part of the run is a different color.&lt;/p&gt;

&lt;p&gt;A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;sp-radio-group&amp;gt;&lt;/code&gt; then contains a series of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;sp-radio&amp;gt;&lt;/code&gt;, one of which is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;checked&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then we have a simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;sp-textfield&amp;gt;&lt;/code&gt; with a placeholder text (I admit that to me it isn’t dimmed enough to look like a placeholder and it risks to be mistaken for the actual content).&lt;/p&gt;

&lt;p&gt;All these elements are wrapped with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; that has a border color that happens to be OK no matter whether the theme is dark or light.&lt;/p&gt;

&lt;p&gt;Finally, we’ve a row of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;sp-action-button&amp;gt;&lt;/code&gt; elements: please note that the last one (with a custom icon that comes from the Spectrum set) has a color that varies slightly depending on the theme. You can fine tune such things checking against the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prefers-color-scheme&lt;/code&gt; in the media queries, as demonstrated in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;style&amp;gt;&lt;/code&gt; section.&lt;/p&gt;

&lt;p&gt;The JavaScript part is super simple, and it’s all about collecting the UI values in an alert popup.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;photoshop&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// T-Shirt Color dropdown&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;#color&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;evt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;#shirt-img&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`/wp-content/uploads/2021/02/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;evt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;-shirt.jpg`&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Buy button&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;#buy&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;evt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;#color&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;showAlert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Please pick a T-Shirt color&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;#order&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;#message&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;selectedSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[...&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#size sp-radio&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
                     &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;radio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;radio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;checked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;showAlert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;T-Shirt order&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;--------------&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Number: &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Size: &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;selectedSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Color: &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Message: &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There’s a listener for the T-Shirt Color &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;sp-dropdown&amp;gt;&lt;/code&gt;’s   &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;change&lt;/code&gt; events, that switches the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;img&lt;/code&gt; source using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value&lt;/code&gt; that comes in from the event to interpolate the filename string, appending the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-shirt.jpg&lt;/code&gt; suffix.&lt;/p&gt;

&lt;p&gt;The Purchase button click handler initially checks whether the T-Shirt color has been chosen (otherwise it alerts the user and returns), then it goes on storing all the rest of the UI data.&lt;/p&gt;

&lt;p&gt;Please note that it’s not possible to use just:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#size sp-radio:checked&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It only works with native &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;input&amp;gt;&lt;/code&gt; elements. Hence the need to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filter()&lt;/code&gt; the collection, select the first element in the resulting array and finally getting the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value&lt;/code&gt;. In the end, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app.showAlert()&lt;/code&gt; is fired.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/02/popup.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;caveats&quot;&gt;Caveats&lt;/h3&gt;

&lt;p&gt;I haven’t been able to use any &lt;strong&gt;Spectrum CSS Property&lt;/strong&gt;, the kind of which you can find e.g. in the &lt;a href=&quot;https://github.com/adobe/spectrum-web-components/blob/main/packages/styles/core-global.css&quot;&gt;core-global.css&lt;/a&gt;. That would have been useful e.g. for color tokens. Alas the following doesn’t work:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.icon&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;--spectrum-global-color-static-orange-400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Besides, such named colors automatically vary on dark/light themes, slightly but noticeably to accomodate for the simultaneous contrast effect due to the background color change – something I’ve tried to take into account tweaking the   money icon’s green manually.&lt;/p&gt;

&lt;p&gt;Please note that Spectrum UXP interfaces tend to be larger than CEP, especially if you were used to space-savvy CSS such as &lt;a href=&quot;http://topcoat.io/&quot;&gt;Topcoat&lt;/a&gt; – expect around an extra 20%+ area. I’ve asked whether there are plans for an even smaller version of Spectrum, specifically targeting Creative Cloud applications; I’ve got no answers yet, but that would be useful IMHO.&lt;/p&gt;

&lt;p&gt;Finally, if you use Spectrum UXP with &lt;strong&gt;React.js&lt;/strong&gt; there are a few things that you should keep in mind:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Always check against &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefined&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; for boolean attributes:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-checkbox&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;checked=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{preview&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Preview&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sp-checkbox&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;className&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-textfield&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;absolute&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/sp-textfield&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Always close tags:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;sp-slider&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;min=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{1}&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;max=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{150}&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;step=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{1}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/sp-slider&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;More details in &lt;a href=&quot;https://www.adobe.io/photoshop/uxp/uxp/reference-spectrum/Overview/Using%20with%20React/&quot;&gt;this page&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap up&lt;/h2&gt;

&lt;p&gt;I think this wraps it up for this introduction to Spectrum UXP: you’ve seen where it comes from and how to use it – again, if you feel like there are any glitches, feel free to submit feature requests to the team. Spectrum is an important piece in the grand scheme of Adobe’s things so I’m confident that they’ll be addressed.&lt;/p&gt;

&lt;p&gt;Thanks for following along! If you find this content useful, &lt;em&gt;please consider supporting me&lt;/em&gt;: you can either purchase my latest &lt;a href=&quot;https://www.ps-scripting.com/uxp-react.html&quot;&gt;UXP Course&lt;/a&gt; or &lt;a href=&quot;https://bit.ly/unDavide&quot;&gt;donate what you want&lt;/a&gt; as the following fine people have done—it’ll be much appreciated! 🙏🏻&lt;/p&gt;

&lt;p&gt;Thanks to: John Stevenson ⭐️, Adam Plouff, Dana Frenklach, Dmitry Egorov, Roberto Sabatini, Carlo Diamanti, Wending Dai, Pedro Marques, Anthony Kuyper, Gabriel Correia, Ben Wright, CtrlSoftware, Maiane Araujo, Mihály Dávid Paseczki.&lt;/p&gt;

&lt;form action=&quot;https://www.paypal.com/donate&quot; method=&quot;post&quot; target=&quot;_top&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;hosted_button_id&quot; value=&quot;37N4GHTNJK8YE&quot; /&gt;
&lt;input type=&quot;image&quot; src=&quot;https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif&quot; border=&quot;0&quot; name=&quot;submit&quot; title=&quot;PayPal - The safer, easier way to pay online!&quot; alt=&quot;Donate with PayPal button&quot; /&gt;
&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;https://www.paypal.com/en_IT/i/scr/pixel.gif&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;
&lt;/form&gt;

&lt;p&gt;Stay safe, get the vaccine shot if/when you can – bye!&lt;/p&gt;

&lt;h2 id=&quot;the-whole-series-so-far&quot;&gt;The whole series so far&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know.html&quot;&gt;#01 – Rundown on the UXP announcement @ the Adobe MAX 2020&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-2-documentation.html&quot;&gt;#02 - Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-3-UXP-developer-tool.html&quot;&gt;#03 - UXP Developer Tool&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-4-commands-panels-manifest.html&quot;&gt;#04 - Commands vs. Panels and the manifest.json&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-5-async-vs-sync-in-photoshop-dom-scripting.html&quot;&gt;#05 - Sync vs. Async code in Photoshop DOM Scripting&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-6-BatchPlay-part-1-ActionManager-roots.html&quot;&gt;#06 - BatchPlay (part 1): the ActionManager roots&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-7-BatchPlay-part-2-Alchemist-plugin-listener.html&quot;&gt;#07 - BatchPlay (part 2): Alchemist as a UXP Script Listener&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-8-BatchPlay-part-3-Alchemist-plugin-inspector.html&quot;&gt;#08 - BatchPlay (part 3): Alchemist as a UXP Inspector&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-9-Adobe-Spectrum-UXP.html&quot;&gt;#09 - Adobe Spectrum UXP&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-10-Dialogs.html&quot;&gt;#10 - Modal Dialogs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-11-Flyout-menus.html&quot;&gt;#11 - Flyout Menus and Entrypoints&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-12-React-JS.html&quot;&gt;#12 - React JS and the UXP plugins Course&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 15 Feb 2021 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/development/Adobe-UXP-things-you-need-to-know-9-Adobe-Spectrum-UXP.html</link>
        <guid isPermaLink="true">http://localhost:4000/development/Adobe-UXP-things-you-need-to-know-9-Adobe-Spectrum-UXP.html</guid>
        
        <category>UXP</category>
        
        <category>Adobe Spectrum</category>
        
        
        <category>Development</category>
        
      </item>
    
      <item>
        <title>Adobe UXP: Things you need to know! #8 BatchPlay (part 3): the Alchemist plugin as an Inspector</title>
        <description>&lt;p&gt;In this episode I inspect the various Photoshop app’s BatchPlay objects with the Alchemist plugin. BatchPlay has been the subject of a three-parts mini-series, of which this is the third and last one.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/qDw3mdGAG2o&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Download the Alchemist plugin by Jaroslav Bereza &lt;a href=&quot;https://adobe.ly/33NvdhO&quot;&gt;here 🍺&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you find this content useful, &lt;em&gt;please consider supporting me&lt;/em&gt; – 2020 is a hell of a year. I don’t have a Patreon page, but I’ve got two fairly cheap plugins on the Photoshop Marketplace, &lt;a href=&quot;https://adobe.com/go/cc_plugins_discover_plugin?pluginId=28db2e07&amp;amp;workflow=share&quot;&gt;ALCE&lt;/a&gt; (Advanced Local Contrast Enhancer) and &lt;a href=&quot;https://adobe.com/go/cc_plugins_discover_plugin?pluginId=78c3cdaf&amp;amp;workflow=share&quot;&gt;Double USM&lt;/a&gt; (on sharpening). If you happen to buy them, please leave a positive rating/review, it would greatly help. Or, you can&lt;/p&gt;

&lt;form action=&quot;https://www.paypal.com/donate&quot; method=&quot;post&quot; target=&quot;_top&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;hosted_button_id&quot; value=&quot;37N4GHTNJK8YE&quot; /&gt;
&lt;input type=&quot;image&quot; src=&quot;https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif&quot; border=&quot;0&quot; name=&quot;submit&quot; title=&quot;PayPal - The safer, easier way to pay online!&quot; alt=&quot;Donate with PayPal button&quot; /&gt;
&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;https://www.paypal.com/en_IT/i/scr/pixel.gif&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;
&lt;/form&gt;

&lt;p&gt;If you cannot, or don’t want to, that’s OK anyway.&lt;br /&gt;
Stay safe and thanks! 🙏🏻&lt;/p&gt;

&lt;h2 id=&quot;the-whole-series-so-far&quot;&gt;The whole series so far&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know.html&quot;&gt;#01 – Rundown on the UXP announcement @ the Adobe MAX 2020&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-2-documentation.html&quot;&gt;#02 - Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-3-UXP-developer-tool.html&quot;&gt;#03 - UXP Developer Tool&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-4-commands-panels-manifest.html&quot;&gt;#04 - Commands vs. Panels and the manifest.json&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-5-async-vs-sync-in-photoshop-dom-scripting.html&quot;&gt;#05 - Sync vs. Async code in Photoshop DOM Scripting&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-6-BatchPlay-part-1-ActionManager-roots.html&quot;&gt;#06 - BatchPlay (part 1): the ActionManager roots&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-7-BatchPlay-part-2-Alchemist-plugin-listener.html&quot;&gt;#07 - BatchPlay (part 2): Alchemist as a UXP Script Listener&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-8-BatchPlay-part-3-Alchemist-plugin-inspector.html&quot;&gt;#08 - BatchPlay (part 3): Alchemist as a UXP Inspector&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-9-Adobe-Spectrum-UXP.html&quot;&gt;#09 - Adobe Spectrum UXP&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-10-Dialogs.html&quot;&gt;#10 - Modal Dialogs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-11-Flyout-menus.html&quot;&gt;#11 - Flyout Menus and Entrypoints&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-12-React-JS.html&quot;&gt;#12 - React JS and the UXP plugins Course&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;transcription&quot;&gt;Transcription&lt;/h2&gt;

&lt;p&gt;The transcripted video looks weird, but I’m told it helps to have it anyway because it’s easier to translate to other languages. Apologies for the lack of punctuation and the sloppy syntax.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;To be added soon&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 14 Dec 2020 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/development/Adobe-UXP-things-you-need-to-know-8-BatchPlay-part-3-Alchemist-plugin-inspector.html</link>
        <guid isPermaLink="true">http://localhost:4000/development/Adobe-UXP-things-you-need-to-know-8-BatchPlay-part-3-Alchemist-plugin-inspector.html</guid>
        
        <category>UXP</category>
        
        <category>Alchemist plugin</category>
        
        
        <category>Development</category>
        
      </item>
    
      <item>
        <title>Adobe UXP: Things you need to know! #7 BatchPlay (part 2): the Alchemist plugin as a Listener</title>
        <description>&lt;p&gt;In this episode I explore BatchPlay code with the Alchemist plugin as a powerful UXP Script Listener. BatchPlay is the subject of a three-parts mini-series.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/aZn_6X6nvUM&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Download the Alchemist plugin by Jaroslav Bereza &lt;a href=&quot;https://adobe.ly/33NvdhO&quot;&gt;here 🍺&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you find this content useful, &lt;em&gt;please consider supporting me&lt;/em&gt; – 2020 is a hell of a year. I don’t have a Patreon page, but I’ve got two fairly cheap plugins on the Photoshop Marketplace, &lt;a href=&quot;https://adobe.com/go/cc_plugins_discover_plugin?pluginId=28db2e07&amp;amp;workflow=share&quot;&gt;ALCE&lt;/a&gt; (Advanced Local Contrast Enhancer) and &lt;a href=&quot;https://adobe.com/go/cc_plugins_discover_plugin?pluginId=78c3cdaf&amp;amp;workflow=share&quot;&gt;Double USM&lt;/a&gt; (on sharpening). If you happen to buy them, please leave a positive rating/review, it would greatly help. Or, you can&lt;/p&gt;

&lt;form action=&quot;https://www.paypal.com/donate&quot; method=&quot;post&quot; target=&quot;_top&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;hosted_button_id&quot; value=&quot;37N4GHTNJK8YE&quot; /&gt;
&lt;input type=&quot;image&quot; src=&quot;https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif&quot; border=&quot;0&quot; name=&quot;submit&quot; title=&quot;PayPal - The safer, easier way to pay online!&quot; alt=&quot;Donate with PayPal button&quot; /&gt;
&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;https://www.paypal.com/en_IT/i/scr/pixel.gif&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;
&lt;/form&gt;

&lt;p&gt;If you cannot, or don’t want to, that’s OK anyway.&lt;br /&gt;
Stay safe and thanks! 🙏🏻&lt;/p&gt;

&lt;h2 id=&quot;the-whole-series-so-far&quot;&gt;The whole series so far&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know.html&quot;&gt;#01 – Rundown on the UXP announcement @ the Adobe MAX 2020&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-2-documentation.html&quot;&gt;#02 - Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-3-UXP-developer-tool.html&quot;&gt;#03 - UXP Developer Tool&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-4-commands-panels-manifest.html&quot;&gt;#04 - Commands vs. Panels and the manifest.json&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-5-async-vs-sync-in-photoshop-dom-scripting.html&quot;&gt;#05 - Sync vs. Async code in Photoshop DOM Scripting&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-6-BatchPlay-part-1-ActionManager-roots.html&quot;&gt;#06 - BatchPlay (part 1): the ActionManager roots&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-7-BatchPlay-part-2-Alchemist-plugin-listener.html&quot;&gt;#07 - BatchPlay (part 2): Alchemist as a UXP Script Listener&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-8-BatchPlay-part-3-Alchemist-plugin-inspector.html&quot;&gt;#08 - BatchPlay (part 3): Alchemist as a UXP Inspector&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-9-Adobe-Spectrum-UXP.html&quot;&gt;#09 - Adobe Spectrum UXP&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-10-Dialogs.html&quot;&gt;#10 - Modal Dialogs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-11-Flyout-menus.html&quot;&gt;#11 - Flyout Menus and Entrypoints&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-12-React-JS.html&quot;&gt;#12 - React JS and the UXP plugins Course&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;transcription&quot;&gt;Transcription&lt;/h2&gt;

&lt;p&gt;The transcripted video looks weird, but I’m told it helps to have it anyway because it’s easier to translate to other languages. Apologies for the lack of punctuation and the sloppy syntax.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Hey I’m Davide and this is Adobe UXP things you need to know! Today I’m talking about BatchPlay, again, and also the Alchemist plugin. So in the last video, and if you’ve missed it I suggest you to watch that first because it covers more theoretical grounds on ActionManager, which is a precursor of BatchPlay and the two of them are deeply linked, back then I have left you with the recommendation to go download and install the Alchemist plugin by Jaroslav Bereza. A quick reminder you can find it either on the UXP marketplace for free or on this GitHub page. I prefer the GitHub version because, due to the marketplace “strict vetting” for products, in order to be approved one feature has been implemented not in the most optimized way but both of them should work fine. And in case you’re not familiar with GitHub you get the entire repository as a zip clicking the green button, download zip and when you’ve unzipped it you can point the UXP Developer Tool to the manifest.json that sits in the /dist folder. Okay? Now we have the plugin loaded in Photoshop and let me dock it on the right, so the Alchemist plugin does at least a couple of very important things: it listens and it can inspect. So you have two buttons down here one for the listener and one for the inspector. Let me start with the listener first. As a reminder from the previous video you know that each user interaction with the user interface in Photoshop triggers events that carry payloads that are complex objects that describe the kind of event and allow it to be played back in the Actions palette or if you can listen to the underlying code you can play it back in your own script. And this is exactly what we’re going to do right now, so make sure that you click the listener button here at the very bottom and also make sure that you have listener as the type and category and you also have this exclude selected. These are all drop-down menus that have different values and we will look at them in a while. So “exclude” means that all those events that usually pollute the list of events that the Alchemist listens to are not displayed so they are just filtered out. Okay, now that we have clicked this listener we can start doing things, for instance let’s duplicate a document. So Image, Duplicate and let’s call this, I don’t know what, “foo”, okay? So now you see that, well a document is being duplicated and it’s called foo, but we also have this duplicate event here and it shows up with this kind of display where in the content and tree you have it displayed as a tree so with these arrows you can expand and collapse them you see that the event is the duplicate event and you have the target, the enum is the ordinal we’re referring to, a document and we’re getting the first one and we’re duplicating it calling it foo and giving it a document id of 889. You can inspect the listened code as a tree or in its raw form which I frankly prefer so this is a JSON like object as we saw in the previous video so you have the event the target which is an array in this case just one object so this one document, the name. the document id, and the command. Also if you go in this code tab you see the exact code that you can use to replay this same event so if you copy this and edit maybe a little bit just to change the name and the document id, because you cannot have two documents with the same id, you can duplicate a document with code. I think this is already possible in the DOM but just for the sake of experimentation let’s do that so let me copy this switch to Atom, just because it’s syntax highlighted, paste it here we first need to store the BatchPlay function requiring Photoshop, action, BatchPlay and then the result is equal to await BatchPlay because BatchPlay is an asynchronous function you see that it accepts an array which is this guy here as we saw in the previous video with the descriptor and also an option objects which is this red one with the synchronous execution set to false meaning that this is async; this can be true so in that case BatchPlay is going to act as a synchronous function which is something that is not really recommended unless you perform very quick tasks, and modal behavior well this is when you have modal dialog open and you tell BatchPlay what to do: in this case if there is a modal dialog it will fail. Okay so let’s say that instead of “foo” we wanna I don’t know what “moo” and the document id is going to be 999 okay? So let me copy everything and we have to run this code but we don’t have anything to run it into so let me take the debug console. We’re not going to debug the Alchemist plugin we’re going to just use this console, so let’s switch back to Photoshop, let me minimize the UXP dev tool, just the console, at this point I can paste in here everything and hopefully this document is going to be duplicated and it’s going to be called “zoo”, or “moo” sorry, with the document id of 999. So let’s try this and we have promise, the promise is resolved and in fact you have the moo document here okay? So this works, so let’s try something else we have duplicated this document let’s try with duplicating layers. And you can do that in a variety of different ways one of which is dragging the layer in the layer palette, to this icon and it has been duplicated and you see another duplicate event and if you select it you see that the target is not anymore a document but a layer and each time that you see in the target something that says “_ref” whatever it is, a layer a document. and then “_enum” ordinal and “_value” targetEnum this means the currently active document or layer so the target is the currently active layer. Version five no idea what this is and is command you can forget about it for the time being, and the option of the duplication is just the dialog option so we are not displaying any dialogue for this duplication event so this duplicates a layer. But you can do this in a different way so for instance you can use the keyboard shortcut Command J and this duplicates the layer but you see we have a very different event copyToLayer, let me select that and you see that the code is once more different the event is copyToLayer here we don’t have any descriptor because apparently this event doesn’t need any and again the dialog options are don’t display again synchronous execution false and modal behavior fail this is the default. We have yet another way to duplicate a layer and in this case with the option key pressed as well with the Command and J so Command Option J you have this dialog where you can input the layers details so the name let me call this “zoo” and for the sake of experimentation let’s set the color of the layer as blue, let’s change also the blending mode to screen and the opacity not 100 but 50. Okay so this time we have yet another event it’s “make” and so let’s inspect this make that the Alchemist plugin has listened to we have this object make, actually let me copy everything and paste it in Atom so that we maybe see it a little bit better all right so you see that the event is make we’re making what? A new, and this is a descriptor so this is the new descriptor so we are making a new layer with the name zoo with the mode that is an enum, a blend mode with a value of screen an opacity which is a unit percent unit, with a value that for some reason is not 50 but is 50 with a lot of decimal places and yet another enum for the color in this case blue we are then using this enum area selector with the value of selectionEnum I’m not 100 sure what this means probably it says it’s the active uh layer that we’re using as as a reference and then copy is true which is probably what is needed for the duplication to succeed and again is command is true and the option don’t display synchronous execution and modal behavior as the default so again you see that the BatchPlay takes one array which is this thing here and one option object that is this one and if you forget this object the BatchPlay call is going to fail if you don’t have to modify the default just add an empty object, right? and that’s going to work so having this kind of code you can do a lot of things for instance you can create a function that lets you duplicate layers setting all those parameters so let me try to make this, let’s call this a function like a const dupLayer and this is equal to a function with the arrow syntax and this takes everything okay so let me put everything inside here and I want to return this return and since I’m awaiting for something this makes this function asynchronous so I need to have this async keyword on the top so async okay I think this is it. No, actually it’s not, I need to be able to set what the name in this case this so name let me add it here so name and then also the blend mode that goes here let me call this blend mode so blend mode and then let’s add this to the list of the parameters and also the opacity that goes here. Okay so name blending mode opacity and then what oh the color, the color that goes here so let me call this color all right and I think this is it so let me copy everything this function let me check if the BatchPlay so let me switch to Photoshop first and let me put the console on the top let’s clear it I think that we already have the BatchPlay in memory yes it’s native code so I just need to paste the code for the dupLayer function all right so Photoshop and then the console this is the function and it returns undefined which is fine because we’re not calling this function and at this point I can do that so I can call dupLayer and this accepts the name and let me call this name “loo” and then what it wants blending mode let me have this screen as well well of course you need to know all the exact blending modes so you can properly error check here I’m just using the one that I’ve seen works for the sake of demonstration so screen the blending mode and then the opacity I want in this case 99 and the color let’s try red that should should work let me delete this zoo layer so we can start duplicating this background so that I know that the screen works and let’s close this and see what happens we have a promise that is pending and it’s been resolved and well actually I should have awaited for that so that I should have written await for the dupLayer etc in this case this is the reason why I’m getting a promise the layer has been created it is red it has the screen blending mode and the opacity 99 so it has worked fine okay I think at this point we can get rid of all those layers and by the way you can also clean the list from this button here that says clear, clear all, and then you get rid of everything one last thing that I want to show you is how to bundle multiple steps into one big routine that is called through BatchPlay, because BatchPlay has this unique feature that ActionManager lacked to run an array of descriptors and then we will wrap this in a function that will stick in the prototype of a native object but we’ll get to that in a moment, it’s really really cool. So, I’m still listening I’m duplicating the layer I’m not really interested into this copyToLayer event let’s say that we want to create a luminosity mask on the layer that is selected so we want to create a layer mask make sure that the layer mask is selected you see all the events here we’re going to look at them in a minute and at this point we can apply the RGB content of that layer as normal doesn’t make any difference because it was white normal and multiply are the same but let’s use the proper normal okay so we have those three events let me switch to the raw because I rather prefer it so we have this one let me copy it and paste it just as an object here this is the first one and then we have the select and this goes here let me call this select all right and then we have the last one which is the apply image event this descriptor here so this is apply image okay in the first one we are creating layer mask so you see that we are creating a new channel class channel and we are sticking that into the mask and the mask is reveal all so it’s white and not black and also the select we’re selecting what? Target that is an array in this case only one descriptor a channel the currently active channel making visible false and the apply image event is a calculation you see that you have in the reference couple of descriptors so one for the RGB channel so the composite channel and the fact that it is the merged view preserve transparency true whatever it is these are the steps that we have recorded okay so now we can create a function that runs all those three steps at once so let’s call this createLuma right so const createLumaMask I’m not sure if this is properly called luminosity mask or would have required the L channel from Lab whatever createLumaMask is fine for us here so it’s a function and this function calls BatchPlay so BatchPlay and actually it is an asynchronous function so let’s await for BatchPlay and let’s make this an async function and BatchPlay you know accepts an array of descriptors and an option object so let me use this as an empty object for the time being so into this array I’m going to copy and paste all those three descriptors one two and three okay so this function should have not made any mistakes which is really likely perform those three steps and create a luminosity mask on an existing layer so let’s try that Photoshop and the console let me clear the console and let’s paste the definition of the function BatchPlay should… Oh, unexpected token what am I missing? Oh, commas this is something that I do a lot, all right so let me try again paste and undefined which is cool so back to Photoshop and let’s bring the console up the function was called createLumaMask so let me get rid of that layer let me create another one and let’s see if this works createLumaMask let’s call this function and boom it goes so you have three BatchPlay steps merged into one and that is going to be way faster than the previous extension script way of calling three execute action in a row but there’s something even better you can and if you look at this a page in the documentation you can extend the prototype of some of the native object in this case in the doc they are extending the prototype of the Document we’re going to extend the prototype of the Layer so let me copy this and show you what I mean so you can say that require Photoshop app not document but we are working on a layer so layer and then prototype to the prototype we are going to add something called createLumaMask and this is an async function that in this case returns an await BatchPlay blah blah blah blah right so let me copy this and paste it into the console hopefully we have no errors or right at this point let me get rid of the layer duplicate another one and at this point I think I can say require Photoshop and then I’m gonna get the app and then in the app as you know there is something that is the active document and the active layers I already have this here I don’t need the color and the active layers I want just the first one so the one with index zero and at this point I can call the createLumaMask is this the correct name I already forgot it createLumaMask and hopefully this is going to work yep you see now that it’s not a function that is independent and lives on its own but it is a function in the prototype of the native layer object this is something that we weren’t allowed to do with ExtendScript and it is a nice addition of BatchPlay and by the way super cool so you can really extend the DOM with your own function on the one side you can fill the gaps so create in BatchPlay the function that the DOM should have or had in extend script but has not yet in UXP but you can also create your own routines that exploit the possibility of BatchPlay to use this array syntax so let me get rid of that and let me sum up what we have seen today. So the Alchemist plugin works with two different options, we’ve seen only the first one, the listener. In the next video we’re gonna show the inspector. While you interact with the Photoshop user interface all the events are listed on this column here and you can inspect them either in the content or the code, the difference is that the code is added the parts that allow you to just copy and paste them in your UXP plugins whereas the content is either just the raw descriptor or this tree which is a little bit more pleasing to the eye. Make sure to have the listener set both in the type and the category and also this exclude filter because otherwise if you have none you see that there is a lot of junk that we don’t really need. You can then copy and paste the code, rework it, wrap it with your own function, or combine multiple events in one single BatchPlay array and even store them and extends the Photoshop API assigning your function to the prototype of some of the native objects in this case you can extend the Photoshop, the Document, the Layer, Actionset and Action. Okay I think this is it for this time, it came out a bit long but there is so much to say about BatchPlay and also the Alchemist plug-in. First thing that you have to do is go to the marketplace, the UXP marketplace, get the Alchemist plugin and make sure that you remember to add a positive rating because: hats off to Jaroslav Bereza for his amazing work. I want to thank all the people that have already contributed with a big or small donation it has really, really been appreciated, thank you! There is a donation button either on my website or in the YouTube video description. I also have the usual products on the marketplace myself too. In the next video we’re going to complete this BatchPlay mini-series covering more of the Alchemist plugin but for now that’s it. Thank you for watching, bye.&lt;/p&gt;
</description>
        <pubDate>Mon, 07 Dec 2020 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/development/Adobe-UXP-things-you-need-to-know-7-BatchPlay-part-2-Alchemist-plugin-listener.html</link>
        <guid isPermaLink="true">http://localhost:4000/development/Adobe-UXP-things-you-need-to-know-7-BatchPlay-part-2-Alchemist-plugin-listener.html</guid>
        
        <category>UXP</category>
        
        <category>Alchemist plugin</category>
        
        
        <category>Development</category>
        
      </item>
    
      <item>
        <title>Adobe UXP: Things you need to know! #6 BatchPlay (part 1): the ActionManager roots</title>
        <description>&lt;p&gt;In this episode I approach BatchPlay, the super-powerful Photoshop-only scripting technique that can overcome DOM’s limits. This is part 1, at least one more video will follow.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/vSVrFPCe7DU&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;If you find this content useful, &lt;em&gt;please consider supporting me&lt;/em&gt; – 2020 is a hell of a year. I don’t have a Patreon page, but I’ve got two fairly cheap plugins on the Photoshop Marketplace, &lt;a href=&quot;https://adobe.com/go/cc_plugins_discover_plugin?pluginId=28db2e07&amp;amp;workflow=share&quot;&gt;ALCE&lt;/a&gt; (Advanced Local Contrast Enhancer) and &lt;a href=&quot;https://adobe.com/go/cc_plugins_discover_plugin?pluginId=78c3cdaf&amp;amp;workflow=share&quot;&gt;Double USM&lt;/a&gt; (on sharpening). If you happen to buy them, please leave a positive rating/review, it would greatly help. Or, you can&lt;/p&gt;

&lt;form action=&quot;https://www.paypal.com/donate&quot; method=&quot;post&quot; target=&quot;_top&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;hosted_button_id&quot; value=&quot;37N4GHTNJK8YE&quot; /&gt;
&lt;input type=&quot;image&quot; src=&quot;https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif&quot; border=&quot;0&quot; name=&quot;submit&quot; title=&quot;PayPal - The safer, easier way to pay online!&quot; alt=&quot;Donate with PayPal button&quot; /&gt;
&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;https://www.paypal.com/en_IT/i/scr/pixel.gif&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;
&lt;/form&gt;

&lt;p&gt;If you cannot, or don’t want to, that’s OK anyway.&lt;br /&gt;
Stay safe and thanks! 🙏🏻&lt;/p&gt;

&lt;h2 id=&quot;the-whole-series-so-far&quot;&gt;The whole series so far&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know.html&quot;&gt;#01 – Rundown on the UXP announcement @ the Adobe MAX 2020&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-2-documentation.html&quot;&gt;#02 - Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-3-UXP-developer-tool.html&quot;&gt;#03 - UXP Developer Tool&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-4-commands-panels-manifest.html&quot;&gt;#04 - Commands vs. Panels and the manifest.json&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-5-async-vs-sync-in-photoshop-dom-scripting.html&quot;&gt;#05 - Sync vs. Async code in Photoshop DOM Scripting&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-6-BatchPlay-part-1-ActionManager-roots.html&quot;&gt;#06 - BatchPlay (part 1): the ActionManager roots&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-7-BatchPlay-part-2-Alchemist-plugin-listener.html&quot;&gt;#07 - BatchPlay (part 2): Alchemist as a UXP Script Listener&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-8-BatchPlay-part-3-Alchemist-plugin-inspector.html&quot;&gt;#08 - BatchPlay (part 3): Alchemist as a UXP Inspector&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-9-Adobe-Spectrum-UXP.html&quot;&gt;#09 - Adobe Spectrum UXP&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-10-Dialogs.html&quot;&gt;#10 - Modal Dialogs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-11-Flyout-menus.html&quot;&gt;#11 - Flyout Menus and Entrypoints&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-12-React-JS.html&quot;&gt;#12 - React JS and the UXP plugins Course&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;transcription&quot;&gt;Transcription&lt;/h2&gt;

&lt;p&gt;The transcripted video looks weird, but I’m told it helps to have it anyway because it’s easier to translate to other languages. Apologies for the lack of punctuation and the sloppy syntax.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Hey I’m Davide and this is Adobe UXP things you need to know! Today I’m finally talking about BatchPlay. So BatchPlay is one of the most important subjects of the whole series especially given the state of UXP and the new scripting engine in Photoshop. In this first part, because I think there’s going to be at least two, I’m going to cover BatchPlay roots i.e. ActionManager code because they’re strictly related. In my experience at least things are much easier to deal with and way less scary than at first sight if you understand their inner mechanisms and this is particularly true with ActionManager code. I’m going to give you a very condensed version of it, there’s much more to be said and I will point you to a more comprehensive resource later on. As far as all the Adobe apps are concerned scripting is whatever it takes to get and set the app object’s various properties and nested properties and calling their methods. What is generally dubbed DOM scripting where DOM stands for the document object model i.e the way the props and methods are modelled in the sort of Russian doll fashion, well that DOM scripting is scripting for all the Adobe apps. If you need a prop that is not available via the DOM then it’s outside the domain of scripting, period. Forget about it. So this is true for every Creative Cloud app that supports scripting except Photoshop, which is special and it has always been special at least since version what was it four or five and by the way not CS4 like just four, so way way back. Photoshop has something called ActionManager that is one of the ugliest unfamiliar ExtendScript code ever but that lets you do things that are outside of the DOM scope. So when we talk about the DOM coverage we actually mean the amount of scope that the Document Object Model encompasses, okay? The things you can do versus the ActionManager superset or the things you can do with scripting. So think about it this way: you have Photoshop, the entire applications and its features, and Photoshop is going to be the super set of things that a user can do, and inside it there is a subset that I’m going to draw in a different color that is the amount of things that a user can do with scripting. So this is the scripting subset and with other Adobe applications such as InDesign, Illustrator this scripting corresponds to the DOM scripting but in Photoshop this superset corresponds to the ActionManager scripting because this is always going to be a super set of the DOM scripting, which in turn is a smaller subset of that so this is the DOM. So when we talk about DOM coverage in Photoshop we can mean at least two different things: so the difference that exists between the DOM and the outer ActionManager layers so the amount of things that ActionManager can do and the DOM can’t but also the amount of things that we would like to be able to reach with the DOM in the app itself so this area here these are the props and methods that scripting cannot reach for instance, let me think about it, the values that are in the Info Palette the live reading these are not reachable by scripting, not ActionManager nor the DOM. But usually we compare the DOM against the ActionManager because we tend to think that ActionManager is kind of the ceiling. So how do you get ActionManager code? So there is this thing called ScriptListener plugin that you can find at this page and I think the download is right here you install this by moving the folder into the Photoshop / plugins folder and then upon restarting everything that you do or everything that is recordable by the ScriptListener plugin is logged on the desktop in a file so I happen to have mine with a shortcut here and this is the super ugly code that you can get now. The key point here is that this code strange as it might seem is playable so you can get this and run it in your Photoshop and that’s going to perform the same things that I did when I recorded that and there is a parallel between recording ActionManager code and recording actions – the kind of actions that are in the Action Palette like these ones, and ActionManager has action in its name for a reason so in Photoshop 4 in order to support this new feature so the possibility to record and playback actions the engineering team has built an event system that is triggered every time the user interacts with the Photoshop UI, that is to say every time you select a tool or interact with the layers or whatnot. And what happens is that those interactions will trigger an event, a very specific event; there are not many of them but each one of those events carry a payload in the form of a strange weird complex object called the Descriptor, that takes into account all the information that describes and give meaning to that single event so I happen to have this very code so the output of the ScriptListener plugin in Atom and the reason is that is syntax highlighted and it’s easier to inspect so let’s try to have an intuition about this code trying to make sense of it this is the raw output and as you see it’s kind of scary the very first step towards a proper understanding of it is to install a tool that is able to beautify the kind of code and you can find it it’s made by this guy Thomas Sinkunas I’m not sure I can pronounce his name he is from Lithuania and the repository should be at the end of the list and it’s called Clean SL you download it and you install it by moving the files into the Photoshop / presets / scripts folder and then you can find it in Photoshop in the file scripts menu hits here Clean SL and you have the original output of the ScriptListener on the left and based on the parameters you can set here you can clean the code and end up with something that looks much better. The version that I have here has been processed a little bit more basically name substitution and this is it so let’s try to make sense of it in a very intuitive way what you have to know that the event that I was talking about earlier is in this executeAction here and each one of these are steps so this is one step this is another step this is a very long third step and these are things that I’ve done in Photoshop before and let’s try to see if we can make sense of them so as I said this ExecuteAction is what triggers the event so this event was an open event then you have a copy to layer event and if you scroll down this is a curves event and then you have a select and another select and so on and so forth so try not to focus too much on those s2t functions here because I’m not going to cover here what StringIDs are or TypeIDs let’s just think in a very intuitive way that we are opening something that has a path because we’re putting a path somewhere and the path is this one and then we have other stuff that is hard to make sense of don’t record and force notify what are those? have no idea. And everything is stored inside of this ActionDescriptor object so again you can think about ActionManager as an event which is this open here that is followed by a Descriptor and the Descriptor is a complex object that takes into account all the parameters that the event needs in order to be played back so even if you don’t understand probably everything here you can assume that I was opening a document called Anita.jpg right and in the next action or the next step there is just one event that is copy to layer which is one of the many ways that ActionManager has to duplicate a layer you have at least two or three at the very least and copy to layer is one so you’re just duplicating a layer and this corresponds not to a duplicate event as you might assume but a copyToLayer one and it has no Descriptor so you see that the place of Descriptor is undefined you don’t need any additional information in order to duplicate a layer and the third action is a very very complex one you have one two three four five six ActionDescriptors and in every ActionManager code you have the event as I said that is the one that is passed as the first argument to the ExecuteAction function so the event is “curves” let’s put it here event curves and then just one ActionDescriptor so you have one ad but this one ActionDescriptor can contain as many things as Adobe wants or need in this case you have five inner ActionDescriptors so you have something like five ADs here and each one of these ADs contains a variety of other things one ActionDescriptor can contain another ActionDescriptor so you have a kind of Russian doll structure and you don’t really have to understand why those ActionDescriptors are nested that way because this is outside our reach so we can just observe the way that the ScriptListener code is presented to us i.e we can just note that in order to draw a curve so to create an adjustment of type curve you have to structure the ActionDescriptor in this very way so again without trying to inspect it properly you can do it it’s not very difficult after all but you see that we have channels and we are probably acting on the composite and we have this “paint” which is quite strange looks like a typo for a “point” and you might not be too far from the truth in this case with horizontal and vertical points so this curve probably has a one two three and four points in the array of points in fact it was a curve like that so an S shaped curve and you have one point here one point there and a couple of points in the middle so zero, zero, two-five-five, two-five-five the end points and the two points in the middle here and then what um a series of different objects that are ActionLists and ActionLists you can think about them as arrays of ActionDescriptor so whatever it is that it’s needed for this ActionDescriptor in order to create and replay a curves adjustment it’s a very very complicated one so let’s scroll down and you see here a select event again in the ExecuteAction which is matched here as well and in this case we are selecting I was selecting a tool um the move tool here and the type creation tool so I was trying to create a text layer and then again a move tool in this case and then the following step is an awfully long one I think it’s like I don’t know what 200 lines of code or something you see that that’s kind of crazy isn’t it, the beauty of ActionManager code. In this case you have 18 ActionDescriptors so one main ActionDescriptor that contains at least 17 of them nested inside it plus a four ActionList in the ActionReference takes into account what is the target of the entire step this again is awfully long and awfully complicated and there’s no way that we can understand it uh just you know note that it’s this way and probably this is setting a lot of options that are, well, optional as the, I don’t know, the base line shift or the horizontal scale or the fact that the text has or not a strikethrough and so on and so forth but in the end the event is a “make” event and accepts just one ActionDescriptor and then there’s a “move” event here so I’ve offset the layer these values on the horizontal and vertical axis and you see that I’m somehow acting on a layer because you read layer here again we’re working with intuition right now so we’re trying to look at things and figure out what might have happened and we have put that object the one that takes into account these values into an offset and then executing the event according to that ActionDescriptor that contains all the information and finally I’ve closed the file and this is kind of funny so the saving property is an enumeration of class “yesNo” and I’ve chosen no so I’ve closed without saving so whatever this is it’s the way that Photoshop internally deals with those actions that I was, as a user, performing and this is pretty valid code so I can run this code and perform the same step so I can open the file and then duplicate the layer and so on and so forth so this is the whole point of having the ScriptListener code and some of those actions are not available through the DOM I doubt that you can create a text layer via the DOM and I also doubt you can create a curve adjustment probably the curve has been introduced in the last years might be wrong though anyways this is the ExtendScript code ActionManager now enters BatchPlay this is the equivalent of the code that you’ve just seen so let me put that on the side so on the right you have the BatchPlay on the left you have the ExtendScript so first thing to notice is the syntax you are using the BatchPlay function of the Action property of the Photoshop object so you have to require Photoshop and then Action and then BatchPlay and you see the BatchPlay takes an Array as an argument so the Array is this guy here right so this part is the argument of the BatchPlay function and also an object so let’s have a look at the documentation page for the BatchPlay that you can find I guess here so in the doc mini-site in the Photoshop API you go to advanced and BatchPlay so you see that you require Photoshop and then through the Action you have access to the BatchPlay function that accepts a Descriptor as an array of Descriptors and options I’ll go into that in detail in the following videos but for the time being let’s just focus on the different syntax so you see that for instance in this case of the layer duplication I have just one event copyToLayer and this copied layer is matched in this object here we have the same copied layer and if you don’t take into account the options that is don’t display which is exactly this dialog modes no the equivalent of the dialogue mode no and this synchronous execution set to true in the options object you see that they are quite similar the syntax is different it’s JSON-like but the structure is the same again let’s try to compare the curves which was quite scary with all those ActionDescriptors now the ActionDescriptors are substituted by objects so you had for instance here an ActionDescriptor with the channel and now you have an object with the channel with a reference here an enumeration here so here you have them both and a value of composite so this is the composite right and the curves which is this guy here was another Descriptor that contains an ActionList so sort of an array of ActionDescriptors and it’s exactly what you have here right so an array of ActionDescriptors i.e. objects where you have this paint which I guess was points but probably the two StringIDs point to the same TypeID if you know what I mean it’s okay if you don’t don’t worry and the points right way more readable this way and again if you discard the dialog options and the options object it’s much more compact and readable not much luck with the type object I think because this one is quite long as well because there are a lot of properties to set but you get the gist of it. So the takeaway for this first part is that BatchPlay is a new syntax and very important couple of new features on top of the ActionManager structure so the more you know about ActionManager the more you already know about ActionManager the easier will be the transition to BatchPlay and if you don’t know that much about ActionManager I’m afraid there aren’t that many sources except for the Photoshop Scripting book this guy here where I have 70 pages on ActionManager alone and I doubt you can find that much content anywhere else so ActionManager is the way that Photoshop has to take into account the user interaction with Photoshop so that that interaction can be stored into proper actions or scripting code to be played back in a later time and what you have to do as a scripter is to take note of the way that Photoshop stores that data in order to be able to write your own both to set parameters and run actions i.e tasks and also being able to extract data from Photoshop because one thing that I have not mentioned is that ActionManager sits in Photoshop and is there for you to access it so you can get properties that otherwise are impossible to get via DOM so layer’s properties, app’s properties and so on and so forth. BatchPlay is ActionManager: it’s an evolution of the ActionManager that we had in ExtendScript with notable new features for instance the possibility to run multiple events and their Descriptors as an Array which is way faster and we will see that in the next video. It has a brand new syntax based on JSON and it’s way more friendly the very last thing that I want to leave you with is a plugin for Photoshop called Alchemist that you can find either on GitHub at this page it’s made by Jaroslav Bereza one of the most talented guys in the Photoshop scripting community and a guy with a very strong sense of humour by the way or also in the Photoshop marketplace so let me try to find it right here so go get it there are differences between the plugin that you can find in the marketplace and the ones you can find on GitHub for development purposes I would suggest you to get the GitHub one but get this one as well and give five stars and a positive review because he greatly deserves that. I’ll cover Alchemist in depth in the next video, play with it in the meantime. I think this is all for this video if you’ve learned something new please consider supporting me, there is a donation button either on my website or in the youtube video description; also I have products in the marketplace. Thank you for watching and see you in the next one. Bye!&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Dec 2020 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/development/Adobe-UXP-things-you-need-to-know-6-BatchPlay-part-1-ActionManager-roots.html</link>
        <guid isPermaLink="true">http://localhost:4000/development/Adobe-UXP-things-you-need-to-know-6-BatchPlay-part-1-ActionManager-roots.html</guid>
        
        <category>UXP</category>
        
        
        <category>Development</category>
        
      </item>
    
      <item>
        <title>Adobe UXP: Things you need to know! #5 Sync vs. Async code in Photoshop DOM Scripting</title>
        <description>&lt;p&gt;In this episode I’m discussing asynchronous code in the Photoshop DOM and how the new JavaScript Scripting engine differs from ExtendScript.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/sf7YPWUppSM&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;If you find this content useful, &lt;em&gt;please consider supporting me&lt;/em&gt; – 2020 is a hell of a year. I don’t have a Patreon page, but I’ve got two fairly cheap plugins on the Photoshop Marketplace, &lt;a href=&quot;https://adobe.com/go/cc_plugins_discover_plugin?pluginId=28db2e07&amp;amp;workflow=share&quot;&gt;ALCE&lt;/a&gt; (Advanced Local Contrast Enhancer) and &lt;a href=&quot;https://adobe.com/go/cc_plugins_discover_plugin?pluginId=78c3cdaf&amp;amp;workflow=share&quot;&gt;Double USM&lt;/a&gt; (on sharpening). If you happen to buy them, please leave a positive rating/review, it would greatly help. Or, you can&lt;/p&gt;

&lt;form action=&quot;https://www.paypal.com/donate&quot; method=&quot;post&quot; target=&quot;_top&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;hosted_button_id&quot; value=&quot;37N4GHTNJK8YE&quot; /&gt;
&lt;input type=&quot;image&quot; src=&quot;https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif&quot; border=&quot;0&quot; name=&quot;submit&quot; title=&quot;PayPal - The safer, easier way to pay online!&quot; alt=&quot;Donate with PayPal button&quot; /&gt;
&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;https://www.paypal.com/en_IT/i/scr/pixel.gif&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;
&lt;/form&gt;

&lt;p&gt;If you cannot, or don’t want to, that’s OK anyway.&lt;br /&gt;
Stay safe and thanks! 🙏🏻&lt;/p&gt;

&lt;h2 id=&quot;the-whole-series-so-far&quot;&gt;The whole series so far&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know.html&quot;&gt;#01 – Rundown on the UXP announcement @ the Adobe MAX 2020&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-2-documentation.html&quot;&gt;#02 - Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-3-UXP-developer-tool.html&quot;&gt;#03 - UXP Developer Tool&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-4-commands-panels-manifest.html&quot;&gt;#04 - Commands vs. Panels and the manifest.json&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-5-async-vs-sync-in-photoshop-dom-scripting.html&quot;&gt;#05 - Sync vs. Async code in Photoshop DOM Scripting&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-6-BatchPlay-part-1-ActionManager-roots.html&quot;&gt;#06 - BatchPlay (part 1): the ActionManager roots&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-7-BatchPlay-part-2-Alchemist-plugin-listener.html&quot;&gt;#07 - BatchPlay (part 2): Alchemist as a UXP Script Listener&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-8-BatchPlay-part-3-Alchemist-plugin-inspector.html&quot;&gt;#08 - BatchPlay (part 3): Alchemist as a UXP Inspector&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-9-Adobe-Spectrum-UXP.html&quot;&gt;#09 - Adobe Spectrum UXP&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-10-Dialogs.html&quot;&gt;#10 - Modal Dialogs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-11-Flyout-menus.html&quot;&gt;#11 - Flyout Menus and Entrypoints&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-12-React-JS.html&quot;&gt;#12 - React JS and the UXP plugins Course&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;transcription&quot;&gt;Transcription&lt;/h2&gt;

&lt;p&gt;The transcripted video looks weird, but I’m told it helps to have it anyway because it’s easier to translate to other languages. Apologies for the lack of punctuation and the sloppy syntax.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Hey I’m Davide and this is Adobe UXP things you need to know today I’m talking about asynchronous code in Photoshop UXP scripting. Let’s say that you have some old ExtendScript code that you want to port to UXP, something very very simple like duplicating the layer and then renaming it. In ExtendScript you would do something like app.activeDocument and then activeLayer just to keep it super simple then you want to duplicate that right and probably store that into a variable var dup is equal to this so that you can reference it, dot name and then assign that to a different string like I don’t know UXP. OK so this is what you would do in ExtendScript, let’s see how this works in UXP code: it’s going to be just a little bit different but this involves the understanding of asynchronous versus synchronous code so let’s get to it. Let me create a new UXP plugin so let’s switch to the UXP Developer Tool I want to create a plugin let’s call this test the id is whatever plugin version 1.0.0 host application Photoshop am I repeating this just for you to become more and more familiar with the process 22.0.0 and again if you don’t remember that there is a video that you can check out, and the template is the easiest one the ps-starter I want to put that into the samples and let me create a folder that I’m going to call test okay so selecting that. Plugin being created I need to do three things: I have to load it, and I have to watch it, and I also want to debug it, okay so now the UXP DevTool can go away .I want to keep this on the top right corner I need to add this test folder in Atom just keep this on the left the plugin is here let me stick it to the side as well and also I have to create a dummy document in Photoshop for the sake of experimentation with a new layer that’s okay and I want to add something in it like just a circle with a nice color and let’s center this. This is a little bit of a trick if you have to center something you select all: Command+A and then with the move tool you can align it based on the entire document. OK so that’s it let me also clean everything in the index.html I don’t need no style, so this goes away, the body also everything away, I just need a button so let’s add a spectrum web component sp-button and this is going to say “run” and have an id of “test” so that let me save this. This is something related to the JavaScript file which I’m going to delete anyway so at this point I have to reference that button via id so document.getElementById the id was test I think so at this point I have to add an event listener so add event listener for the click event and when this clicks I want to have a callback function that for the time being just console.log something just to see if this works. console.log run okay so let me save this, click run and check the console. It says run, the error was pre-existing so let me get rid of that again: run run run run run. Okay cool so this is the starting point. Now let me copy the ExtendScript code as a reference the index.html we don’t need anymore let me stick it on the top here as a comment, all right, so we don’t have in UXP any app already available in the global space so we need to get that via require Photoshop so const I want app and this is going to be require Photoshop and then the app. Okay so this is one thing I suppose that I’m gonna have an active document in UXP as well but let’s check this out in the console. So app should be available here already app? is it? no app is not defined let me save this let me try again. Yes now I have it app dot does it have anything like an active document? it does, so here, this is the document you have all the information also the layers you see? All right so: the active document. Does the active document have a activeLayer property? Let’s check activeLayers plural so this is a different way that UXP goes about active layers compared to ExtendScript. In ExtendScript you had activeLayer singular you now have activeLayers plural and it is an array even if you have just one of it. It makes sense to have an array because you can have more than one layer selected with shift click in the layers palette but anyways. You can have this active layers and if you want just the first one in this case it’s just one so that’s not a big of a deal you select the one with index zero right? So this is the layer let’s check that the name is the right one so it’s layer one okay and now we can set the name for instance of it, name to a different string UXP is fine so let’s check if this works. It does, it has renamed the layer and probably that layer also has a duplicate function. So here it is we’re not reading the documentation we’re just experimenting in the console which is more fun so duplicate this duplicates the layers so everything seems to be okay. So we now have all the elements to write our code don’t we? app is here now let me have a constant also for the active document so let’s call this doc is equal to app.activeDocument and I also want to have the active layer so const lay is equal to doc.activeLayers plural and then just the first one and let me just console.log it here to see if everything works. Click run and here is the layer okay. Let’s do this duplication and renaming business. Let’s get rid of the console log I don’t need it anymore let’s write let dup is equal to lay.duplicate all right and now I can rename dup and dup.name is equal to DUP! All right? so let me get rid of that layer here we don’t need it let’s save and this goes on the corner I don’t need the documents tree also let me clear the console. Are we ready? Three, two, one run! And something has happened but not really what we expected right? So this has been duplicated but has not been renamed and you might wonder why. So let’s check in the sources and let’s stick a breaking point right here and try again so run, this has been paused on that break point we can just go through that clicking that button and you see that the layer has been, in fact, duplicated but this dup is now something called a “promise” should be a layer shouldn’t it? And now if we step over one more time we see that nothing really happens not even an error. So this is a little bit puzzling let me get rid of the break point and let me try to explain what is this all about. Now in UXP as opposed to ExtendScript there are functions that run in an asynchronous fashion that is to say that it takes some time to do some operations such as duplicating a layer because Photoshop has to take care of all the pixels and store them in memory and whatnot this might take a significant amount of time. So instead of waiting for that process to complete the JavaScript engine just goes on immediately to the next line: so it’s duplicating this and performing that duplication but the JavaScript engine just switches to the next line this dup.name and tries to run it. So it fails because since dup is not really a layer yet is not possible to rename it, okay? so the question is now what is dup? dup is a promise and a promise is a proxy for the value that dup is eventually going to be assigned. And only then when the promise is resolved dup can be renamed let me try to address this synchronous versus asynchronous thing in a more visual way. Think about synchronous code so ExtendScript so this is sync as a series of functions that happen one after the other you have the first function that is here and then the second one that happens only when the first one is completed that goes right on and then you have the third one that goes on just just when the second one is completed so it’s one two and three. They run in a synchronous fashion. Instead in a synchronous code so a sync what happens is that you have the first function that is here and this is the first one that starts to run but immediately not waiting for it to be completed the JavaScript engine goes on with the second one it just takes few milliseconds here just to run the first one before starting the second one; and then after immediately after you have the third one which is here okay so you have again a few milliseconds between the second and the third one and this is the third okay? So even if the starting order is one two three the finished line is not necessarily one two three, it really depends on how long it takes to perform the first the second and the third operation. So for instance if the first one is really intensive can take more time and then the second one might be shorter and the third one something I don’t know in the middle like that so the finishing line in this case might be something like two three one why not? And getting back to our duplicate example you might think that the duplication is started and it has still to complete and you are already trying to rename it so this happens not on the actual layer but in something that is just a proxy for that layer, hence it fails. Okay I hope this makes sense. So the next question is how we deal with asynchronous functions: there are at least a couple of different ways. First one is with then functions so every function that is asynchronous that returns a promise is then-able so you can write something like then which is a function and this then accepts in turn a callback function that I’m going to write with the fat arrow syntax and the argument of that function is the returned value of the resolved promise so in other words: you have this duplicate here and at some point this duplication happens and then a layer is returned. The proper way to say it is that when the promise is “resolved” then you have the “returned value” okay? So that return value which is a layer by the way is passed to this callback here okay so at this point you can write something lay here or let’s say layer and then you can rename it right, so layer dot name is equal to dup here okay so this line goes inside of the callback function. So let me save this and let’s check that we don’t have any pause debugger or something also let me get rid of those layers here run and here it goes so dup is here you see that it has duplicated the layer and renamed it right? The problem with then-able functions is that you might think that this dup now is a layer you have been assigning that to this duplication and then then function but the problem is that then returns a promise so even if you add return layer here. Let’s try to console.log the dup: so dup here and there, so let me save this and switch back to the console now let me try to run you say that dup is a promise, which by the way is also pending. Even if you try to assign to dup the layer inside the callback that is not really going to work so let’s say let’s dup is equal to a null for the moment and then you go with lay duplicate and instead of returning layer which is not useful now you say dup is equal to layer okay so let’s see if this works let’s save that and run you see that dup is still null so it’s kind of hard to work with that if you need to reference the resolve value of a function unless you keep then-ing functions which is by the way possible if you return them so if you return the layer you can now then again and do whatever you want in here with that layer so l and then I don’t know if you need to perform some further steps you can inside the then callback. Another way that in my opinion is way simpler is to use async and a await these two keywords are going to transform the code into synchronous code. okay let’s try them I want to say let dup is equal to await for lay duplicate all right and this await here means let’s wait for the duplication to be completed so for the promise to be resolved and then assign to dup the result. So if we try this let’s save first you see that there is an uncaught syntax error await is only valid in any sync function so we need to specify, to explicitly tell to the JavaScript engine that the function that contains this await is asynchronous so we need to add the async keyword to the function. And can you spot the function here? it is this anonymous function here, so in there you’re going to write async okay so let’s save again let’s get rid of that message and run and you see that now the dup is finally a layer. You have a lot of copies here so let me get rid of everything and try again: run, nothing happens… let me save once more. Run and you see it here we still have to rename that so at this point I’m pretty sure you can write something like dup dot name is equal to UXP well not UXP, DUP okay so let’s try this save and run and in fact you have dup here okay? So this appears to work remember that you have to use
await only in the context of an async function now let me try something a little bit different say that you don’t want to duplicate the layer just once but a number of times so you want to use something like a for loop so for let i equal not 0 but let’s say 1, i less than 5 and i plus plus; standard for loop and in here you want to do this dup await the duplicate right so let’s save this delete a bunch of layers that we don’t need and click run again there is a breakpoint going on here I don’t want it let’s play everything and also let’s get rid of that which is going to be better okay so let’s save again click run and you have all the copies here. I don’t want to have just dups so let me interpolate this with the backticks so I want to have dup and then underscore with the index right i. Okay so let’s save get rid of the duplicate run it again. I don’t know why I need to save these a couple of times… run and now you have it so dup 1 dup 2 dup 3 and dup 4. So let me rewind that to show you what exactly happens which is what you expect so a duplication and the rename step. So I duplicate rename duplicate rename duplicate rename and duplicate rename okay? Cool. So let me get rid of that so let’s say that you don’t want to have a for loop but you are a fan of functional JavaScript you want to use something like map on an array of numbers which you can do by the way one two three four you can map and map takes a callback that is executed on all those elements so you have the element here and then you can just say this let dup equal to await duplicate and dup name is equal to this the only thing different is that instead of I you have the element el okay so let’s save couple of times I have an error here: await is only valid in the sync functions and again this is something that I wish I had one Euro for all the times that I got that wrong you have to put async here right so let’s save again and let’s get rid of the for loop that we don’t need anymore so I’m going to also clean the console and click run once more and apparently everything works fine dup one two three and four but let me rewind with command-z the history and see what has in fact happened. So if we play it slowly we have a duplication and a duplication and a duplication and a duplication and then a rename rename rename rename which is not really what we want do we we want a duplication and a rename. So duo plus rename a number of times instead of dup dup dup dup and rename rename rename rename. So in this case it makes really no difference but it might be that with more complex routines this kind of behavior conflicts with what you really want to perform and you got some errors that you’re not able to debug because apparently everything works fine. So the caveat here is that map and I think also forEach all those functions that run on arrays with async and await: mmmh, probably going to lead to problems so try to use for loops as much as you can in these cases. Okay, so to recap everything that we have covered so far: you have to be aware that as, opposed to ExtendScript, in UXP you have a number of functions that return promises so either you use then callbacks or you use await and async. And if you ask me what are those functions well you can find them in the documentation in the Photoshop API section you can pick modules for instance and then I don’t know what document here it is you have active layers and you see that it returns a layer Array here so this is not a promise and all those are getters and getters usually are synchronous. In this case for instance the close method returns a promise let’s check the layers so get bounce returns bounds so no promises but probably in the methods for instance nudge I think returns a promise? yes here so you’re free to check all the methods that you need in all the Photoshop API modules and check whether you need to use async await you see async here so whenever you see async you know that you have to await for stuff. Okay I think this is it for this time I hope you have learned something new if this is the case please consider supporting this channel and me which is always really appreciated. I want to thank all the people who already had contributed there is a donation link in the youtube description of this video and on my website I also have ALCE and DoubleUSM in the Photoshop marketplace; if you happen to buy them a positive rating or review are always helpful. Thank you very much and see you in the next one. Bye!&lt;/p&gt;
</description>
        <pubDate>Mon, 23 Nov 2020 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/development/Adobe-UXP-things-you-need-to-know-5-async-vs-sync-in-photoshop-dom-scripting.html</link>
        <guid isPermaLink="true">http://localhost:4000/development/Adobe-UXP-things-you-need-to-know-5-async-vs-sync-in-photoshop-dom-scripting.html</guid>
        
        <category>UXP</category>
        
        
        <category>Development</category>
        
      </item>
    
      <item>
        <title>Adobe UXP: Things you need to know! #4 Commands, Panels and the manifest.json</title>
        <description>&lt;p&gt;In this episode I’m discussing Panels vs. Commands in Vanilla JS UXP plugins and the way they are expressed in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manifest.json&lt;/code&gt;&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/LkWfEC7bqdE&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;If you find this content useful, &lt;em&gt;please consider supporting me&lt;/em&gt; – 2020 is a hell of a year. I don’t have a Patreon page, but I’ve got two fairly cheap plugins on the Photoshop Marketplace, &lt;a href=&quot;https://adobe.com/go/cc_plugins_discover_plugin?pluginId=28db2e07&amp;amp;workflow=share&quot;&gt;ALCE&lt;/a&gt; (Advanced Local Contrast Enhancer) and &lt;a href=&quot;https://adobe.com/go/cc_plugins_discover_plugin?pluginId=78c3cdaf&amp;amp;workflow=share&quot;&gt;Double USM&lt;/a&gt; (on sharpening). If you happen to buy them, please leave a positive rating/review, it would greatly help. Or, you can&lt;/p&gt;

&lt;form action=&quot;https://www.paypal.com/donate&quot; method=&quot;post&quot; target=&quot;_top&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;hosted_button_id&quot; value=&quot;37N4GHTNJK8YE&quot; /&gt;
&lt;input type=&quot;image&quot; src=&quot;https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif&quot; border=&quot;0&quot; name=&quot;submit&quot; title=&quot;PayPal - The safer, easier way to pay online!&quot; alt=&quot;Donate with PayPal button&quot; /&gt;
&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;https://www.paypal.com/en_IT/i/scr/pixel.gif&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;
&lt;/form&gt;

&lt;p&gt;If you cannot, or don’t want to, that’s OK anyway.&lt;br /&gt;
Stay safe and thanks! 🙏🏻&lt;/p&gt;

&lt;h2 id=&quot;the-whole-series-so-far&quot;&gt;The whole series so far&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know.html&quot;&gt;#01 – Rundown on the UXP announcement @ the Adobe MAX 2020&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-2-documentation.html&quot;&gt;#02 - Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-3-UXP-developer-tool.html&quot;&gt;#03 - UXP Developer Tool&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-4-commands-panels-manifest.html&quot;&gt;#04 - Commands vs. Panels and the manifest.json&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-5-async-vs-sync-in-photoshop-dom-scripting.html&quot;&gt;#05 - Sync vs. Async code in Photoshop DOM Scripting&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-6-BatchPlay-part-1-ActionManager-roots.html&quot;&gt;#06 - BatchPlay (part 1): the ActionManager roots&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-7-BatchPlay-part-2-Alchemist-plugin-listener.html&quot;&gt;#07 - BatchPlay (part 2): Alchemist as a UXP Script Listener&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-8-BatchPlay-part-3-Alchemist-plugin-inspector.html&quot;&gt;#08 - BatchPlay (part 3): Alchemist as a UXP Inspector&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-9-Adobe-Spectrum-UXP.html&quot;&gt;#09 - Adobe Spectrum UXP&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-10-Dialogs.html&quot;&gt;#10 - Modal Dialogs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-11-Flyout-menus.html&quot;&gt;#11 - Flyout Menus and Entrypoints&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/development/Adobe-UXP-things-you-need-to-know-12-React-JS.html&quot;&gt;#12 - React JS and the UXP plugins Course&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;transcription&quot;&gt;Transcription&lt;/h2&gt;

&lt;p&gt;The transcripted video looks weird, but I’m told it helps to have it anyway because it’s easier to translate to other languages. Apologies for the lack of punctuation and the sloppy syntax.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Hey I’m Davide and this is Adobe UXP things you need to know! Today I’m talking about Panels versus Commands in vanilla JavaScript plugins and the way they are expressed in the manifest.json. Plus some other stuff, but this is the main plan so let’s get to it. I need some plug-in samples to work on so head to this GitHub repo and grab them all. The ones that I’m interested into this time are the direct-action-js-sample the hello-world-panel-js-sample and the ui-kitchen-sink sample so let me load in Photoshop as well this first one here so back to the UXP DevTool and if you are unsure how to operate with the UXP DevTool please refer to my previous video let’s add this one first so let’s point to the manifest.json which is here and open this loads it not in Photoshop but in the ui of the UXP DevTool and then with this load command we should find it in Photoshop unless we don’t and the reason why we don’t see anything is because this plugin isn’t made of panels if you remember something that I told you I think in the very first video is that UXP plugins could be made of zero or more panels zero or more commands zero or more modal dialogues and this one has no graphic user interface has no panel it’s just one command in fact you can find it here in the plugins sample write layer names and this is the commands or also in the plugins panel and here you find it right so let’s see what this is all about so let me try to run it first to see that it is operational please open at least one document let me create quickly one then duplicate the background layer a bunch of times click write layer names to a file and this pops up this dialog that asks me to save this layer names txt let’s pick UXP and then samples this is a good place I think it’s done so let’s check in the Finder we should have it UXP samples and here it is layernames.txt and here are the layer names that I have in my document. So cool this works.
Now I’m not really interested into the mechanics of the plugin but in the way that it is structured to contain a single command or more commands as we will see because you have to know, and this is
a very important take away, that in UXP there is no concept of an independent script. At least so far. So the things that you were used to find for instance in the file &amp;gt; scripts &amp;gt; browse… menu so loading and running a JSX file, a single independent script this is not any more a thing in UXP again at least so far so things might change in the future but right now scripts can live only within the context of a UXP plugin which is exactly what this sample write layer names plugin does: it contains one command aka one script so let’s look at the code for it and the one thing that I want to show you first is the manifest.json so let me collapse everything and here you have the id which in this case follows the reverse url convention so it’s com.adobe. and then the name of the panel instead of the alphanumeric string that you are given by the UXP marketplace actually by the developer console when you want to create a new product for the UXP marketplace you could add here everything even mamma mia that’s going to work just fine then you have the name which is the string here the version 1.0.0 and the entry point which in this case is a JavaScript file and this makes sense because this plugin doesn’t have a graphic user interface so you don’t have the need for an html file. Usually plugins with panels have an entry point of an html index.html in this case it makes sense to have a JavaScript file. In case of React it makes no difference you can have either the JS or the html in case of the JS it’s React that is injecting the html elements in the DOM via JavaScript right so then the host array we have Photoshop minimum version 22.0.0 and the manifest version must be at least four now let me skate over the entry points for the moment and let’s focus on the icons so this is an array but it contains only one object because this icon that we are specifying here with this path applies to all the themes the darkest dark the lightest and the light medium I am positive is just an Adobe XD thing so you can remove it and all is a bit redundant here if you want to have an icon for the dark theme set and another for the light theme sets you just have to duplicate this entire object and of course pick the right icon and then set the themes for which it applies very important the species here: is pluginList and this pluginList means the icon for Photoshop’s own plugins panel which is different in case of a panel that has its own icon but we will see that when we deal with panels in the next example so these are the icons and please note that even if we specify this plugin-icon.png we don’t have it in the icons folder we have plugin-icon@1x and plugin-icon@2x this is because we have a couple of scales the default one and the one for retina displays and we specify explicitly the size for the retina one here so the 2x is 48 x 48 and the 1x is 24 x 24 and we add the 48 here okay so these are the icons let’s now focus on the entry points this is an array because you can have more than one we have just one command here which is this one write layer names to a file so one object the type is command instead of panel and you have an id of writelayers and this is really important so remember that and then a label: label is of course what is written here write layer names to a file and it has default property because you can localize this so for instance if you want to add an Italian version you say “it” and then you add here the translation okay but you must provide the defaults let me get rid of that and be aware that trailing commas are evil in manifests so they’re going to break everything if you leave them around so let’s save back the file as it was all right so the id I said is really important so let me close those icons and let me open the index.js let’s start from the very beginning so you are requiring UXP and UXP is provided by the environment and if you are unfamiliar with this kind of syntax which is modern JavaScript let’s say that this is equal to const UXP is equal to require UXP so you’re saying listen: require UXP returns an object and this object has an entrypoints property so you could say UXP dot entry point and that would be perfectly fine you could even say listen let’s stick that into another constant so const entrypoints let me grab this here equal UXP dot entrypoints right with this modern syntax you are saying I know I understand that you’re returning me an object with an entrypoints property and I’m only interested into that so please stick it into an entrypoints constant okay right so the entrypoints has a setup method and the setup method accepts an object which is this one this object has a commands property which is in turn another object and in here you can have all the commands that your UXP plug-in is going to host right in this case it’s only one because we have only one so this command here and this property here must match absolutely with the id that you set in the manifest json so think about it this way the manifest.json tells Photoshop how to construct the UXP plug-in so what are the elements you have one UXP plugin named this way that contains for instance one command with this name but it’s the index.js that links that menu item with the function that you’re going to run so this write layers commands is going to run this write layers function which is defined below so let me collapse all those because we’re not really interested in what they are doing but the way they are connected to the manifest again if you are unfamiliar with the syntax well this is just an anonymous function you could write it like a function and then instead of the fat arrow you add parenthesis here okay so it’s an anonymous function that runs a write layers this is exactly the same actually there is no need to wrap it with an anonymous function because you run just this so you could just say you write layers write layers without the parenthesis okay actually even better if this was a lowercase L so let me quickly rename this this way there is no need to duplicate the writing you could just say write layers stop right and this works so let me save this just to show you that it works this is being loaded I want to watch it it’s watching for changes I’m saving so this should be it and you see that it pops up the dialog as it is supposed to do so this is a perfectly viable syntax but let’s get back to the original one all right so what does it say here if we had other menu items it would go here and then the manifest.json file so let’s try to do that
let’s add another command so let me duplicate the entire object because we are developers we love to copy and paste and instead of write layers this is going to be write I don’t know what documents okay and the label is write document names to a file like that so in this case we need to add another command so comma and write documents and another anonymous function that well let me do something different since we have a show alert here which is just a wrapper for the Photoshop app show alert function let me alert something like I don’t know what writing docs okay so at this point we have this command that matches this id, does it? It does, so let me save everything. I know for a fact that watching for changes at least right now doesn’t take into account manifest changes so if you see here you find just one item in the plugins menu as well so you need to explicitly load it again plug in loaded successfully and now you have both of them and let’s click write document names to a file and an alert should pop up and sure enough it does so it works so you have seen how to add another commands how to create plugins with a command just in case again you’re not really familiar with this new syntax let me tell you how to compartmentalize – is that a word? – how to split the code into a different file so we have all these functions here that you might want to have in another separate file so let me create one and I’m calling this I don’t know what lib.js and let me paste everything in here it’s not too big of a deal I mean there are just three functions but functions grow here we need the right layers and the show alerts so we need to export those in the lib.js so let me module dot exports&lt;/p&gt;

&lt;p&gt;and then I want the write layers to disk which is equal to write layer to disk and then duplicate this and then do the same with show alert which is here let me save this and in the index.js I need to do something quite close to that so instead of entrypoints and requiring UXP we are requiring the lib that sits in the same folder as this index.js and we are interested in the show alert and in the write layers&lt;/p&gt;

&lt;p&gt;with a capital L so this should work fine we are watching for changes and if I click this the alert pops up and if I click the other it doesn’t so something is missing let me try to understand what write layers&lt;/p&gt;

&lt;p&gt;oh write layers to disk I took the wrong one so write layers is the one that I need to export and it has a lowercase L so let me save this and rename that as well and I think that should be it so write layer names to a file still doesn’t work okay let’s take a chance and debug that so debug type error write layers is not defined with a capital l so probably again I’m messing with the yeah messing with the with the names oh because I renamed that oh my bad to show you that you could just remove the second part of the assignment in the object that was a capital L write layers with a capital L and again capital L here and here save capital L save again and this time I bet that is going to run please yes it does so it was little error on my side apologies for the time spent all right so that was it for the commands plugin let’s see what is in a panels plugin so the hello-world-panel-js-sample I want to add the plugin which is this panel-js-sample here so let me point to the manifest json and also load it in Photoshop loaded it successfully and this time it has a UI so it’s just a panel and you see it here sample hello world panel right you can close it and open it this way or from the plugin menu hello world sample what can we do we can show alerts uh we can populate the layers very much like the other one but this time in the panel itself we saw that code in a previous video and we can also clear the list so let’s see what’s different in terms of manifest and the JavaScript code so same things as long as the id name version are involved the main entry point is different though we have an index.html again because this is a panel and it makes sense to have an html the host is the same manifest version as well the icons are the same yes exactly the same the difference is in the entry points for once we have a type of panel this time an id of hello world the id is really important we will see why in a moment then we have a bunch of sizes minimum size maximum size that are exactly what you are expecting them to be and also a preferred docked size so when the panel is docked like this this is a preferred size and the preferred floating size so when it is floating freely all right then you have the label again with the default hellworld sample and the icon so this is different compared to those icons so the icons that are outside of everything are the icons for the plugins panel whereas the icons that are inside the entry point in this case are the panels icons so these icons here you see that this is pretty much different compared to that another difference for the icon is as follows so you still have the theme and in this case you see that you have two different objects in the icons array one for the darkest and dark and another for the lightest and light but also you specify the width and the height of the default scale not the retina scale so on the one hand these are different so it’s 23 times 23 and 46 times 46 instead of the plugins icons that are 24 and 48 so few pixels of difference but here you set the standard slash&lt;/p&gt;

&lt;p&gt;default size whereas in the plugins panel you set the retina size right so this is a little bit of a difference that you have to be aware of when writing your manifest otherwise you’re going to run into unwanted behaviours so let’s have a look at the JavaScript side so this is the manifest we expect to see something similar to this entry point setup thing here and we don’t because apparently you can get away with not having an entry point set up if it’s not strictly needed so here you don’t have it but the panel works fine just the same I don’t know if they are going to require that in the future but so far that’s a possibility but let’s look at the kitchen sink for comparison so in this case the kitchen sink let me reload that once more we saw that in a couple of previous videos ui-kitchen-sink it’s here manifest.json open and then also load it into Photoshop here it is let me close that white background that annoys me all right the kitchen sink is a particular panel in the sense that it contains both a panel which is this one and a command so both of them and you can see them better probably in the menu item the kitchen sink is the plugin and the reload plugin which in this case just reloads the plugin is a command so it contains both of the different types so you have two entry points one object here for the type command id reload plugin and another one for the type panel with id kitchensink and in the JavaScript you have this entrypoints and you should see them somewhere below let me try to find them entry points here you have the entry points setup function that has both the commands and the panels and this kitchen sink here is exactly the same id that is defined in the manifest so again think about the manifest as what to display in the Photoshop ui versus the JavaScript how to link this to actual functions and one that you see here in the panels is the show function that takes a funny argument but we won’t go into that in this video maybe in a later one so what happens in this show is code that is run the first time that the panels show in this case they’re using local storage so let me briefly explain it to you when you switch from tab to tab the active tab is saved in the local storage so that in the next session when you open the panel it opens showing the same exact tab that you left off with okay so this is one possibility let me try to implement the same kind of functionality in this hello-world-panel-js-sample so we need to import again the same let me copy and paste because I’m lazy the same entry point thing so here above we want to have the entry points and then we need to run the setup function in the entry point so entry points dot setup and this accepts an object that has a panels&lt;/p&gt;

&lt;p&gt;property that in turn contains an object again that has this time the id the id of the panel and again be aware that we’re not talking about the idea of the plugin but the id of the panel which is hello world okay so this here and this one is going to have an object and in here we have a show function and in this show function what do I want to do I don’t know just maybe show an alert and show alert again is just a wrapper for the require Photoshop app show alert so show alerts and I don’t know showing like that okay so let me save am I watching this plugin I doubt in fact I’m not watching let me watch for changes and let me save again just to trigger the watch and it says showing now very important thing don’t think that this function shows every time that the panel is closed and reopened because it won’t let me close the kitchen sink the hello world sample is here you see it doesn’t and the reason why is that this shows only the first time because UXP panels are persistent by default if you have experience with CEP panels you know that the initialization code that they might contain would run each time that you reopen them unless they are persistent in which case the init code runs just once while UXP panels are persistent by default so no matter how many times that you close and reopen them this show will run just once if you want to run code based on the show hide status you have to follow a different path that we might look at in a future video so the bottom line is that this show alert just run once okay okay let me recap what we have seen so far we can have plugins that contain just commands scripts must be wrapped with UXP plugins and this is how to do it you can have more than one command inside the same UXP plugin and we’ve also seen how to export functions to be imported with this require syntax and the object destructuring syntax here then we have this hello world panel sample where instead we have panels as opposed to commands and this is defined by the type we still have the id and we can have this entrypoints set up panels and the show function again this must match the string that is found in the manifest.json right and then in the kitchen sync example we have seen a plugin that contains both a command and a panel and the way that the two are set up in the entrypoints setup right? OK I think this is it for this time I hope you have learned something new and if this is the case please consider  &lt;/p&gt;

&lt;p&gt;supporting me I want to thank all the people who made a donation there’s a button on my website it’s been truly very much appreciated you can also purchase ALCE and DoubleUSM in the Photoshop marketplace and if you happen to buy them please leave a positive rating or a review which will always help very much as well. Okay thanks for watching and see you in the next one. Bye!&lt;/p&gt;
</description>
        <pubDate>Wed, 18 Nov 2020 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/development/Adobe-UXP-things-you-need-to-know-4-commands-panels-manifest.html</link>
        <guid isPermaLink="true">http://localhost:4000/development/Adobe-UXP-things-you-need-to-know-4-commands-panels-manifest.html</guid>
        
        <category>UXP</category>
        
        
        <category>Development</category>
        
      </item>
    
  </channel>
</rss>
